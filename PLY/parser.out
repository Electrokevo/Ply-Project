Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    DIVIDE_EQUAL
    DO
    FILE
    IN
    MINUS_EQUAL
    MODULE
    MODULE_EQUAL
    NEW
    NINT
    NUINT
    PLUS_EQUAL
    STRING
    THEN
    TIMES_EQUAL
    ULONG
    USHORT
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> usings namespace class
Rule 2     program -> namespace class
Rule 3     usings -> using usings
Rule 4     usings -> using
Rule 5     using -> USING CLASSOBJECT SEMICOLON
Rule 6     namespace -> NAMESPACE CLASSOBJECT SEMICOLON
Rule 7     class -> modifier CLASS CLASSOBJECT block
Rule 8     class -> modifier STATIC CLASS CLASSOBJECT block
Rule 9     object_access -> ID DOT ID
Rule 10    object_access -> CLASSOBJECT DOT CLASSOBJECT
Rule 11    object_access -> ID DOT CLASSOBJECT
Rule 12    object_access -> CLASSOBJECT DOT ID
Rule 13    block -> LBRACKET body RBRACKET
Rule 14    body -> lines SEMICOLON
Rule 15    body -> lines SEMICOLON body
Rule 16    body -> if
Rule 17    body -> loop
Rule 18    body -> function
Rule 19    lines -> assignment
Rule 20    lines -> expression
Rule 21    lines -> declaration
Rule 22    lines -> return
Rule 23    names -> ID
Rule 24    names -> CLASSOBJECT
Rule 25    function -> modifier data_type names LPAREN declarations RPAREN block
Rule 26    function -> modifier VOID names LPAREN declarations RPAREN block
Rule 27    function -> modifier STATIC data_type names LPAREN declarations RPAREN block
Rule 28    function -> modifier STATIC VOID names LPAREN declarations RPAREN block
<<<<<<< HEAD
Rule 29    return -> RETURN ID
Rule 30    return -> RETURN type
Rule 31    lambda_function -> LPAREN ID RPAREN ARROW expression
Rule 32    lambda_function -> LPAREN ID RPAREN ARROW block
Rule 33    expression -> object_access LPAREN expression RPAREN
Rule 34    expression -> object_access LPAREN RPAREN
Rule 35    if -> IF LPAREN logical_expression RPAREN block
Rule 36    if -> IF LPAREN logical_expression RPAREN block body
Rule 37    if -> IF LPAREN logical_expression RPAREN block elseif
Rule 38    if -> IF LPAREN logical_expression RPAREN block else
Rule 39    elseif -> ELSE IF LPAREN logical_expression RPAREN block
Rule 40    elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif
Rule 41    elseif -> ELSE IF LPAREN logical_expression RPAREN block else
Rule 42    else -> ELSE block
Rule 43    else -> ELSE block body
Rule 44    loop -> while_loop
Rule 45    loop -> loop_for
Rule 46    loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
Rule 47    loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
Rule 48    while_loop -> WHILE LPAREN logical_expression RPAREN block
Rule 49    while_loop -> WHILE LPAREN logical_expression RPAREN block body
Rule 50    logical_expression -> logical_factor logical_operator logical_expression
Rule 51    logical_expression -> logical_expression logical_operator logical_expression
Rule 52    logical_expression -> logical_factor
Rule 53    logical_factor -> TRUE
Rule 54    logical_factor -> FALSE
Rule 55    logical_factor -> ID
Rule 56    logical_factor -> indexing
Rule 57    logical_factor -> type
Rule 58    logical_factor -> object_access
Rule 59    logical_factor -> LPAREN logical_expression RPAREN
Rule 60    logical_operator -> OR
Rule 61    logical_operator -> AND
Rule 62    logical_operator -> NOT
Rule 63    logical_operator -> GREATER_THAN
Rule 64    logical_operator -> LESS_THAN
Rule 65    logical_operator -> GREATER_EQUALS_THAN
Rule 66    logical_operator -> LESS_EQUALS_THAN
Rule 67    logical_operator -> EQUALITY
Rule 68    data_structure -> data_structure_list
Rule 69    data_structure -> data_structure_array
Rule 70    data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
Rule 71    data_structure_array -> primitive LSQBRACKET RSQBRACKET
Rule 72    data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET
Rule 73    assignment -> data_type ID EQUALS expression
Rule 74    assignment -> ID EQUALS expression
Rule 75    assignment_class -> CLASSOBJECT ID
Rule 76    expression -> expression PLUS term
Rule 77    expression -> expression MINUS term
Rule 78    expression -> term
Rule 79    term -> term TIMES factor
Rule 80    term -> term DIVIDE factor
Rule 81    term -> factor
Rule 82    factor -> type
Rule 83    factor -> LPAREN expression RPAREN
Rule 84    factor -> object_access
Rule 85    factor -> ID
Rule 86    factor -> indexing
Rule 87    type -> FLOAT_TYPE
Rule 88    type -> DOUBLE_TYPE
Rule 89    type -> DECIMAL_TYPE
Rule 90    type -> INTEGER_TYPE
Rule 91    type -> MINUS type
Rule 92    declarations -> declaration
Rule 93    declarations -> declaration COMMA
Rule 94    declarations -> declaration COMMA declarations
Rule 95    declaration -> data_type ID
Rule 96    modifier -> PUBLIC
Rule 97    modifier -> PRIVATE
Rule 98    modifier -> PROTECTED
Rule 99    modifier -> INTERNAL
Rule 100   data_type -> primitive
Rule 101   data_type -> data_structure
Rule 102   primitive -> INT
Rule 103   primitive -> FLOAT
Rule 104   primitive -> BOOL
Rule 105   primitive -> BYTE
Rule 106   primitive -> CHAR
Rule 107   primitive -> SBYTE
Rule 108   primitive -> DECIMAL
Rule 109   primitive -> DOUBLE
Rule 110   primitive -> LONG
Rule 111   primitive -> SHORT
Rule 112   primitive -> UINT
Rule 113   indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET
Rule 114   indexing -> ID LSQBRACKET ID RSQBRACKET

Terminals, with rules where they appear

AND                  : 61
ARROW                : 31 32
BOOL                 : 104
BYTE                 : 105
CHAR                 : 106
CHARACTER            : 
CLASS                : 7 8
CLASSOBJECT          : 5 6 7 8 10 10 11 12 24 72 75
COMMA                : 93 94
DECIMAL              : 108
DECIMAL_TYPE         : 89
DIVIDE               : 80
DIVIDE_EQUAL         : 
DO                   : 
DOT                  : 9 10 11 12
DOUBLE               : 109
DOUBLE_TYPE          : 88
ELSE                 : 39 40 41 42 43
EQUALITY             : 67
EQUALS               : 73 74
FALSE                : 54
FILE                 : 
FLOAT                : 103
FLOAT_TYPE           : 87
FOR                  : 46 47
GREATER_EQUALS_THAN  : 65
GREATER_THAN         : 63 70
ID                   : 9 9 11 12 23 29 31 32 55 70 73 74 75 85 95 113 114 114
IF                   : 35 36 37 38 39 40 41
IN                   : 
INT                  : 102
INTEGER_TYPE         : 90 113
INTERNAL             : 99
LBRACKET             : 13
LESS_EQUALS_THAN     : 66
LESS_THAN            : 64 70
LIST                 : 70
LONG                 : 110
LPAREN               : 25 26 27 28 31 32 33 34 35 36 37 38 39 40 41 46 47 48 49 59 83
LSQBRACKET           : 70 71 72 113 114
MINUS                : 77 91
=======
Rule 29    function -> function body
Rule 30    return -> RETURN ID
Rule 31    return -> RETURN type
Rule 32    return -> RETURN expression
Rule 33    function_call -> names LPAREN RPAREN
Rule 34    function_call -> names LPAREN arguments RPAREN
Rule 35    arguments -> expression
Rule 36    arguments -> expression COMMA arguments
Rule 37    arguments -> names
Rule 38    arguments -> names COMMA arguments
Rule 39    lambda_function -> LPAREN ID RPAREN ARROW expression
Rule 40    lambda_function -> LPAREN ID RPAREN ARROW block
Rule 41    expression -> object_access LPAREN expression RPAREN
Rule 42    expression -> object_access LPAREN RPAREN
Rule 43    if -> IF LPAREN logical_expression RPAREN block
Rule 44    if -> IF LPAREN logical_expression RPAREN block body
Rule 45    if -> IF LPAREN logical_expression RPAREN block elseif
Rule 46    if -> IF LPAREN logical_expression RPAREN block else
Rule 47    elseif -> ELSE IF LPAREN logical_expression RPAREN block
Rule 48    elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif
Rule 49    elseif -> ELSE IF LPAREN logical_expression RPAREN block else
Rule 50    else -> ELSE block
Rule 51    else -> ELSE block body
Rule 52    loop -> while_loop
Rule 53    loop -> loop_for
Rule 54    loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
Rule 55    loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
Rule 56    while_loop -> WHILE LPAREN logical_expression RPAREN block
Rule 57    while_loop -> WHILE LPAREN logical_expression RPAREN block body
Rule 58    logical_expression -> logical_expression logical_operator logical_factor
Rule 59    logical_expression -> logical_factor
Rule 60    logical_factor -> TRUE
Rule 61    logical_factor -> FALSE
Rule 62    logical_factor -> ID
Rule 63    logical_factor -> indexing
Rule 64    logical_factor -> type
Rule 65    logical_factor -> object_access
Rule 66    logical_factor -> LPAREN logical_expression RPAREN
Rule 67    logical_operator -> OR
Rule 68    logical_operator -> AND
Rule 69    logical_operator -> NOT
Rule 70    logical_operator -> GREATER_THAN
Rule 71    logical_operator -> LESS_THAN
Rule 72    logical_operator -> GREATER_EQUALS_THAN
Rule 73    logical_operator -> LESS_EQUALS_THAN
Rule 74    logical_operator -> EQUALITY
Rule 75    data_structure -> data_structure_list
Rule 76    data_structure -> data_structure_array
Rule 77    data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
Rule 78    data_structure_array -> primitive LSQBRACKET RSQBRACKET
Rule 79    data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET
Rule 80    assignment -> data_type ID EQUALS expression
Rule 81    assignment -> ID EQUALS expression
Rule 82    assignment -> indexing EQUALS expression
Rule 83    assignment -> ID PLUSONE
Rule 84    assignment_class -> CLASSOBJECT ID
Rule 85    expression -> expression PLUS term
Rule 86    expression -> expression MINUS term
Rule 87    expression -> term
Rule 88    term -> term TIMES factor
Rule 89    term -> term DIVIDE factor
Rule 90    term -> factor
Rule 91    factor -> type
Rule 92    factor -> LPAREN expression RPAREN
Rule 93    factor -> object_access
Rule 94    factor -> ID
Rule 95    factor -> indexing
Rule 96    factor -> function_call
Rule 97    type -> FLOAT_TYPE
Rule 98    type -> DOUBLE_TYPE
Rule 99    type -> DECIMAL_TYPE
Rule 100   type -> INTEGER_TYPE
Rule 101   type -> MINUS type
Rule 102   declarations -> declaration
Rule 103   declarations -> declaration COMMA
Rule 104   declarations -> declaration COMMA declarations
Rule 105   declaration -> data_type ID
Rule 106   modifier -> PUBLIC
Rule 107   modifier -> PRIVATE
Rule 108   modifier -> PROTECTED
Rule 109   modifier -> INTERNAL
Rule 110   data_type -> primitive
Rule 111   data_type -> data_structure
Rule 112   primitive -> INT
Rule 113   primitive -> FLOAT
Rule 114   primitive -> BOOL
Rule 115   primitive -> BYTE
Rule 116   primitive -> CHAR
Rule 117   primitive -> SBYTE
Rule 118   primitive -> DECIMAL
Rule 119   primitive -> DOUBLE
Rule 120   primitive -> LONG
Rule 121   primitive -> SHORT
Rule 122   primitive -> UINT
Rule 123   indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET
Rule 124   indexing -> ID LSQBRACKET ID RSQBRACKET
Rule 125   indexing -> ID LSQBRACKET expression RSQBRACKET

Terminals, with rules where they appear

AND                  : 68
ARROW                : 39 40
BOOL                 : 114
BYTE                 : 115
CHAR                 : 116
CHARACTER            : 
CLASS                : 7 8
CLASSOBJECT          : 5 6 7 8 10 10 11 12 24 79 84
COMMA                : 36 38 103 104
DECIMAL              : 118
DECIMAL_TYPE         : 99
DIVIDE               : 89
DIVIDE_EQUAL         : 
DO                   : 
DOT                  : 9 10 11 12
DOUBLE               : 119
DOUBLE_TYPE          : 98
ELSE                 : 47 48 49 50 51
EQUALITY             : 74
EQUALS               : 80 81 82
FALSE                : 61
FILE                 : 
FLOAT                : 113
FLOAT_TYPE           : 97
FOR                  : 54 55
GREATER_EQUALS_THAN  : 72
GREATER_THAN         : 70 77
ID                   : 9 9 11 12 23 30 39 40 62 77 80 81 83 84 94 105 123 124 124 125
IF                   : 43 44 45 46 47 48 49
IN                   : 
INT                  : 112
INTEGER_TYPE         : 100 123
INTERNAL             : 109
LBRACKET             : 13
LESS_EQUALS_THAN     : 73
LESS_THAN            : 71 77
LIST                 : 77
LONG                 : 120
LPAREN               : 25 26 27 28 33 34 39 40 41 42 43 44 45 46 47 48 49 54 55 56 57 66 92
LSQBRACKET           : 77 78 79 123 124 125
MINUS                : 86 101
>>>>>>> rLevin
MINUS_EQUAL          : 
MODULE               : 
MODULE_EQUAL         : 
NAMESPACE            : 6
NEW                  : 
NINT                 : 
<<<<<<< HEAD
NOT                  : 62
NUINT                : 
OR                   : 60
PLUS                 : 76
PLUS_EQUAL           : 
PRIVATE              : 97
PROTECTED            : 98
PUBLIC               : 96
RBRACKET             : 13
RETURN               : 29 30
RPAREN               : 25 26 27 28 31 32 33 34 35 36 37 38 39 40 41 46 47 48 49 59 83
RSQBRACKET           : 70 71 72 113 114
SBYTE                : 107
SEMICOLON            : 5 6 14 15 46 46 47 47
SHORT                : 111
STATIC               : 8 27 28
STRING               : 
THEN                 : 
TIMES                : 79
TIMES_EQUAL          : 
TRUE                 : 53
UINT                 : 112
=======
NOT                  : 69
NUINT                : 
OR                   : 67
PLUS                 : 85
PLUSONE              : 83
PLUS_EQUAL           : 
PRIVATE              : 107
PROTECTED            : 108
PUBLIC               : 106
RBRACKET             : 13
RETURN               : 30 31 32
RPAREN               : 25 26 27 28 33 34 39 40 41 42 43 44 45 46 47 48 49 54 55 56 57 66 92
RSQBRACKET           : 77 78 79 123 124 125
SBYTE                : 117
SEMICOLON            : 5 6 14 15 54 54 55 55
SHORT                : 121
STATIC               : 8 27 28
STRING               : 
THEN                 : 
TIMES                : 88
TIMES_EQUAL          : 
TRUE                 : 60
UINT                 : 122
>>>>>>> rLevin
ULONG                : 
USHORT               : 
USING                : 5
VAR                  : 
VOID                 : 26 28
<<<<<<< HEAD
WHILE                : 48 49
=======
WHILE                : 56 57
>>>>>>> rLevin
error                : 

Nonterminals, with rules where they appear

<<<<<<< HEAD
assignment           : 19 46 46 47 47
assignment_class     : 
block                : 7 8 25 26 27 28 32 35 36 37 38 39 40 41 42 43 46 47 48 49
body                 : 13 15 36 43 47 49
class                : 1 2
data_structure       : 101
data_structure_array : 69
data_structure_list  : 68
data_type            : 25 27 70 73 95
declaration          : 21 92 93 94
declarations         : 25 26 27 28 94
else                 : 38 41
elseif               : 37 40
expression           : 20 31 33 73 74 76 77 83
factor               : 79 80 81
function             : 18
if                   : 16
indexing             : 56 86
lambda_function      : 
lines                : 14 15
logical_expression   : 35 36 37 38 39 40 41 46 47 48 49 50 51 51 59
logical_factor       : 50 52
logical_operator     : 50 51
loop                 : 17
loop_for             : 45
modifier             : 7 8 25 26 27 28
names                : 25 26 27 28
namespace            : 1 2
object_access        : 33 34 58 84
primitive            : 71 100
program              : 0
return               : 22
term                 : 76 77 78 79 80
type                 : 30 57 70 82 91
using                : 3 4
usings               : 1 3
while_loop           : 44
=======
arguments            : 34 36 38
assignment           : 19 54 54 55 55
assignment_class     : 
block                : 7 8 25 26 27 28 40 43 44 45 46 47 48 49 50 51 54 55 56 57
body                 : 13 15 29 44 51 55 57
class                : 1 2
data_structure       : 111
data_structure_array : 76
data_structure_list  : 75
data_type            : 25 27 77 80 105
declaration          : 21 102 103 104
declarations         : 25 26 27 28 104
else                 : 46 49
elseif               : 45 48
expression           : 20 32 35 36 39 41 80 81 82 85 86 92 125
factor               : 88 89 90
function             : 18 29
function_call        : 96
if                   : 16
indexing             : 63 82 95
lambda_function      : 
lines                : 14 15
logical_expression   : 43 44 45 46 47 48 49 54 55 56 57 58 66
logical_factor       : 58 59
logical_operator     : 58
loop                 : 17
loop_for             : 53
modifier             : 7 8 25 26 27 28
names                : 25 26 27 28 33 34 37 38
namespace            : 1 2
object_access        : 41 42 65 93
primitive            : 78 110
program              : 0
return               : 22
term                 : 85 86 87 88 89
type                 : 31 64 77 91 101
using                : 3 4
usings               : 1 3
while_loop           : 52
>>>>>>> rLevin

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . usings namespace class
    (2) program -> . namespace class
    (3) usings -> . using usings
    (4) usings -> . using
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5
    USING           shift and go to state 6

    program                        shift and go to state 1
    usings                         shift and go to state 2
    namespace                      shift and go to state 3
    using                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> usings . namespace class
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5

    namespace                      shift and go to state 7

state 3

    (2) program -> namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
<<<<<<< HEAD
    (96) modifier -> . PUBLIC
    (97) modifier -> . PRIVATE
    (98) modifier -> . PROTECTED
    (99) modifier -> . INTERNAL
=======
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
>>>>>>> rLevin

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 8
    modifier                       shift and go to state 9

state 4

    (3) usings -> using . usings
    (4) usings -> using .
    (3) usings -> . using usings
    (4) usings -> . using
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       reduce using rule 4 (usings -> using .)
    USING           shift and go to state 6

    using                          shift and go to state 4
    usings                         shift and go to state 14

state 5

    (6) namespace -> NAMESPACE . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 15


state 6

    (5) using -> USING . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 16


state 7

    (1) program -> usings namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
<<<<<<< HEAD
    (96) modifier -> . PUBLIC
    (97) modifier -> . PRIVATE
    (98) modifier -> . PROTECTED
    (99) modifier -> . INTERNAL
=======
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
>>>>>>> rLevin

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 17
    modifier                       shift and go to state 9

state 8

    (2) program -> namespace class .

    $end            reduce using rule 2 (program -> namespace class .)


state 9

    (7) class -> modifier . CLASS CLASSOBJECT block
    (8) class -> modifier . STATIC CLASS CLASSOBJECT block

    CLASS           shift and go to state 18
    STATIC          shift and go to state 19


state 10

<<<<<<< HEAD
    (96) modifier -> PUBLIC .

    CLASS           reduce using rule 96 (modifier -> PUBLIC .)
    STATIC          reduce using rule 96 (modifier -> PUBLIC .)
    VOID            reduce using rule 96 (modifier -> PUBLIC .)
    INT             reduce using rule 96 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 96 (modifier -> PUBLIC .)
    BOOL            reduce using rule 96 (modifier -> PUBLIC .)
    BYTE            reduce using rule 96 (modifier -> PUBLIC .)
    CHAR            reduce using rule 96 (modifier -> PUBLIC .)
    SBYTE           reduce using rule 96 (modifier -> PUBLIC .)
    DECIMAL         reduce using rule 96 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 96 (modifier -> PUBLIC .)
    LONG            reduce using rule 96 (modifier -> PUBLIC .)
    SHORT           reduce using rule 96 (modifier -> PUBLIC .)
    UINT            reduce using rule 96 (modifier -> PUBLIC .)
    LIST            reduce using rule 96 (modifier -> PUBLIC .)
    CLASSOBJECT     reduce using rule 96 (modifier -> PUBLIC .)
=======
    (106) modifier -> PUBLIC .

    CLASS           reduce using rule 106 (modifier -> PUBLIC .)
    STATIC          reduce using rule 106 (modifier -> PUBLIC .)
    VOID            reduce using rule 106 (modifier -> PUBLIC .)
    INT             reduce using rule 106 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 106 (modifier -> PUBLIC .)
    BOOL            reduce using rule 106 (modifier -> PUBLIC .)
    BYTE            reduce using rule 106 (modifier -> PUBLIC .)
    CHAR            reduce using rule 106 (modifier -> PUBLIC .)
    SBYTE           reduce using rule 106 (modifier -> PUBLIC .)
    DECIMAL         reduce using rule 106 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 106 (modifier -> PUBLIC .)
    LONG            reduce using rule 106 (modifier -> PUBLIC .)
    SHORT           reduce using rule 106 (modifier -> PUBLIC .)
    UINT            reduce using rule 106 (modifier -> PUBLIC .)
    LIST            reduce using rule 106 (modifier -> PUBLIC .)
    CLASSOBJECT     reduce using rule 106 (modifier -> PUBLIC .)
>>>>>>> rLevin


state 11

<<<<<<< HEAD
    (97) modifier -> PRIVATE .

    CLASS           reduce using rule 97 (modifier -> PRIVATE .)
    STATIC          reduce using rule 97 (modifier -> PRIVATE .)
    VOID            reduce using rule 97 (modifier -> PRIVATE .)
    INT             reduce using rule 97 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 97 (modifier -> PRIVATE .)
    BOOL            reduce using rule 97 (modifier -> PRIVATE .)
    BYTE            reduce using rule 97 (modifier -> PRIVATE .)
    CHAR            reduce using rule 97 (modifier -> PRIVATE .)
    SBYTE           reduce using rule 97 (modifier -> PRIVATE .)
    DECIMAL         reduce using rule 97 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 97 (modifier -> PRIVATE .)
    LONG            reduce using rule 97 (modifier -> PRIVATE .)
    SHORT           reduce using rule 97 (modifier -> PRIVATE .)
    UINT            reduce using rule 97 (modifier -> PRIVATE .)
    LIST            reduce using rule 97 (modifier -> PRIVATE .)
    CLASSOBJECT     reduce using rule 97 (modifier -> PRIVATE .)
=======
    (107) modifier -> PRIVATE .

    CLASS           reduce using rule 107 (modifier -> PRIVATE .)
    STATIC          reduce using rule 107 (modifier -> PRIVATE .)
    VOID            reduce using rule 107 (modifier -> PRIVATE .)
    INT             reduce using rule 107 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 107 (modifier -> PRIVATE .)
    BOOL            reduce using rule 107 (modifier -> PRIVATE .)
    BYTE            reduce using rule 107 (modifier -> PRIVATE .)
    CHAR            reduce using rule 107 (modifier -> PRIVATE .)
    SBYTE           reduce using rule 107 (modifier -> PRIVATE .)
    DECIMAL         reduce using rule 107 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 107 (modifier -> PRIVATE .)
    LONG            reduce using rule 107 (modifier -> PRIVATE .)
    SHORT           reduce using rule 107 (modifier -> PRIVATE .)
    UINT            reduce using rule 107 (modifier -> PRIVATE .)
    LIST            reduce using rule 107 (modifier -> PRIVATE .)
    CLASSOBJECT     reduce using rule 107 (modifier -> PRIVATE .)
>>>>>>> rLevin


state 12

<<<<<<< HEAD
    (98) modifier -> PROTECTED .

    CLASS           reduce using rule 98 (modifier -> PROTECTED .)
    STATIC          reduce using rule 98 (modifier -> PROTECTED .)
    VOID            reduce using rule 98 (modifier -> PROTECTED .)
    INT             reduce using rule 98 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 98 (modifier -> PROTECTED .)
    BOOL            reduce using rule 98 (modifier -> PROTECTED .)
    BYTE            reduce using rule 98 (modifier -> PROTECTED .)
    CHAR            reduce using rule 98 (modifier -> PROTECTED .)
    SBYTE           reduce using rule 98 (modifier -> PROTECTED .)
    DECIMAL         reduce using rule 98 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 98 (modifier -> PROTECTED .)
    LONG            reduce using rule 98 (modifier -> PROTECTED .)
    SHORT           reduce using rule 98 (modifier -> PROTECTED .)
    UINT            reduce using rule 98 (modifier -> PROTECTED .)
    LIST            reduce using rule 98 (modifier -> PROTECTED .)
    CLASSOBJECT     reduce using rule 98 (modifier -> PROTECTED .)
=======
    (108) modifier -> PROTECTED .

    CLASS           reduce using rule 108 (modifier -> PROTECTED .)
    STATIC          reduce using rule 108 (modifier -> PROTECTED .)
    VOID            reduce using rule 108 (modifier -> PROTECTED .)
    INT             reduce using rule 108 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 108 (modifier -> PROTECTED .)
    BOOL            reduce using rule 108 (modifier -> PROTECTED .)
    BYTE            reduce using rule 108 (modifier -> PROTECTED .)
    CHAR            reduce using rule 108 (modifier -> PROTECTED .)
    SBYTE           reduce using rule 108 (modifier -> PROTECTED .)
    DECIMAL         reduce using rule 108 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 108 (modifier -> PROTECTED .)
    LONG            reduce using rule 108 (modifier -> PROTECTED .)
    SHORT           reduce using rule 108 (modifier -> PROTECTED .)
    UINT            reduce using rule 108 (modifier -> PROTECTED .)
    LIST            reduce using rule 108 (modifier -> PROTECTED .)
    CLASSOBJECT     reduce using rule 108 (modifier -> PROTECTED .)
>>>>>>> rLevin


state 13

<<<<<<< HEAD
    (99) modifier -> INTERNAL .

    CLASS           reduce using rule 99 (modifier -> INTERNAL .)
    STATIC          reduce using rule 99 (modifier -> INTERNAL .)
    VOID            reduce using rule 99 (modifier -> INTERNAL .)
    INT             reduce using rule 99 (modifier -> INTERNAL .)
    FLOAT           reduce using rule 99 (modifier -> INTERNAL .)
    BOOL            reduce using rule 99 (modifier -> INTERNAL .)
    BYTE            reduce using rule 99 (modifier -> INTERNAL .)
    CHAR            reduce using rule 99 (modifier -> INTERNAL .)
    SBYTE           reduce using rule 99 (modifier -> INTERNAL .)
    DECIMAL         reduce using rule 99 (modifier -> INTERNAL .)
    DOUBLE          reduce using rule 99 (modifier -> INTERNAL .)
    LONG            reduce using rule 99 (modifier -> INTERNAL .)
    SHORT           reduce using rule 99 (modifier -> INTERNAL .)
    UINT            reduce using rule 99 (modifier -> INTERNAL .)
    LIST            reduce using rule 99 (modifier -> INTERNAL .)
    CLASSOBJECT     reduce using rule 99 (modifier -> INTERNAL .)
=======
    (109) modifier -> INTERNAL .

    CLASS           reduce using rule 109 (modifier -> INTERNAL .)
    STATIC          reduce using rule 109 (modifier -> INTERNAL .)
    VOID            reduce using rule 109 (modifier -> INTERNAL .)
    INT             reduce using rule 109 (modifier -> INTERNAL .)
    FLOAT           reduce using rule 109 (modifier -> INTERNAL .)
    BOOL            reduce using rule 109 (modifier -> INTERNAL .)
    BYTE            reduce using rule 109 (modifier -> INTERNAL .)
    CHAR            reduce using rule 109 (modifier -> INTERNAL .)
    SBYTE           reduce using rule 109 (modifier -> INTERNAL .)
    DECIMAL         reduce using rule 109 (modifier -> INTERNAL .)
    DOUBLE          reduce using rule 109 (modifier -> INTERNAL .)
    LONG            reduce using rule 109 (modifier -> INTERNAL .)
    SHORT           reduce using rule 109 (modifier -> INTERNAL .)
    UINT            reduce using rule 109 (modifier -> INTERNAL .)
    LIST            reduce using rule 109 (modifier -> INTERNAL .)
    CLASSOBJECT     reduce using rule 109 (modifier -> INTERNAL .)
>>>>>>> rLevin


state 14

    (3) usings -> using usings .

    NAMESPACE       reduce using rule 3 (usings -> using usings .)


state 15

    (6) namespace -> NAMESPACE CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 20


state 16

    (5) using -> USING CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 21


state 17

    (1) program -> usings namespace class .

    $end            reduce using rule 1 (program -> usings namespace class .)


state 18

    (7) class -> modifier CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 22


state 19

    (8) class -> modifier STATIC . CLASS CLASSOBJECT block

    CLASS           shift and go to state 23


state 20

    (6) namespace -> NAMESPACE CLASSOBJECT SEMICOLON .

    PUBLIC          reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PRIVATE         reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PROTECTED       reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    INTERNAL        reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)


state 21

    (5) using -> USING CLASSOBJECT SEMICOLON .

    USING           reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)
    NAMESPACE       reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)


state 22

    (7) class -> modifier CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 24

state 23

    (8) class -> modifier STATIC CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 26


state 24

    (7) class -> modifier CLASS CLASSOBJECT block .

    $end            reduce using rule 7 (class -> modifier CLASS CLASSOBJECT block .)


state 25

    (13) block -> LBRACKET . body RBRACKET
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
<<<<<<< HEAD
    (35) if -> . IF LPAREN logical_expression RPAREN block
    (36) if -> . IF LPAREN logical_expression RPAREN block body
    (37) if -> . IF LPAREN logical_expression RPAREN block elseif
    (38) if -> . IF LPAREN logical_expression RPAREN block else
    (44) loop -> . while_loop
    (45) loop -> . loop_for
=======
    (43) if -> . IF LPAREN logical_expression RPAREN block
    (44) if -> . IF LPAREN logical_expression RPAREN block body
    (45) if -> . IF LPAREN logical_expression RPAREN block elseif
    (46) if -> . IF LPAREN logical_expression RPAREN block else
    (52) loop -> . while_loop
    (53) loop -> . loop_for
>>>>>>> rLevin
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
<<<<<<< HEAD
    (73) assignment -> . data_type ID EQUALS expression
    (74) assignment -> . ID EQUALS expression
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (95) declaration -> . data_type ID
    (29) return -> . RETURN ID
    (30) return -> . RETURN type
    (48) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (49) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (46) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (96) modifier -> . PUBLIC
    (97) modifier -> . PRIVATE
    (98) modifier -> . PROTECTED
    (99) modifier -> . INTERNAL
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
=======
    (29) function -> . function body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (105) declaration -> . data_type ID
    (30) return -> . RETURN ID
    (31) return -> . RETURN type
    (32) return -> . RETURN expression
    (56) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (57) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (54) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
<<<<<<< HEAD
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
=======
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
>>>>>>> rLevin

    IF              shift and go to state 36
    ID              shift and go to state 43
    RETURN          shift and go to state 48
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 55
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LPAREN          shift and go to state 37
    LIST            shift and go to state 71
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

    body                           shift and go to state 27
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    names                          shift and go to state 42
    indexing                       shift and go to state 44
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    type                           shift and go to state 49
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    factor                         shift and go to state 56
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69
    function_call                  shift and go to state 70

state 26

    (8) class -> modifier STATIC CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 75

state 27

    (13) block -> LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 76


state 28

    (14) body -> lines . SEMICOLON
    (15) body -> lines . SEMICOLON body

    SEMICOLON       shift and go to state 77


state 29

    (16) body -> if .

    RBRACKET        reduce using rule 16 (body -> if .)
    IF              reduce using rule 16 (body -> if .)
    ID              reduce using rule 16 (body -> if .)
    RETURN          reduce using rule 16 (body -> if .)
    WHILE           reduce using rule 16 (body -> if .)
    FOR             reduce using rule 16 (body -> if .)
    PUBLIC          reduce using rule 16 (body -> if .)
    PRIVATE         reduce using rule 16 (body -> if .)
    PROTECTED       reduce using rule 16 (body -> if .)
    INTERNAL        reduce using rule 16 (body -> if .)
    CLASSOBJECT     reduce using rule 16 (body -> if .)
    INT             reduce using rule 16 (body -> if .)
    FLOAT           reduce using rule 16 (body -> if .)
    BOOL            reduce using rule 16 (body -> if .)
    BYTE            reduce using rule 16 (body -> if .)
    CHAR            reduce using rule 16 (body -> if .)
    SBYTE           reduce using rule 16 (body -> if .)
    DECIMAL         reduce using rule 16 (body -> if .)
    DOUBLE          reduce using rule 16 (body -> if .)
    LONG            reduce using rule 16 (body -> if .)
    SHORT           reduce using rule 16 (body -> if .)
    UINT            reduce using rule 16 (body -> if .)
    LPAREN          reduce using rule 16 (body -> if .)
    LIST            reduce using rule 16 (body -> if .)
    FLOAT_TYPE      reduce using rule 16 (body -> if .)
    DOUBLE_TYPE     reduce using rule 16 (body -> if .)
    DECIMAL_TYPE    reduce using rule 16 (body -> if .)
    INTEGER_TYPE    reduce using rule 16 (body -> if .)
    MINUS           reduce using rule 16 (body -> if .)


state 30

    (17) body -> loop .

    RBRACKET        reduce using rule 17 (body -> loop .)
    IF              reduce using rule 17 (body -> loop .)
    ID              reduce using rule 17 (body -> loop .)
    RETURN          reduce using rule 17 (body -> loop .)
    WHILE           reduce using rule 17 (body -> loop .)
    FOR             reduce using rule 17 (body -> loop .)
    PUBLIC          reduce using rule 17 (body -> loop .)
    PRIVATE         reduce using rule 17 (body -> loop .)
    PROTECTED       reduce using rule 17 (body -> loop .)
    INTERNAL        reduce using rule 17 (body -> loop .)
    CLASSOBJECT     reduce using rule 17 (body -> loop .)
    INT             reduce using rule 17 (body -> loop .)
    FLOAT           reduce using rule 17 (body -> loop .)
    BOOL            reduce using rule 17 (body -> loop .)
    BYTE            reduce using rule 17 (body -> loop .)
    CHAR            reduce using rule 17 (body -> loop .)
    SBYTE           reduce using rule 17 (body -> loop .)
    DECIMAL         reduce using rule 17 (body -> loop .)
    DOUBLE          reduce using rule 17 (body -> loop .)
    LONG            reduce using rule 17 (body -> loop .)
    SHORT           reduce using rule 17 (body -> loop .)
    UINT            reduce using rule 17 (body -> loop .)
    LPAREN          reduce using rule 17 (body -> loop .)
    LIST            reduce using rule 17 (body -> loop .)
    FLOAT_TYPE      reduce using rule 17 (body -> loop .)
    DOUBLE_TYPE     reduce using rule 17 (body -> loop .)
    DECIMAL_TYPE    reduce using rule 17 (body -> loop .)
    INTEGER_TYPE    reduce using rule 17 (body -> loop .)
    MINUS           reduce using rule 17 (body -> loop .)


state 31

    (18) body -> function .
    (29) function -> function . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (43) if -> . IF LPAREN logical_expression RPAREN block
    (44) if -> . IF LPAREN logical_expression RPAREN block body
    (45) if -> . IF LPAREN logical_expression RPAREN block elseif
    (46) if -> . IF LPAREN logical_expression RPAREN block else
    (52) loop -> . while_loop
    (53) loop -> . loop_for
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
    (29) function -> . function body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (105) declaration -> . data_type ID
    (30) return -> . RETURN ID
    (31) return -> . RETURN type
    (32) return -> . RETURN expression
    (56) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (57) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (54) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for INTERNAL resolved as shift
  ! shift/reduce conflict for CLASSOBJECT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SBYTE resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for DECIMAL_TYPE resolved as shift
  ! shift/reduce conflict for INTEGER_TYPE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 18 (body -> function .)
    IF              shift and go to state 36
    ID              shift and go to state 43
    RETURN          shift and go to state 48
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 55
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LPAREN          shift and go to state 37
    LIST            shift and go to state 71
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

  ! IF              [ reduce using rule 18 (body -> function .) ]
  ! ID              [ reduce using rule 18 (body -> function .) ]
  ! RETURN          [ reduce using rule 18 (body -> function .) ]
  ! WHILE           [ reduce using rule 18 (body -> function .) ]
  ! FOR             [ reduce using rule 18 (body -> function .) ]
  ! PUBLIC          [ reduce using rule 18 (body -> function .) ]
  ! PRIVATE         [ reduce using rule 18 (body -> function .) ]
  ! PROTECTED       [ reduce using rule 18 (body -> function .) ]
  ! INTERNAL        [ reduce using rule 18 (body -> function .) ]
  ! CLASSOBJECT     [ reduce using rule 18 (body -> function .) ]
  ! INT             [ reduce using rule 18 (body -> function .) ]
  ! FLOAT           [ reduce using rule 18 (body -> function .) ]
  ! BOOL            [ reduce using rule 18 (body -> function .) ]
  ! BYTE            [ reduce using rule 18 (body -> function .) ]
  ! CHAR            [ reduce using rule 18 (body -> function .) ]
  ! SBYTE           [ reduce using rule 18 (body -> function .) ]
  ! DECIMAL         [ reduce using rule 18 (body -> function .) ]
  ! DOUBLE          [ reduce using rule 18 (body -> function .) ]
  ! LONG            [ reduce using rule 18 (body -> function .) ]
  ! SHORT           [ reduce using rule 18 (body -> function .) ]
  ! UINT            [ reduce using rule 18 (body -> function .) ]
  ! LPAREN          [ reduce using rule 18 (body -> function .) ]
  ! LIST            [ reduce using rule 18 (body -> function .) ]
  ! FLOAT_TYPE      [ reduce using rule 18 (body -> function .) ]
  ! DOUBLE_TYPE     [ reduce using rule 18 (body -> function .) ]
  ! DECIMAL_TYPE    [ reduce using rule 18 (body -> function .) ]
  ! INTEGER_TYPE    [ reduce using rule 18 (body -> function .) ]
  ! MINUS           [ reduce using rule 18 (body -> function .) ]

    function                       shift and go to state 31
    body                           shift and go to state 78
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    names                          shift and go to state 42
    indexing                       shift and go to state 44
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    type                           shift and go to state 49
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    factor                         shift and go to state 56
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69
    function_call                  shift and go to state 70

state 32

    (19) lines -> assignment .

    SEMICOLON       reduce using rule 19 (lines -> assignment .)


state 33

    (20) lines -> expression .
<<<<<<< HEAD
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term
=======
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term
>>>>>>> rLevin

    SEMICOLON       reduce using rule 20 (lines -> expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80


state 34

    (21) lines -> declaration .

    SEMICOLON       reduce using rule 21 (lines -> declaration .)


state 35

    (22) lines -> return .

    SEMICOLON       reduce using rule 22 (lines -> return .)


state 36

<<<<<<< HEAD
    (35) if -> IF . LPAREN logical_expression RPAREN block
    (36) if -> IF . LPAREN logical_expression RPAREN block body
    (37) if -> IF . LPAREN logical_expression RPAREN block elseif
    (38) if -> IF . LPAREN logical_expression RPAREN block else
=======
    (43) if -> IF . LPAREN logical_expression RPAREN block
    (44) if -> IF . LPAREN logical_expression RPAREN block body
    (45) if -> IF . LPAREN logical_expression RPAREN block elseif
    (46) if -> IF . LPAREN logical_expression RPAREN block else
>>>>>>> rLevin

    LPAREN          shift and go to state 81


state 37

<<<<<<< HEAD
    (83) factor -> LPAREN . expression RPAREN
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
=======
    (92) factor -> LPAREN . expression RPAREN
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
<<<<<<< HEAD
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
=======
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
>>>>>>> rLevin

    ID              shift and go to state 83
    CLASSOBJECT     shift and go to state 84
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

    expression                     shift and go to state 82
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 38

<<<<<<< HEAD
    (44) loop -> while_loop .

    RBRACKET        reduce using rule 44 (loop -> while_loop .)
=======
    (52) loop -> while_loop .

    RBRACKET        reduce using rule 52 (loop -> while_loop .)
    IF              reduce using rule 52 (loop -> while_loop .)
    ID              reduce using rule 52 (loop -> while_loop .)
    RETURN          reduce using rule 52 (loop -> while_loop .)
    WHILE           reduce using rule 52 (loop -> while_loop .)
    FOR             reduce using rule 52 (loop -> while_loop .)
    PUBLIC          reduce using rule 52 (loop -> while_loop .)
    PRIVATE         reduce using rule 52 (loop -> while_loop .)
    PROTECTED       reduce using rule 52 (loop -> while_loop .)
    INTERNAL        reduce using rule 52 (loop -> while_loop .)
    CLASSOBJECT     reduce using rule 52 (loop -> while_loop .)
    INT             reduce using rule 52 (loop -> while_loop .)
    FLOAT           reduce using rule 52 (loop -> while_loop .)
    BOOL            reduce using rule 52 (loop -> while_loop .)
    BYTE            reduce using rule 52 (loop -> while_loop .)
    CHAR            reduce using rule 52 (loop -> while_loop .)
    SBYTE           reduce using rule 52 (loop -> while_loop .)
    DECIMAL         reduce using rule 52 (loop -> while_loop .)
    DOUBLE          reduce using rule 52 (loop -> while_loop .)
    LONG            reduce using rule 52 (loop -> while_loop .)
    SHORT           reduce using rule 52 (loop -> while_loop .)
    UINT            reduce using rule 52 (loop -> while_loop .)
    LPAREN          reduce using rule 52 (loop -> while_loop .)
    LIST            reduce using rule 52 (loop -> while_loop .)
    FLOAT_TYPE      reduce using rule 52 (loop -> while_loop .)
    DOUBLE_TYPE     reduce using rule 52 (loop -> while_loop .)
    DECIMAL_TYPE    reduce using rule 52 (loop -> while_loop .)
    INTEGER_TYPE    reduce using rule 52 (loop -> while_loop .)
    MINUS           reduce using rule 52 (loop -> while_loop .)
>>>>>>> rLevin


state 39

<<<<<<< HEAD
    (45) loop -> loop_for .

    RBRACKET        reduce using rule 45 (loop -> loop_for .)
=======
    (53) loop -> loop_for .

    RBRACKET        reduce using rule 53 (loop -> loop_for .)
    IF              reduce using rule 53 (loop -> loop_for .)
    ID              reduce using rule 53 (loop -> loop_for .)
    RETURN          reduce using rule 53 (loop -> loop_for .)
    WHILE           reduce using rule 53 (loop -> loop_for .)
    FOR             reduce using rule 53 (loop -> loop_for .)
    PUBLIC          reduce using rule 53 (loop -> loop_for .)
    PRIVATE         reduce using rule 53 (loop -> loop_for .)
    PROTECTED       reduce using rule 53 (loop -> loop_for .)
    INTERNAL        reduce using rule 53 (loop -> loop_for .)
    CLASSOBJECT     reduce using rule 53 (loop -> loop_for .)
    INT             reduce using rule 53 (loop -> loop_for .)
    FLOAT           reduce using rule 53 (loop -> loop_for .)
    BOOL            reduce using rule 53 (loop -> loop_for .)
    BYTE            reduce using rule 53 (loop -> loop_for .)
    CHAR            reduce using rule 53 (loop -> loop_for .)
    SBYTE           reduce using rule 53 (loop -> loop_for .)
    DECIMAL         reduce using rule 53 (loop -> loop_for .)
    DOUBLE          reduce using rule 53 (loop -> loop_for .)
    LONG            reduce using rule 53 (loop -> loop_for .)
    SHORT           reduce using rule 53 (loop -> loop_for .)
    UINT            reduce using rule 53 (loop -> loop_for .)
    LPAREN          reduce using rule 53 (loop -> loop_for .)
    LIST            reduce using rule 53 (loop -> loop_for .)
    FLOAT_TYPE      reduce using rule 53 (loop -> loop_for .)
    DOUBLE_TYPE     reduce using rule 53 (loop -> loop_for .)
    DECIMAL_TYPE    reduce using rule 53 (loop -> loop_for .)
    INTEGER_TYPE    reduce using rule 53 (loop -> loop_for .)
    MINUS           reduce using rule 53 (loop -> loop_for .)
>>>>>>> rLevin


state 40

    (25) function -> modifier . data_type names LPAREN declarations RPAREN block
    (26) function -> modifier . VOID names LPAREN declarations RPAREN block
    (27) function -> modifier . STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> modifier . STATIC VOID names LPAREN declarations RPAREN block
<<<<<<< HEAD
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
=======
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
>>>>>>> rLevin

    VOID            shift and go to state 87
    STATIC          shift and go to state 88
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89

    data_type                      shift and go to state 86
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 41

<<<<<<< HEAD
    (73) assignment -> data_type . ID EQUALS expression
    (95) declaration -> data_type . ID
=======
    (80) assignment -> data_type . ID EQUALS expression
    (105) declaration -> data_type . ID
>>>>>>> rLevin

    ID              shift and go to state 90


state 42

<<<<<<< HEAD
    (74) assignment -> ID . EQUALS expression
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (85) factor -> ID .
    (113) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> ID . LSQBRACKET ID RSQBRACKET

    EQUALS          shift and go to state 87
    DOT             shift and go to state 88
    TIMES           reduce using rule 85 (factor -> ID .)
    DIVIDE          reduce using rule 85 (factor -> ID .)
    PLUS            reduce using rule 85 (factor -> ID .)
    MINUS           reduce using rule 85 (factor -> ID .)
    SEMICOLON       reduce using rule 85 (factor -> ID .)
    LSQBRACKET      shift and go to state 89
=======
    (33) function_call -> names . LPAREN RPAREN
    (34) function_call -> names . LPAREN arguments RPAREN

    LPAREN          shift and go to state 91
>>>>>>> rLevin


state 43

<<<<<<< HEAD
    (33) expression -> object_access . LPAREN expression RPAREN
    (34) expression -> object_access . LPAREN RPAREN
    (84) factor -> object_access .

    LPAREN          shift and go to state 90
    TIMES           reduce using rule 84 (factor -> object_access .)
    DIVIDE          reduce using rule 84 (factor -> object_access .)
    PLUS            reduce using rule 84 (factor -> object_access .)
    MINUS           reduce using rule 84 (factor -> object_access .)
    SEMICOLON       reduce using rule 84 (factor -> object_access .)
    RPAREN          reduce using rule 84 (factor -> object_access .)
=======
    (81) assignment -> ID . EQUALS expression
    (83) assignment -> ID . PLUSONE
    (123) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (125) indexing -> ID . LSQBRACKET expression RSQBRACKET
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (94) factor -> ID .
    (23) names -> ID .

    EQUALS          shift and go to state 92
    PLUSONE         shift and go to state 93
    LSQBRACKET      shift and go to state 94
    DOT             shift and go to state 95
    TIMES           reduce using rule 94 (factor -> ID .)
    DIVIDE          reduce using rule 94 (factor -> ID .)
    PLUS            reduce using rule 94 (factor -> ID .)
    MINUS           reduce using rule 94 (factor -> ID .)
    SEMICOLON       reduce using rule 94 (factor -> ID .)
    LPAREN          reduce using rule 23 (names -> ID .)
>>>>>>> rLevin


state 44

<<<<<<< HEAD
    (78) expression -> term .
    (79) term -> term . TIMES factor
    (80) term -> term . DIVIDE factor

    PLUS            reduce using rule 78 (expression -> term .)
    MINUS           reduce using rule 78 (expression -> term .)
    SEMICOLON       reduce using rule 78 (expression -> term .)
    RPAREN          reduce using rule 78 (expression -> term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
=======
    (82) assignment -> indexing . EQUALS expression
    (95) factor -> indexing .

    EQUALS          shift and go to state 96
    TIMES           reduce using rule 95 (factor -> indexing .)
    DIVIDE          reduce using rule 95 (factor -> indexing .)
    PLUS            reduce using rule 95 (factor -> indexing .)
    MINUS           reduce using rule 95 (factor -> indexing .)
    SEMICOLON       reduce using rule 95 (factor -> indexing .)
>>>>>>> rLevin


state 45

<<<<<<< HEAD
    (91) type -> MINUS . type
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
=======
    (41) expression -> object_access . LPAREN expression RPAREN
    (42) expression -> object_access . LPAREN RPAREN
    (93) factor -> object_access .
>>>>>>> rLevin

    LPAREN          shift and go to state 97
    TIMES           reduce using rule 93 (factor -> object_access .)
    DIVIDE          reduce using rule 93 (factor -> object_access .)
    PLUS            reduce using rule 93 (factor -> object_access .)
    MINUS           reduce using rule 93 (factor -> object_access .)
    SEMICOLON       reduce using rule 93 (factor -> object_access .)
    RPAREN          reduce using rule 93 (factor -> object_access .)
    COMMA           reduce using rule 93 (factor -> object_access .)
    RSQBRACKET      reduce using rule 93 (factor -> object_access .)


state 46

<<<<<<< HEAD
    (29) return -> RETURN . ID
    (30) return -> RETURN . type
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
=======
    (87) expression -> term .
    (88) term -> term . TIMES factor
    (89) term -> term . DIVIDE factor
>>>>>>> rLevin

    PLUS            reduce using rule 87 (expression -> term .)
    MINUS           reduce using rule 87 (expression -> term .)
    SEMICOLON       reduce using rule 87 (expression -> term .)
    RPAREN          reduce using rule 87 (expression -> term .)
    COMMA           reduce using rule 87 (expression -> term .)
    RSQBRACKET      reduce using rule 87 (expression -> term .)
    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99


state 47

<<<<<<< HEAD
    (82) factor -> type .

    TIMES           reduce using rule 82 (factor -> type .)
    DIVIDE          reduce using rule 82 (factor -> type .)
    PLUS            reduce using rule 82 (factor -> type .)
    MINUS           reduce using rule 82 (factor -> type .)
    SEMICOLON       reduce using rule 82 (factor -> type .)
    RPAREN          reduce using rule 82 (factor -> type .)
=======
    (101) type -> MINUS . type
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type

    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
>>>>>>> rLevin

    type                           shift and go to state 100

state 48

<<<<<<< HEAD
    (48) while_loop -> WHILE . LPAREN logical_expression RPAREN block
    (49) while_loop -> WHILE . LPAREN logical_expression RPAREN block body
=======
    (30) return -> RETURN . ID
    (31) return -> RETURN . type
    (32) return -> RETURN . expression
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
>>>>>>> rLevin

    ID              shift and go to state 101
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 84
    LPAREN          shift and go to state 37

    type                           shift and go to state 102
    expression                     shift and go to state 103
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 49

<<<<<<< HEAD
    (46) loop_for -> FOR . LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> FOR . LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
=======
    (91) factor -> type .
>>>>>>> rLevin

    TIMES           reduce using rule 91 (factor -> type .)
    DIVIDE          reduce using rule 91 (factor -> type .)
    PLUS            reduce using rule 91 (factor -> type .)
    MINUS           reduce using rule 91 (factor -> type .)
    SEMICOLON       reduce using rule 91 (factor -> type .)
    RPAREN          reduce using rule 91 (factor -> type .)
    COMMA           reduce using rule 91 (factor -> type .)
    RSQBRACKET      reduce using rule 91 (factor -> type .)


state 50

<<<<<<< HEAD
    (100) data_type -> primitive .
    (71) data_structure_array -> primitive . LSQBRACKET RSQBRACKET

    ID              reduce using rule 100 (data_type -> primitive .)
    CLASSOBJECT     reduce using rule 100 (data_type -> primitive .)
    GREATER_THAN    reduce using rule 100 (data_type -> primitive .)
    LSQBRACKET      shift and go to state 98
=======
    (56) while_loop -> WHILE . LPAREN logical_expression RPAREN block
    (57) while_loop -> WHILE . LPAREN logical_expression RPAREN block body

    LPAREN          shift and go to state 104
>>>>>>> rLevin


state 51

<<<<<<< HEAD
    (101) data_type -> data_structure .

    ID              reduce using rule 101 (data_type -> data_structure .)
    CLASSOBJECT     reduce using rule 101 (data_type -> data_structure .)
    GREATER_THAN    reduce using rule 101 (data_type -> data_structure .)
=======
    (54) loop_for -> FOR . LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> FOR . LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body

    LPAREN          shift and go to state 105
>>>>>>> rLevin


state 52

<<<<<<< HEAD
    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID
    (72) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET
=======
    (110) data_type -> primitive .
    (78) data_structure_array -> primitive . LSQBRACKET RSQBRACKET
>>>>>>> rLevin

    ID              reduce using rule 110 (data_type -> primitive .)
    CLASSOBJECT     reduce using rule 110 (data_type -> primitive .)
    GREATER_THAN    reduce using rule 110 (data_type -> primitive .)
    LSQBRACKET      shift and go to state 106


state 53

<<<<<<< HEAD
    (81) term -> factor .

    TIMES           reduce using rule 81 (term -> factor .)
    DIVIDE          reduce using rule 81 (term -> factor .)
    PLUS            reduce using rule 81 (term -> factor .)
    MINUS           reduce using rule 81 (term -> factor .)
    SEMICOLON       reduce using rule 81 (term -> factor .)
    RPAREN          reduce using rule 81 (term -> factor .)
=======
    (111) data_type -> data_structure .

    ID              reduce using rule 111 (data_type -> data_structure .)
    CLASSOBJECT     reduce using rule 111 (data_type -> data_structure .)
    GREATER_THAN    reduce using rule 111 (data_type -> data_structure .)
>>>>>>> rLevin


state 54

<<<<<<< HEAD
    (102) primitive -> INT .

    LSQBRACKET      reduce using rule 102 (primitive -> INT .)
    ID              reduce using rule 102 (primitive -> INT .)
    CLASSOBJECT     reduce using rule 102 (primitive -> INT .)
    GREATER_THAN    reduce using rule 102 (primitive -> INT .)
=======
    (100) type -> INTEGER_TYPE .

    TIMES           reduce using rule 100 (type -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 100 (type -> INTEGER_TYPE .)
    PLUS            reduce using rule 100 (type -> INTEGER_TYPE .)
    MINUS           reduce using rule 100 (type -> INTEGER_TYPE .)
    SEMICOLON       reduce using rule 100 (type -> INTEGER_TYPE .)
    RPAREN          reduce using rule 100 (type -> INTEGER_TYPE .)
    COMMA           reduce using rule 100 (type -> INTEGER_TYPE .)
    RSQBRACKET      reduce using rule 100 (type -> INTEGER_TYPE .)
    OR              reduce using rule 100 (type -> INTEGER_TYPE .)
    AND             reduce using rule 100 (type -> INTEGER_TYPE .)
    NOT             reduce using rule 100 (type -> INTEGER_TYPE .)
    GREATER_THAN    reduce using rule 100 (type -> INTEGER_TYPE .)
    LESS_THAN       reduce using rule 100 (type -> INTEGER_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 100 (type -> INTEGER_TYPE .)
    LESS_EQUALS_THAN reduce using rule 100 (type -> INTEGER_TYPE .)
    EQUALITY        reduce using rule 100 (type -> INTEGER_TYPE .)
>>>>>>> rLevin


state 55

<<<<<<< HEAD
    (103) primitive -> FLOAT .

    LSQBRACKET      reduce using rule 103 (primitive -> FLOAT .)
    ID              reduce using rule 103 (primitive -> FLOAT .)
    CLASSOBJECT     reduce using rule 103 (primitive -> FLOAT .)
    GREATER_THAN    reduce using rule 103 (primitive -> FLOAT .)
=======
    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID
    (79) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET
    (24) names -> CLASSOBJECT .

    DOT             shift and go to state 107
    LSQBRACKET      shift and go to state 108
    LPAREN          reduce using rule 24 (names -> CLASSOBJECT .)
>>>>>>> rLevin


state 56

<<<<<<< HEAD
    (104) primitive -> BOOL .

    LSQBRACKET      reduce using rule 104 (primitive -> BOOL .)
    ID              reduce using rule 104 (primitive -> BOOL .)
    CLASSOBJECT     reduce using rule 104 (primitive -> BOOL .)
    GREATER_THAN    reduce using rule 104 (primitive -> BOOL .)
=======
    (90) term -> factor .

    TIMES           reduce using rule 90 (term -> factor .)
    DIVIDE          reduce using rule 90 (term -> factor .)
    PLUS            reduce using rule 90 (term -> factor .)
    MINUS           reduce using rule 90 (term -> factor .)
    SEMICOLON       reduce using rule 90 (term -> factor .)
    RPAREN          reduce using rule 90 (term -> factor .)
    COMMA           reduce using rule 90 (term -> factor .)
    RSQBRACKET      reduce using rule 90 (term -> factor .)
>>>>>>> rLevin


state 57

<<<<<<< HEAD
    (105) primitive -> BYTE .

    LSQBRACKET      reduce using rule 105 (primitive -> BYTE .)
    ID              reduce using rule 105 (primitive -> BYTE .)
    CLASSOBJECT     reduce using rule 105 (primitive -> BYTE .)
    GREATER_THAN    reduce using rule 105 (primitive -> BYTE .)
=======
    (112) primitive -> INT .

    LSQBRACKET      reduce using rule 112 (primitive -> INT .)
    ID              reduce using rule 112 (primitive -> INT .)
    CLASSOBJECT     reduce using rule 112 (primitive -> INT .)
    GREATER_THAN    reduce using rule 112 (primitive -> INT .)
>>>>>>> rLevin


state 58

<<<<<<< HEAD
    (106) primitive -> CHAR .

    LSQBRACKET      reduce using rule 106 (primitive -> CHAR .)
    ID              reduce using rule 106 (primitive -> CHAR .)
    CLASSOBJECT     reduce using rule 106 (primitive -> CHAR .)
    GREATER_THAN    reduce using rule 106 (primitive -> CHAR .)
=======
    (113) primitive -> FLOAT .

    LSQBRACKET      reduce using rule 113 (primitive -> FLOAT .)
    ID              reduce using rule 113 (primitive -> FLOAT .)
    CLASSOBJECT     reduce using rule 113 (primitive -> FLOAT .)
    GREATER_THAN    reduce using rule 113 (primitive -> FLOAT .)
>>>>>>> rLevin


state 59

<<<<<<< HEAD
    (107) primitive -> SBYTE .

    LSQBRACKET      reduce using rule 107 (primitive -> SBYTE .)
    ID              reduce using rule 107 (primitive -> SBYTE .)
    CLASSOBJECT     reduce using rule 107 (primitive -> SBYTE .)
    GREATER_THAN    reduce using rule 107 (primitive -> SBYTE .)
=======
    (114) primitive -> BOOL .

    LSQBRACKET      reduce using rule 114 (primitive -> BOOL .)
    ID              reduce using rule 114 (primitive -> BOOL .)
    CLASSOBJECT     reduce using rule 114 (primitive -> BOOL .)
    GREATER_THAN    reduce using rule 114 (primitive -> BOOL .)
>>>>>>> rLevin


state 60

<<<<<<< HEAD
    (108) primitive -> DECIMAL .

    LSQBRACKET      reduce using rule 108 (primitive -> DECIMAL .)
    ID              reduce using rule 108 (primitive -> DECIMAL .)
    CLASSOBJECT     reduce using rule 108 (primitive -> DECIMAL .)
    GREATER_THAN    reduce using rule 108 (primitive -> DECIMAL .)
=======
    (115) primitive -> BYTE .

    LSQBRACKET      reduce using rule 115 (primitive -> BYTE .)
    ID              reduce using rule 115 (primitive -> BYTE .)
    CLASSOBJECT     reduce using rule 115 (primitive -> BYTE .)
    GREATER_THAN    reduce using rule 115 (primitive -> BYTE .)
>>>>>>> rLevin


state 61

<<<<<<< HEAD
    (109) primitive -> DOUBLE .

    LSQBRACKET      reduce using rule 109 (primitive -> DOUBLE .)
    ID              reduce using rule 109 (primitive -> DOUBLE .)
    CLASSOBJECT     reduce using rule 109 (primitive -> DOUBLE .)
    GREATER_THAN    reduce using rule 109 (primitive -> DOUBLE .)
=======
    (116) primitive -> CHAR .

    LSQBRACKET      reduce using rule 116 (primitive -> CHAR .)
    ID              reduce using rule 116 (primitive -> CHAR .)
    CLASSOBJECT     reduce using rule 116 (primitive -> CHAR .)
    GREATER_THAN    reduce using rule 116 (primitive -> CHAR .)
>>>>>>> rLevin


state 62

<<<<<<< HEAD
    (110) primitive -> LONG .

    LSQBRACKET      reduce using rule 110 (primitive -> LONG .)
    ID              reduce using rule 110 (primitive -> LONG .)
    CLASSOBJECT     reduce using rule 110 (primitive -> LONG .)
    GREATER_THAN    reduce using rule 110 (primitive -> LONG .)
=======
    (117) primitive -> SBYTE .

    LSQBRACKET      reduce using rule 117 (primitive -> SBYTE .)
    ID              reduce using rule 117 (primitive -> SBYTE .)
    CLASSOBJECT     reduce using rule 117 (primitive -> SBYTE .)
    GREATER_THAN    reduce using rule 117 (primitive -> SBYTE .)
>>>>>>> rLevin


state 63

<<<<<<< HEAD
    (111) primitive -> SHORT .

    LSQBRACKET      reduce using rule 111 (primitive -> SHORT .)
    ID              reduce using rule 111 (primitive -> SHORT .)
    CLASSOBJECT     reduce using rule 111 (primitive -> SHORT .)
    GREATER_THAN    reduce using rule 111 (primitive -> SHORT .)
=======
    (118) primitive -> DECIMAL .

    LSQBRACKET      reduce using rule 118 (primitive -> DECIMAL .)
    ID              reduce using rule 118 (primitive -> DECIMAL .)
    CLASSOBJECT     reduce using rule 118 (primitive -> DECIMAL .)
    GREATER_THAN    reduce using rule 118 (primitive -> DECIMAL .)
>>>>>>> rLevin


state 64

<<<<<<< HEAD
    (112) primitive -> UINT .

    LSQBRACKET      reduce using rule 112 (primitive -> UINT .)
    ID              reduce using rule 112 (primitive -> UINT .)
    CLASSOBJECT     reduce using rule 112 (primitive -> UINT .)
    GREATER_THAN    reduce using rule 112 (primitive -> UINT .)
=======
    (119) primitive -> DOUBLE .

    LSQBRACKET      reduce using rule 119 (primitive -> DOUBLE .)
    ID              reduce using rule 119 (primitive -> DOUBLE .)
    CLASSOBJECT     reduce using rule 119 (primitive -> DOUBLE .)
    GREATER_THAN    reduce using rule 119 (primitive -> DOUBLE .)
>>>>>>> rLevin


state 65

<<<<<<< HEAD
    (68) data_structure -> data_structure_list .

    ID              reduce using rule 68 (data_structure -> data_structure_list .)
    CLASSOBJECT     reduce using rule 68 (data_structure -> data_structure_list .)
    GREATER_THAN    reduce using rule 68 (data_structure -> data_structure_list .)
=======
    (120) primitive -> LONG .

    LSQBRACKET      reduce using rule 120 (primitive -> LONG .)
    ID              reduce using rule 120 (primitive -> LONG .)
    CLASSOBJECT     reduce using rule 120 (primitive -> LONG .)
    GREATER_THAN    reduce using rule 120 (primitive -> LONG .)
>>>>>>> rLevin


state 66

<<<<<<< HEAD
    (69) data_structure -> data_structure_array .

    ID              reduce using rule 69 (data_structure -> data_structure_array .)
    CLASSOBJECT     reduce using rule 69 (data_structure -> data_structure_array .)
    GREATER_THAN    reduce using rule 69 (data_structure -> data_structure_array .)
=======
    (121) primitive -> SHORT .

    LSQBRACKET      reduce using rule 121 (primitive -> SHORT .)
    ID              reduce using rule 121 (primitive -> SHORT .)
    CLASSOBJECT     reduce using rule 121 (primitive -> SHORT .)
    GREATER_THAN    reduce using rule 121 (primitive -> SHORT .)
>>>>>>> rLevin


state 67

<<<<<<< HEAD
    (86) factor -> indexing .

    TIMES           reduce using rule 86 (factor -> indexing .)
    DIVIDE          reduce using rule 86 (factor -> indexing .)
    PLUS            reduce using rule 86 (factor -> indexing .)
    MINUS           reduce using rule 86 (factor -> indexing .)
    SEMICOLON       reduce using rule 86 (factor -> indexing .)
    RPAREN          reduce using rule 86 (factor -> indexing .)
=======
    (122) primitive -> UINT .

    LSQBRACKET      reduce using rule 122 (primitive -> UINT .)
    ID              reduce using rule 122 (primitive -> UINT .)
    CLASSOBJECT     reduce using rule 122 (primitive -> UINT .)
    GREATER_THAN    reduce using rule 122 (primitive -> UINT .)
>>>>>>> rLevin


state 68

<<<<<<< HEAD
    (70) data_structure_list -> LIST . LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
=======
    (75) data_structure -> data_structure_list .
>>>>>>> rLevin

    ID              reduce using rule 75 (data_structure -> data_structure_list .)
    CLASSOBJECT     reduce using rule 75 (data_structure -> data_structure_list .)
    GREATER_THAN    reduce using rule 75 (data_structure -> data_structure_list .)


state 69

<<<<<<< HEAD
    (87) type -> FLOAT_TYPE .

    TIMES           reduce using rule 87 (type -> FLOAT_TYPE .)
    DIVIDE          reduce using rule 87 (type -> FLOAT_TYPE .)
    PLUS            reduce using rule 87 (type -> FLOAT_TYPE .)
    MINUS           reduce using rule 87 (type -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 87 (type -> FLOAT_TYPE .)
    RPAREN          reduce using rule 87 (type -> FLOAT_TYPE .)
    OR              reduce using rule 87 (type -> FLOAT_TYPE .)
    AND             reduce using rule 87 (type -> FLOAT_TYPE .)
    NOT             reduce using rule 87 (type -> FLOAT_TYPE .)
    GREATER_THAN    reduce using rule 87 (type -> FLOAT_TYPE .)
    LESS_THAN       reduce using rule 87 (type -> FLOAT_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 87 (type -> FLOAT_TYPE .)
    LESS_EQUALS_THAN reduce using rule 87 (type -> FLOAT_TYPE .)
    EQUALITY        reduce using rule 87 (type -> FLOAT_TYPE .)
    RSQBRACKET      reduce using rule 87 (type -> FLOAT_TYPE .)
=======
    (76) data_structure -> data_structure_array .

    ID              reduce using rule 76 (data_structure -> data_structure_array .)
    CLASSOBJECT     reduce using rule 76 (data_structure -> data_structure_array .)
    GREATER_THAN    reduce using rule 76 (data_structure -> data_structure_array .)
>>>>>>> rLevin


state 70

<<<<<<< HEAD
    (88) type -> DOUBLE_TYPE .

    TIMES           reduce using rule 88 (type -> DOUBLE_TYPE .)
    DIVIDE          reduce using rule 88 (type -> DOUBLE_TYPE .)
    PLUS            reduce using rule 88 (type -> DOUBLE_TYPE .)
    MINUS           reduce using rule 88 (type -> DOUBLE_TYPE .)
    SEMICOLON       reduce using rule 88 (type -> DOUBLE_TYPE .)
    RPAREN          reduce using rule 88 (type -> DOUBLE_TYPE .)
    OR              reduce using rule 88 (type -> DOUBLE_TYPE .)
    AND             reduce using rule 88 (type -> DOUBLE_TYPE .)
    NOT             reduce using rule 88 (type -> DOUBLE_TYPE .)
    GREATER_THAN    reduce using rule 88 (type -> DOUBLE_TYPE .)
    LESS_THAN       reduce using rule 88 (type -> DOUBLE_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 88 (type -> DOUBLE_TYPE .)
    LESS_EQUALS_THAN reduce using rule 88 (type -> DOUBLE_TYPE .)
    EQUALITY        reduce using rule 88 (type -> DOUBLE_TYPE .)
    RSQBRACKET      reduce using rule 88 (type -> DOUBLE_TYPE .)
=======
    (96) factor -> function_call .

    TIMES           reduce using rule 96 (factor -> function_call .)
    DIVIDE          reduce using rule 96 (factor -> function_call .)
    PLUS            reduce using rule 96 (factor -> function_call .)
    MINUS           reduce using rule 96 (factor -> function_call .)
    SEMICOLON       reduce using rule 96 (factor -> function_call .)
    RPAREN          reduce using rule 96 (factor -> function_call .)
    COMMA           reduce using rule 96 (factor -> function_call .)
    RSQBRACKET      reduce using rule 96 (factor -> function_call .)
>>>>>>> rLevin


state 71

<<<<<<< HEAD
    (89) type -> DECIMAL_TYPE .

    TIMES           reduce using rule 89 (type -> DECIMAL_TYPE .)
    DIVIDE          reduce using rule 89 (type -> DECIMAL_TYPE .)
    PLUS            reduce using rule 89 (type -> DECIMAL_TYPE .)
    MINUS           reduce using rule 89 (type -> DECIMAL_TYPE .)
    SEMICOLON       reduce using rule 89 (type -> DECIMAL_TYPE .)
    RPAREN          reduce using rule 89 (type -> DECIMAL_TYPE .)
    OR              reduce using rule 89 (type -> DECIMAL_TYPE .)
    AND             reduce using rule 89 (type -> DECIMAL_TYPE .)
    NOT             reduce using rule 89 (type -> DECIMAL_TYPE .)
    GREATER_THAN    reduce using rule 89 (type -> DECIMAL_TYPE .)
    LESS_THAN       reduce using rule 89 (type -> DECIMAL_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 89 (type -> DECIMAL_TYPE .)
    LESS_EQUALS_THAN reduce using rule 89 (type -> DECIMAL_TYPE .)
    EQUALITY        reduce using rule 89 (type -> DECIMAL_TYPE .)
    RSQBRACKET      reduce using rule 89 (type -> DECIMAL_TYPE .)
=======
    (77) data_structure_list -> LIST . LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET

    LESS_THAN       shift and go to state 109
>>>>>>> rLevin


state 72

<<<<<<< HEAD
    (90) type -> INTEGER_TYPE .

    TIMES           reduce using rule 90 (type -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 90 (type -> INTEGER_TYPE .)
    PLUS            reduce using rule 90 (type -> INTEGER_TYPE .)
    MINUS           reduce using rule 90 (type -> INTEGER_TYPE .)
    SEMICOLON       reduce using rule 90 (type -> INTEGER_TYPE .)
    RPAREN          reduce using rule 90 (type -> INTEGER_TYPE .)
    OR              reduce using rule 90 (type -> INTEGER_TYPE .)
    AND             reduce using rule 90 (type -> INTEGER_TYPE .)
    NOT             reduce using rule 90 (type -> INTEGER_TYPE .)
    GREATER_THAN    reduce using rule 90 (type -> INTEGER_TYPE .)
    LESS_THAN       reduce using rule 90 (type -> INTEGER_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 90 (type -> INTEGER_TYPE .)
    LESS_EQUALS_THAN reduce using rule 90 (type -> INTEGER_TYPE .)
    EQUALITY        reduce using rule 90 (type -> INTEGER_TYPE .)
    RSQBRACKET      reduce using rule 90 (type -> INTEGER_TYPE .)
=======
    (97) type -> FLOAT_TYPE .

    TIMES           reduce using rule 97 (type -> FLOAT_TYPE .)
    DIVIDE          reduce using rule 97 (type -> FLOAT_TYPE .)
    PLUS            reduce using rule 97 (type -> FLOAT_TYPE .)
    MINUS           reduce using rule 97 (type -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 97 (type -> FLOAT_TYPE .)
    RPAREN          reduce using rule 97 (type -> FLOAT_TYPE .)
    COMMA           reduce using rule 97 (type -> FLOAT_TYPE .)
    RSQBRACKET      reduce using rule 97 (type -> FLOAT_TYPE .)
    OR              reduce using rule 97 (type -> FLOAT_TYPE .)
    AND             reduce using rule 97 (type -> FLOAT_TYPE .)
    NOT             reduce using rule 97 (type -> FLOAT_TYPE .)
    GREATER_THAN    reduce using rule 97 (type -> FLOAT_TYPE .)
    LESS_THAN       reduce using rule 97 (type -> FLOAT_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 97 (type -> FLOAT_TYPE .)
    LESS_EQUALS_THAN reduce using rule 97 (type -> FLOAT_TYPE .)
    EQUALITY        reduce using rule 97 (type -> FLOAT_TYPE .)
>>>>>>> rLevin


state 73

    (98) type -> DOUBLE_TYPE .

    TIMES           reduce using rule 98 (type -> DOUBLE_TYPE .)
    DIVIDE          reduce using rule 98 (type -> DOUBLE_TYPE .)
    PLUS            reduce using rule 98 (type -> DOUBLE_TYPE .)
    MINUS           reduce using rule 98 (type -> DOUBLE_TYPE .)
    SEMICOLON       reduce using rule 98 (type -> DOUBLE_TYPE .)
    RPAREN          reduce using rule 98 (type -> DOUBLE_TYPE .)
    COMMA           reduce using rule 98 (type -> DOUBLE_TYPE .)
    RSQBRACKET      reduce using rule 98 (type -> DOUBLE_TYPE .)
    OR              reduce using rule 98 (type -> DOUBLE_TYPE .)
    AND             reduce using rule 98 (type -> DOUBLE_TYPE .)
    NOT             reduce using rule 98 (type -> DOUBLE_TYPE .)
    GREATER_THAN    reduce using rule 98 (type -> DOUBLE_TYPE .)
    LESS_THAN       reduce using rule 98 (type -> DOUBLE_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 98 (type -> DOUBLE_TYPE .)
    LESS_EQUALS_THAN reduce using rule 98 (type -> DOUBLE_TYPE .)
    EQUALITY        reduce using rule 98 (type -> DOUBLE_TYPE .)


state 74

    (99) type -> DECIMAL_TYPE .

    TIMES           reduce using rule 99 (type -> DECIMAL_TYPE .)
    DIVIDE          reduce using rule 99 (type -> DECIMAL_TYPE .)
    PLUS            reduce using rule 99 (type -> DECIMAL_TYPE .)
    MINUS           reduce using rule 99 (type -> DECIMAL_TYPE .)
    SEMICOLON       reduce using rule 99 (type -> DECIMAL_TYPE .)
    RPAREN          reduce using rule 99 (type -> DECIMAL_TYPE .)
    COMMA           reduce using rule 99 (type -> DECIMAL_TYPE .)
    RSQBRACKET      reduce using rule 99 (type -> DECIMAL_TYPE .)
    OR              reduce using rule 99 (type -> DECIMAL_TYPE .)
    AND             reduce using rule 99 (type -> DECIMAL_TYPE .)
    NOT             reduce using rule 99 (type -> DECIMAL_TYPE .)
    GREATER_THAN    reduce using rule 99 (type -> DECIMAL_TYPE .)
    LESS_THAN       reduce using rule 99 (type -> DECIMAL_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 99 (type -> DECIMAL_TYPE .)
    LESS_EQUALS_THAN reduce using rule 99 (type -> DECIMAL_TYPE .)
    EQUALITY        reduce using rule 99 (type -> DECIMAL_TYPE .)


state 75

    (8) class -> modifier STATIC CLASS CLASSOBJECT block .

    $end            reduce using rule 8 (class -> modifier STATIC CLASS CLASSOBJECT block .)


state 76

    (13) block -> LBRACKET body RBRACKET .

    $end            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    ELSE            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    IF              reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    ID              reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    RETURN          reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    WHILE           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    FOR             reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    PUBLIC          reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    PRIVATE         reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    PROTECTED       reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    INTERNAL        reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    CLASSOBJECT     reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    INT             reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    BOOL            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    BYTE            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    CHAR            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    SBYTE           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    DECIMAL         reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    LONG            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    SHORT           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    UINT            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    LPAREN          reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    LIST            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    FLOAT_TYPE      reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    DOUBLE_TYPE     reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    DECIMAL_TYPE    reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    INTEGER_TYPE    reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    MINUS           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 13 (block -> LBRACKET body RBRACKET .)


state 77

    (14) body -> lines SEMICOLON .
    (15) body -> lines SEMICOLON . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
<<<<<<< HEAD
    (35) if -> . IF LPAREN logical_expression RPAREN block
    (36) if -> . IF LPAREN logical_expression RPAREN block body
    (37) if -> . IF LPAREN logical_expression RPAREN block elseif
    (38) if -> . IF LPAREN logical_expression RPAREN block else
    (44) loop -> . while_loop
    (45) loop -> . loop_for
=======
    (43) if -> . IF LPAREN logical_expression RPAREN block
    (44) if -> . IF LPAREN logical_expression RPAREN block body
    (45) if -> . IF LPAREN logical_expression RPAREN block elseif
    (46) if -> . IF LPAREN logical_expression RPAREN block else
    (52) loop -> . while_loop
    (53) loop -> . loop_for
>>>>>>> rLevin
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
<<<<<<< HEAD
    (73) assignment -> . data_type ID EQUALS expression
    (74) assignment -> . ID EQUALS expression
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (95) declaration -> . data_type ID
    (29) return -> . RETURN ID
    (30) return -> . RETURN type
    (48) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (49) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (46) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (96) modifier -> . PUBLIC
    (97) modifier -> . PRIVATE
    (98) modifier -> . PROTECTED
    (99) modifier -> . INTERNAL
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
=======
    (29) function -> . function body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (105) declaration -> . data_type ID
    (30) return -> . RETURN ID
    (31) return -> . RETURN type
    (32) return -> . RETURN expression
    (56) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (57) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (54) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
<<<<<<< HEAD
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
=======
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
>>>>>>> rLevin

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for INTERNAL resolved as shift
  ! shift/reduce conflict for CLASSOBJECT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SBYTE resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for DECIMAL_TYPE resolved as shift
  ! shift/reduce conflict for INTEGER_TYPE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 14 (body -> lines SEMICOLON .)
    IF              shift and go to state 36
    ID              shift and go to state 43
    RETURN          shift and go to state 48
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 55
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LPAREN          shift and go to state 37
    LIST            shift and go to state 71
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

  ! IF              [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! ID              [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! RETURN          [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! WHILE           [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! FOR             [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! PUBLIC          [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! PRIVATE         [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! PROTECTED       [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! INTERNAL        [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! CLASSOBJECT     [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! INT             [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! FLOAT           [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! BOOL            [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! BYTE            [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! CHAR            [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! SBYTE           [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! DECIMAL         [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! DOUBLE          [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! LONG            [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! SHORT           [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! UINT            [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! LPAREN          [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! LIST            [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! FLOAT_TYPE      [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! DOUBLE_TYPE     [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! DECIMAL_TYPE    [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! INTEGER_TYPE    [ reduce using rule 14 (body -> lines SEMICOLON .) ]
  ! MINUS           [ reduce using rule 14 (body -> lines SEMICOLON .) ]

    lines                          shift and go to state 28
    body                           shift and go to state 110
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
<<<<<<< HEAD
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 76

    (76) expression -> expression PLUS . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 37
    ID              shift and go to state 105
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    term                           shift and go to state 103
    factor                         shift and go to state 53
    type                           shift and go to state 47
    object_access                  shift and go to state 104
    indexing                       shift and go to state 67

state 77

    (77) expression -> expression MINUS . term
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 37
    ID              shift and go to state 105
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    term                           shift and go to state 106
    factor                         shift and go to state 53
    type                           shift and go to state 47
    object_access                  shift and go to state 104
    indexing                       shift and go to state 67

state 78

    (35) if -> IF LPAREN . logical_expression RPAREN block
    (36) if -> IF LPAREN . logical_expression RPAREN block body
    (37) if -> IF LPAREN . logical_expression RPAREN block elseif
    (38) if -> IF LPAREN . logical_expression RPAREN block else
    (50) logical_expression -> . logical_factor logical_operator logical_expression
    (51) logical_expression -> . logical_expression logical_operator logical_expression
    (52) logical_expression -> . logical_factor
    (53) logical_factor -> . TRUE
    (54) logical_factor -> . FALSE
    (55) logical_factor -> . ID
    (56) logical_factor -> . indexing
    (57) logical_factor -> . type
    (58) logical_factor -> . object_access
    (59) logical_factor -> . LPAREN logical_expression RPAREN
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
=======
    names                          shift and go to state 42
    indexing                       shift and go to state 44
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    type                           shift and go to state 49
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    factor                         shift and go to state 56
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69
    function_call                  shift and go to state 70

state 78

    (29) function -> function body .

    IF              reduce using rule 29 (function -> function body .)
    ID              reduce using rule 29 (function -> function body .)
    RETURN          reduce using rule 29 (function -> function body .)
    WHILE           reduce using rule 29 (function -> function body .)
    FOR             reduce using rule 29 (function -> function body .)
    PUBLIC          reduce using rule 29 (function -> function body .)
    PRIVATE         reduce using rule 29 (function -> function body .)
    PROTECTED       reduce using rule 29 (function -> function body .)
    INTERNAL        reduce using rule 29 (function -> function body .)
    CLASSOBJECT     reduce using rule 29 (function -> function body .)
    INT             reduce using rule 29 (function -> function body .)
    FLOAT           reduce using rule 29 (function -> function body .)
    BOOL            reduce using rule 29 (function -> function body .)
    BYTE            reduce using rule 29 (function -> function body .)
    CHAR            reduce using rule 29 (function -> function body .)
    SBYTE           reduce using rule 29 (function -> function body .)
    DECIMAL         reduce using rule 29 (function -> function body .)
    DOUBLE          reduce using rule 29 (function -> function body .)
    LONG            reduce using rule 29 (function -> function body .)
    SHORT           reduce using rule 29 (function -> function body .)
    UINT            reduce using rule 29 (function -> function body .)
    LPAREN          reduce using rule 29 (function -> function body .)
    LIST            reduce using rule 29 (function -> function body .)
    FLOAT_TYPE      reduce using rule 29 (function -> function body .)
    DOUBLE_TYPE     reduce using rule 29 (function -> function body .)
    DECIMAL_TYPE    reduce using rule 29 (function -> function body .)
    INTEGER_TYPE    reduce using rule 29 (function -> function body .)
    MINUS           reduce using rule 29 (function -> function body .)
    RBRACKET        reduce using rule 29 (function -> function body .)


state 79

    (85) expression -> expression PLUS . term
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    LPAREN          shift and go to state 37
    ID              shift and go to state 113
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 84

    term                           shift and go to state 111
    factor                         shift and go to state 56
    type                           shift and go to state 49
    object_access                  shift and go to state 112
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 80

    (86) expression -> expression MINUS . term
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    LPAREN          shift and go to state 37
    ID              shift and go to state 113
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 84

    term                           shift and go to state 114
    factor                         shift and go to state 56
    type                           shift and go to state 49
    object_access                  shift and go to state 112
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 81

    (43) if -> IF LPAREN . logical_expression RPAREN block
    (44) if -> IF LPAREN . logical_expression RPAREN block body
    (45) if -> IF LPAREN . logical_expression RPAREN block elseif
    (46) if -> IF LPAREN . logical_expression RPAREN block else
    (58) logical_expression -> . logical_expression logical_operator logical_factor
    (59) logical_expression -> . logical_factor
    (60) logical_factor -> . TRUE
    (61) logical_factor -> . FALSE
    (62) logical_factor -> . ID
    (63) logical_factor -> . indexing
    (64) logical_factor -> . type
    (65) logical_factor -> . object_access
    (66) logical_factor -> . LPAREN logical_expression RPAREN
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

<<<<<<< HEAD
    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_expression             shift and go to state 108
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 79

    (83) factor -> LPAREN expression . RPAREN
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77


state 80

    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (85) factor -> ID .
    (113) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> ID . LSQBRACKET ID RSQBRACKET

    DOT             shift and go to state 88
    TIMES           reduce using rule 85 (factor -> ID .)
    DIVIDE          reduce using rule 85 (factor -> ID .)
    RPAREN          reduce using rule 85 (factor -> ID .)
    PLUS            reduce using rule 85 (factor -> ID .)
    MINUS           reduce using rule 85 (factor -> ID .)
    SEMICOLON       reduce using rule 85 (factor -> ID .)
    LSQBRACKET      shift and go to state 89


state 81

    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID

    DOT             shift and go to state 99
=======
    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120
    LPAREN          shift and go to state 115
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 124
>>>>>>> rLevin

    logical_expression             shift and go to state 116
    logical_factor                 shift and go to state 117
    indexing                       shift and go to state 121
    type                           shift and go to state 122
    object_access                  shift and go to state 123

state 82

<<<<<<< HEAD
    (25) function -> modifier data_type . names LPAREN declarations RPAREN block
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 118
    CLASSOBJECT     shift and go to state 119
=======
    (92) factor -> LPAREN expression . RPAREN
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term

    RPAREN          shift and go to state 125
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
>>>>>>> rLevin

    names                          shift and go to state 117

state 83

<<<<<<< HEAD
    (26) function -> modifier VOID . names LPAREN declarations RPAREN block
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 118
    CLASSOBJECT     shift and go to state 119
=======
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (94) factor -> ID .
    (123) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (125) indexing -> ID . LSQBRACKET expression RSQBRACKET
    (23) names -> ID .

    DOT             shift and go to state 95
    TIMES           reduce using rule 94 (factor -> ID .)
    DIVIDE          reduce using rule 94 (factor -> ID .)
    RPAREN          reduce using rule 94 (factor -> ID .)
    PLUS            reduce using rule 94 (factor -> ID .)
    MINUS           reduce using rule 94 (factor -> ID .)
    SEMICOLON       reduce using rule 94 (factor -> ID .)
    LSQBRACKET      shift and go to state 94
    LPAREN          reduce using rule 23 (names -> ID .)
>>>>>>> rLevin

    names                          shift and go to state 120

state 84

<<<<<<< HEAD
    (27) function -> modifier STATIC . data_type names LPAREN declarations RPAREN block
    (28) function -> modifier STATIC . VOID names LPAREN declarations RPAREN block
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 122
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    data_type                      shift and go to state 121
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 85

    (72) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET
=======
    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID
    (24) names -> CLASSOBJECT .

    DOT             shift and go to state 107
    LPAREN          reduce using rule 24 (names -> CLASSOBJECT .)


state 85

    (95) factor -> indexing .
>>>>>>> rLevin

    TIMES           reduce using rule 95 (factor -> indexing .)
    DIVIDE          reduce using rule 95 (factor -> indexing .)
    RPAREN          reduce using rule 95 (factor -> indexing .)
    PLUS            reduce using rule 95 (factor -> indexing .)
    MINUS           reduce using rule 95 (factor -> indexing .)
    SEMICOLON       reduce using rule 95 (factor -> indexing .)
    COMMA           reduce using rule 95 (factor -> indexing .)
    RSQBRACKET      reduce using rule 95 (factor -> indexing .)


state 86

<<<<<<< HEAD
    (73) assignment -> data_type ID . EQUALS expression
    (95) declaration -> data_type ID .

    EQUALS          shift and go to state 123
    SEMICOLON       reduce using rule 95 (declaration -> data_type ID .)
=======
    (25) function -> modifier data_type . names LPAREN declarations RPAREN block
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 127
    CLASSOBJECT     shift and go to state 128
>>>>>>> rLevin

    names                          shift and go to state 126

state 87

<<<<<<< HEAD
    (74) assignment -> ID EQUALS . expression
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
=======
    (26) function -> modifier VOID . names LPAREN declarations RPAREN block
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
>>>>>>> rLevin

    ID              shift and go to state 127
    CLASSOBJECT     shift and go to state 128

<<<<<<< HEAD
    expression                     shift and go to state 124
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    factor                         shift and go to state 53
    type                           shift and go to state 47
    indexing                       shift and go to state 67
=======
    names                          shift and go to state 129
>>>>>>> rLevin

state 88

    (27) function -> modifier STATIC . data_type names LPAREN declarations RPAREN block
    (28) function -> modifier STATIC . VOID names LPAREN declarations RPAREN block
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

<<<<<<< HEAD
    ID              shift and go to state 125
    CLASSOBJECT     shift and go to state 126
=======
    VOID            shift and go to state 131
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89
>>>>>>> rLevin

    data_type                      shift and go to state 130
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 89

<<<<<<< HEAD
    (113) indexing -> ID LSQBRACKET . INTEGER_TYPE RSQBRACKET
    (114) indexing -> ID LSQBRACKET . ID RSQBRACKET

    INTEGER_TYPE    shift and go to state 128
    ID              shift and go to state 127
=======
    (79) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    LSQBRACKET      shift and go to state 108
>>>>>>> rLevin


state 90

<<<<<<< HEAD
    (33) expression -> object_access LPAREN . expression RPAREN
    (34) expression -> object_access LPAREN . RPAREN
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RPAREN          shift and go to state 130
    ID              shift and go to state 80
    CLASSOBJECT     shift and go to state 81
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    object_access                  shift and go to state 43
    expression                     shift and go to state 129
    term                           shift and go to state 44
    factor                         shift and go to state 53
    type                           shift and go to state 47
    indexing                       shift and go to state 67

state 91

    (79) term -> term TIMES . factor
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
=======
    (80) assignment -> data_type ID . EQUALS expression
    (105) declaration -> data_type ID .

    EQUALS          shift and go to state 132
    SEMICOLON       reduce using rule 105 (declaration -> data_type ID .)


state 91

    (33) function_call -> names LPAREN . RPAREN
    (34) function_call -> names LPAREN . arguments RPAREN
    (35) arguments -> . expression
    (36) arguments -> . expression COMMA arguments
    (37) arguments -> . names
    (38) arguments -> . names COMMA arguments
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
<<<<<<< HEAD
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
=======
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
>>>>>>> rLevin

    RPAREN          shift and go to state 134
    ID              shift and go to state 137
    CLASSOBJECT     shift and go to state 138
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

<<<<<<< HEAD
    factor                         shift and go to state 131
    type                           shift and go to state 47
    object_access                  shift and go to state 104
    indexing                       shift and go to state 67

state 92

    (80) term -> term DIVIDE . factor
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
=======
    names                          shift and go to state 133
    arguments                      shift and go to state 135
    expression                     shift and go to state 136
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70

state 92

    (81) assignment -> ID EQUALS . expression
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
<<<<<<< HEAD
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
=======
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
>>>>>>> rLevin

    ID              shift and go to state 83
    CLASSOBJECT     shift and go to state 84
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

<<<<<<< HEAD
    factor                         shift and go to state 132
    type                           shift and go to state 47
    object_access                  shift and go to state 104
    indexing                       shift and go to state 67

state 93

    (91) type -> MINUS type .

    TIMES           reduce using rule 91 (type -> MINUS type .)
    DIVIDE          reduce using rule 91 (type -> MINUS type .)
    PLUS            reduce using rule 91 (type -> MINUS type .)
    MINUS           reduce using rule 91 (type -> MINUS type .)
    SEMICOLON       reduce using rule 91 (type -> MINUS type .)
    RPAREN          reduce using rule 91 (type -> MINUS type .)
    OR              reduce using rule 91 (type -> MINUS type .)
    AND             reduce using rule 91 (type -> MINUS type .)
    NOT             reduce using rule 91 (type -> MINUS type .)
    GREATER_THAN    reduce using rule 91 (type -> MINUS type .)
    LESS_THAN       reduce using rule 91 (type -> MINUS type .)
    GREATER_EQUALS_THAN reduce using rule 91 (type -> MINUS type .)
    LESS_EQUALS_THAN reduce using rule 91 (type -> MINUS type .)
    EQUALITY        reduce using rule 91 (type -> MINUS type .)
    RSQBRACKET      reduce using rule 91 (type -> MINUS type .)
=======
    expression                     shift and go to state 139
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 93

    (83) assignment -> ID PLUSONE .

    SEMICOLON       reduce using rule 83 (assignment -> ID PLUSONE .)
    RPAREN          reduce using rule 83 (assignment -> ID PLUSONE .)
>>>>>>> rLevin


state 94

<<<<<<< HEAD
    (29) return -> RETURN ID .

    SEMICOLON       reduce using rule 29 (return -> RETURN ID .)
=======
    (123) indexing -> ID LSQBRACKET . INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID LSQBRACKET . ID RSQBRACKET
    (125) indexing -> ID LSQBRACKET . expression RSQBRACKET
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    INTEGER_TYPE    shift and go to state 141
    ID              shift and go to state 140
    CLASSOBJECT     shift and go to state 84
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    MINUS           shift and go to state 47
>>>>>>> rLevin

    expression                     shift and go to state 142
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 95

<<<<<<< HEAD
    (30) return -> RETURN type .

    SEMICOLON       reduce using rule 30 (return -> RETURN type .)
=======
    (9) object_access -> ID DOT . ID
    (11) object_access -> ID DOT . CLASSOBJECT

    ID              shift and go to state 143
    CLASSOBJECT     shift and go to state 144
>>>>>>> rLevin


state 96

<<<<<<< HEAD
    (48) while_loop -> WHILE LPAREN . logical_expression RPAREN block
    (49) while_loop -> WHILE LPAREN . logical_expression RPAREN block body
    (50) logical_expression -> . logical_factor logical_operator logical_expression
    (51) logical_expression -> . logical_expression logical_operator logical_expression
    (52) logical_expression -> . logical_factor
    (53) logical_factor -> . TRUE
    (54) logical_factor -> . FALSE
    (55) logical_factor -> . ID
    (56) logical_factor -> . indexing
    (57) logical_factor -> . type
    (58) logical_factor -> . object_access
    (59) logical_factor -> . LPAREN logical_expression RPAREN
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
=======
    (82) assignment -> indexing EQUALS . expression
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 83
    CLASSOBJECT     shift and go to state 84
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

<<<<<<< HEAD
    logical_expression             shift and go to state 133
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 97

    (46) loop_for -> FOR LPAREN . assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> FOR LPAREN . assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (73) assignment -> . data_type ID EQUALS expression
    (74) assignment -> . ID EQUALS expression
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 136
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    assignment                     shift and go to state 134
    data_type                      shift and go to state 135
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 98

    (71) data_structure_array -> primitive LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 137
=======
    indexing                       shift and go to state 85
    expression                     shift and go to state 145
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 97

    (41) expression -> object_access LPAREN . expression RPAREN
    (42) expression -> object_access LPAREN . RPAREN
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    RPAREN          shift and go to state 147
    ID              shift and go to state 83
    CLASSOBJECT     shift and go to state 84
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

    object_access                  shift and go to state 45
    expression                     shift and go to state 146
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 98

    (88) term -> term TIMES . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    LPAREN          shift and go to state 37
    ID              shift and go to state 113
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 84
>>>>>>> rLevin

    factor                         shift and go to state 148
    type                           shift and go to state 49
    object_access                  shift and go to state 112
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 99

    (89) term -> term DIVIDE . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

<<<<<<< HEAD
    CLASSOBJECT     shift and go to state 138
    ID              shift and go to state 139
=======
    LPAREN          shift and go to state 37
    ID              shift and go to state 113
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 84
>>>>>>> rLevin

    factor                         shift and go to state 149
    type                           shift and go to state 49
    object_access                  shift and go to state 112
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 100

<<<<<<< HEAD
    (72) data_structure_array -> CLASSOBJECT LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 140
=======
    (101) type -> MINUS type .

    TIMES           reduce using rule 101 (type -> MINUS type .)
    DIVIDE          reduce using rule 101 (type -> MINUS type .)
    PLUS            reduce using rule 101 (type -> MINUS type .)
    MINUS           reduce using rule 101 (type -> MINUS type .)
    SEMICOLON       reduce using rule 101 (type -> MINUS type .)
    RPAREN          reduce using rule 101 (type -> MINUS type .)
    COMMA           reduce using rule 101 (type -> MINUS type .)
    RSQBRACKET      reduce using rule 101 (type -> MINUS type .)
    OR              reduce using rule 101 (type -> MINUS type .)
    AND             reduce using rule 101 (type -> MINUS type .)
    NOT             reduce using rule 101 (type -> MINUS type .)
    GREATER_THAN    reduce using rule 101 (type -> MINUS type .)
    LESS_THAN       reduce using rule 101 (type -> MINUS type .)
    GREATER_EQUALS_THAN reduce using rule 101 (type -> MINUS type .)
    LESS_EQUALS_THAN reduce using rule 101 (type -> MINUS type .)
    EQUALITY        reduce using rule 101 (type -> MINUS type .)
>>>>>>> rLevin


state 101

<<<<<<< HEAD
    (70) data_structure_list -> LIST LESS_THAN . data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
=======
    (30) return -> RETURN ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (94) factor -> ID .
    (123) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (125) indexing -> ID . LSQBRACKET expression RSQBRACKET
    (23) names -> ID .
>>>>>>> rLevin

  ! reduce/reduce conflict for SEMICOLON resolved using rule 30 (return -> RETURN ID .)
    SEMICOLON       reduce using rule 30 (return -> RETURN ID .)
    DOT             shift and go to state 95
    TIMES           reduce using rule 94 (factor -> ID .)
    DIVIDE          reduce using rule 94 (factor -> ID .)
    PLUS            reduce using rule 94 (factor -> ID .)
    MINUS           reduce using rule 94 (factor -> ID .)
    LSQBRACKET      shift and go to state 94
    LPAREN          reduce using rule 23 (names -> ID .)

  ! SEMICOLON       [ reduce using rule 94 (factor -> ID .) ]

<<<<<<< HEAD
    data_type                      shift and go to state 141
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
=======
>>>>>>> rLevin

state 102

    (31) return -> RETURN type .
    (91) factor -> type .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (return -> RETURN type .)
    SEMICOLON       reduce using rule 31 (return -> RETURN type .)
    TIMES           reduce using rule 91 (factor -> type .)
    DIVIDE          reduce using rule 91 (factor -> type .)
    PLUS            reduce using rule 91 (factor -> type .)
    MINUS           reduce using rule 91 (factor -> type .)

  ! SEMICOLON       [ reduce using rule 91 (factor -> type .) ]


state 103

<<<<<<< HEAD
    (76) expression -> expression PLUS term .
    (79) term -> term . TIMES factor
    (80) term -> term . DIVIDE factor

    PLUS            reduce using rule 76 (expression -> expression PLUS term .)
    MINUS           reduce using rule 76 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 76 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 76 (expression -> expression PLUS term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
=======
    (32) return -> RETURN expression .
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 32 (return -> RETURN expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
>>>>>>> rLevin


state 104

<<<<<<< HEAD
    (84) factor -> object_access .

    TIMES           reduce using rule 84 (factor -> object_access .)
    DIVIDE          reduce using rule 84 (factor -> object_access .)
    PLUS            reduce using rule 84 (factor -> object_access .)
    MINUS           reduce using rule 84 (factor -> object_access .)
    SEMICOLON       reduce using rule 84 (factor -> object_access .)
    RPAREN          reduce using rule 84 (factor -> object_access .)
=======
    (56) while_loop -> WHILE LPAREN . logical_expression RPAREN block
    (57) while_loop -> WHILE LPAREN . logical_expression RPAREN block body
    (58) logical_expression -> . logical_expression logical_operator logical_factor
    (59) logical_expression -> . logical_factor
    (60) logical_factor -> . TRUE
    (61) logical_factor -> . FALSE
    (62) logical_factor -> . ID
    (63) logical_factor -> . indexing
    (64) logical_factor -> . type
    (65) logical_factor -> . object_access
    (66) logical_factor -> . LPAREN logical_expression RPAREN
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120
    LPAREN          shift and go to state 115
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 124
>>>>>>> rLevin

    logical_expression             shift and go to state 150
    logical_factor                 shift and go to state 117
    indexing                       shift and go to state 121
    type                           shift and go to state 122
    object_access                  shift and go to state 123

state 105

<<<<<<< HEAD
    (85) factor -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (113) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> ID . LSQBRACKET ID RSQBRACKET

    TIMES           reduce using rule 85 (factor -> ID .)
    DIVIDE          reduce using rule 85 (factor -> ID .)
    PLUS            reduce using rule 85 (factor -> ID .)
    MINUS           reduce using rule 85 (factor -> ID .)
    SEMICOLON       reduce using rule 85 (factor -> ID .)
    RPAREN          reduce using rule 85 (factor -> ID .)
    DOT             shift and go to state 88
    LSQBRACKET      shift and go to state 89
=======
    (54) loop_for -> FOR LPAREN . assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> FOR LPAREN . assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 153
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89
>>>>>>> rLevin

    assignment                     shift and go to state 151
    data_type                      shift and go to state 152
    indexing                       shift and go to state 154
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 106

<<<<<<< HEAD
    (77) expression -> expression MINUS term .
    (79) term -> term . TIMES factor
    (80) term -> term . DIVIDE factor

    PLUS            reduce using rule 77 (expression -> expression MINUS term .)
    MINUS           reduce using rule 77 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 77 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 77 (expression -> expression MINUS term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92
=======
    (78) data_structure_array -> primitive LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 155
>>>>>>> rLevin


state 107

<<<<<<< HEAD
    (59) logical_factor -> LPAREN . logical_expression RPAREN
    (50) logical_expression -> . logical_factor logical_operator logical_expression
    (51) logical_expression -> . logical_expression logical_operator logical_expression
    (52) logical_expression -> . logical_factor
    (53) logical_factor -> . TRUE
    (54) logical_factor -> . FALSE
    (55) logical_factor -> . ID
    (56) logical_factor -> . indexing
    (57) logical_factor -> . type
    (58) logical_factor -> . object_access
    (59) logical_factor -> . LPAREN logical_expression RPAREN
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
=======
    (10) object_access -> CLASSOBJECT DOT . CLASSOBJECT
    (12) object_access -> CLASSOBJECT DOT . ID
>>>>>>> rLevin

    CLASSOBJECT     shift and go to state 156
    ID              shift and go to state 157

<<<<<<< HEAD
    logical_expression             shift and go to state 142
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 108

    (35) if -> IF LPAREN logical_expression . RPAREN block
    (36) if -> IF LPAREN logical_expression . RPAREN block body
    (37) if -> IF LPAREN logical_expression . RPAREN block elseif
    (38) if -> IF LPAREN logical_expression . RPAREN block else
    (51) logical_expression -> logical_expression . logical_operator logical_expression
    (60) logical_operator -> . OR
    (61) logical_operator -> . AND
    (62) logical_operator -> . NOT
    (63) logical_operator -> . GREATER_THAN
    (64) logical_operator -> . LESS_THAN
    (65) logical_operator -> . GREATER_EQUALS_THAN
    (66) logical_operator -> . LESS_EQUALS_THAN
    (67) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 143
    OR              shift and go to state 145
    AND             shift and go to state 146
    NOT             shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    GREATER_EQUALS_THAN shift and go to state 150
    LESS_EQUALS_THAN shift and go to state 151
    EQUALITY        shift and go to state 152

    logical_operator               shift and go to state 144

state 109

    (50) logical_expression -> logical_factor . logical_operator logical_expression
    (52) logical_expression -> logical_factor .
    (60) logical_operator -> . OR
    (61) logical_operator -> . AND
    (62) logical_operator -> . NOT
    (63) logical_operator -> . GREATER_THAN
    (64) logical_operator -> . LESS_THAN
    (65) logical_operator -> . GREATER_EQUALS_THAN
    (66) logical_operator -> . LESS_EQUALS_THAN
    (67) logical_operator -> . EQUALITY

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    RPAREN          reduce using rule 52 (logical_expression -> logical_factor .)
    SEMICOLON       reduce using rule 52 (logical_expression -> logical_factor .)
    OR              shift and go to state 145
    AND             shift and go to state 146
    NOT             shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    GREATER_EQUALS_THAN shift and go to state 150
    LESS_EQUALS_THAN shift and go to state 151
    EQUALITY        shift and go to state 152

  ! OR              [ reduce using rule 52 (logical_expression -> logical_factor .) ]
  ! AND             [ reduce using rule 52 (logical_expression -> logical_factor .) ]
  ! NOT             [ reduce using rule 52 (logical_expression -> logical_factor .) ]
  ! GREATER_THAN    [ reduce using rule 52 (logical_expression -> logical_factor .) ]
  ! LESS_THAN       [ reduce using rule 52 (logical_expression -> logical_factor .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 52 (logical_expression -> logical_factor .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 52 (logical_expression -> logical_factor .) ]
  ! EQUALITY        [ reduce using rule 52 (logical_expression -> logical_factor .) ]

    logical_operator               shift and go to state 153

state 110

    (53) logical_factor -> TRUE .

    OR              reduce using rule 53 (logical_factor -> TRUE .)
    AND             reduce using rule 53 (logical_factor -> TRUE .)
    NOT             reduce using rule 53 (logical_factor -> TRUE .)
    GREATER_THAN    reduce using rule 53 (logical_factor -> TRUE .)
    LESS_THAN       reduce using rule 53 (logical_factor -> TRUE .)
    GREATER_EQUALS_THAN reduce using rule 53 (logical_factor -> TRUE .)
    LESS_EQUALS_THAN reduce using rule 53 (logical_factor -> TRUE .)
    EQUALITY        reduce using rule 53 (logical_factor -> TRUE .)
    RPAREN          reduce using rule 53 (logical_factor -> TRUE .)
    SEMICOLON       reduce using rule 53 (logical_factor -> TRUE .)
=======

state 108

    (79) data_structure_array -> CLASSOBJECT LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 158


state 109

    (77) data_structure_list -> LIST LESS_THAN . data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89

    data_type                      shift and go to state 159
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 110

    (15) body -> lines SEMICOLON body .

    RBRACKET        reduce using rule 15 (body -> lines SEMICOLON body .)
    IF              reduce using rule 15 (body -> lines SEMICOLON body .)
    ID              reduce using rule 15 (body -> lines SEMICOLON body .)
    RETURN          reduce using rule 15 (body -> lines SEMICOLON body .)
    WHILE           reduce using rule 15 (body -> lines SEMICOLON body .)
    FOR             reduce using rule 15 (body -> lines SEMICOLON body .)
    PUBLIC          reduce using rule 15 (body -> lines SEMICOLON body .)
    PRIVATE         reduce using rule 15 (body -> lines SEMICOLON body .)
    PROTECTED       reduce using rule 15 (body -> lines SEMICOLON body .)
    INTERNAL        reduce using rule 15 (body -> lines SEMICOLON body .)
    CLASSOBJECT     reduce using rule 15 (body -> lines SEMICOLON body .)
    INT             reduce using rule 15 (body -> lines SEMICOLON body .)
    FLOAT           reduce using rule 15 (body -> lines SEMICOLON body .)
    BOOL            reduce using rule 15 (body -> lines SEMICOLON body .)
    BYTE            reduce using rule 15 (body -> lines SEMICOLON body .)
    CHAR            reduce using rule 15 (body -> lines SEMICOLON body .)
    SBYTE           reduce using rule 15 (body -> lines SEMICOLON body .)
    DECIMAL         reduce using rule 15 (body -> lines SEMICOLON body .)
    DOUBLE          reduce using rule 15 (body -> lines SEMICOLON body .)
    LONG            reduce using rule 15 (body -> lines SEMICOLON body .)
    SHORT           reduce using rule 15 (body -> lines SEMICOLON body .)
    UINT            reduce using rule 15 (body -> lines SEMICOLON body .)
    LPAREN          reduce using rule 15 (body -> lines SEMICOLON body .)
    LIST            reduce using rule 15 (body -> lines SEMICOLON body .)
    FLOAT_TYPE      reduce using rule 15 (body -> lines SEMICOLON body .)
    DOUBLE_TYPE     reduce using rule 15 (body -> lines SEMICOLON body .)
    DECIMAL_TYPE    reduce using rule 15 (body -> lines SEMICOLON body .)
    INTEGER_TYPE    reduce using rule 15 (body -> lines SEMICOLON body .)
    MINUS           reduce using rule 15 (body -> lines SEMICOLON body .)
>>>>>>> rLevin


state 111

<<<<<<< HEAD
    (54) logical_factor -> FALSE .

    OR              reduce using rule 54 (logical_factor -> FALSE .)
    AND             reduce using rule 54 (logical_factor -> FALSE .)
    NOT             reduce using rule 54 (logical_factor -> FALSE .)
    GREATER_THAN    reduce using rule 54 (logical_factor -> FALSE .)
    LESS_THAN       reduce using rule 54 (logical_factor -> FALSE .)
    GREATER_EQUALS_THAN reduce using rule 54 (logical_factor -> FALSE .)
    LESS_EQUALS_THAN reduce using rule 54 (logical_factor -> FALSE .)
    EQUALITY        reduce using rule 54 (logical_factor -> FALSE .)
    RPAREN          reduce using rule 54 (logical_factor -> FALSE .)
    SEMICOLON       reduce using rule 54 (logical_factor -> FALSE .)
=======
    (85) expression -> expression PLUS term .
    (88) term -> term . TIMES factor
    (89) term -> term . DIVIDE factor

    PLUS            reduce using rule 85 (expression -> expression PLUS term .)
    MINUS           reduce using rule 85 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 85 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 85 (expression -> expression PLUS term .)
    COMMA           reduce using rule 85 (expression -> expression PLUS term .)
    RSQBRACKET      reduce using rule 85 (expression -> expression PLUS term .)
    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99
>>>>>>> rLevin


state 112

<<<<<<< HEAD
    (55) logical_factor -> ID .
    (113) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT

    OR              reduce using rule 55 (logical_factor -> ID .)
    AND             reduce using rule 55 (logical_factor -> ID .)
    NOT             reduce using rule 55 (logical_factor -> ID .)
    GREATER_THAN    reduce using rule 55 (logical_factor -> ID .)
    LESS_THAN       reduce using rule 55 (logical_factor -> ID .)
    GREATER_EQUALS_THAN reduce using rule 55 (logical_factor -> ID .)
    LESS_EQUALS_THAN reduce using rule 55 (logical_factor -> ID .)
    EQUALITY        reduce using rule 55 (logical_factor -> ID .)
    RPAREN          reduce using rule 55 (logical_factor -> ID .)
    SEMICOLON       reduce using rule 55 (logical_factor -> ID .)
    LSQBRACKET      shift and go to state 89
    DOT             shift and go to state 88
=======
    (93) factor -> object_access .

    TIMES           reduce using rule 93 (factor -> object_access .)
    DIVIDE          reduce using rule 93 (factor -> object_access .)
    PLUS            reduce using rule 93 (factor -> object_access .)
    MINUS           reduce using rule 93 (factor -> object_access .)
    SEMICOLON       reduce using rule 93 (factor -> object_access .)
    RPAREN          reduce using rule 93 (factor -> object_access .)
    COMMA           reduce using rule 93 (factor -> object_access .)
    RSQBRACKET      reduce using rule 93 (factor -> object_access .)
>>>>>>> rLevin


state 113

<<<<<<< HEAD
    (56) logical_factor -> indexing .

    OR              reduce using rule 56 (logical_factor -> indexing .)
    AND             reduce using rule 56 (logical_factor -> indexing .)
    NOT             reduce using rule 56 (logical_factor -> indexing .)
    GREATER_THAN    reduce using rule 56 (logical_factor -> indexing .)
    LESS_THAN       reduce using rule 56 (logical_factor -> indexing .)
    GREATER_EQUALS_THAN reduce using rule 56 (logical_factor -> indexing .)
    LESS_EQUALS_THAN reduce using rule 56 (logical_factor -> indexing .)
    EQUALITY        reduce using rule 56 (logical_factor -> indexing .)
    RPAREN          reduce using rule 56 (logical_factor -> indexing .)
    SEMICOLON       reduce using rule 56 (logical_factor -> indexing .)
=======
    (94) factor -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (123) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (125) indexing -> ID . LSQBRACKET expression RSQBRACKET
    (23) names -> ID .

    TIMES           reduce using rule 94 (factor -> ID .)
    DIVIDE          reduce using rule 94 (factor -> ID .)
    PLUS            reduce using rule 94 (factor -> ID .)
    MINUS           reduce using rule 94 (factor -> ID .)
    SEMICOLON       reduce using rule 94 (factor -> ID .)
    RPAREN          reduce using rule 94 (factor -> ID .)
    COMMA           reduce using rule 94 (factor -> ID .)
    RSQBRACKET      reduce using rule 94 (factor -> ID .)
    DOT             shift and go to state 95
    LSQBRACKET      shift and go to state 94
    LPAREN          reduce using rule 23 (names -> ID .)
>>>>>>> rLevin


state 114

<<<<<<< HEAD
    (57) logical_factor -> type .

    OR              reduce using rule 57 (logical_factor -> type .)
    AND             reduce using rule 57 (logical_factor -> type .)
    NOT             reduce using rule 57 (logical_factor -> type .)
    GREATER_THAN    reduce using rule 57 (logical_factor -> type .)
    LESS_THAN       reduce using rule 57 (logical_factor -> type .)
    GREATER_EQUALS_THAN reduce using rule 57 (logical_factor -> type .)
    LESS_EQUALS_THAN reduce using rule 57 (logical_factor -> type .)
    EQUALITY        reduce using rule 57 (logical_factor -> type .)
    RPAREN          reduce using rule 57 (logical_factor -> type .)
    SEMICOLON       reduce using rule 57 (logical_factor -> type .)
=======
    (86) expression -> expression MINUS term .
    (88) term -> term . TIMES factor
    (89) term -> term . DIVIDE factor

    PLUS            reduce using rule 86 (expression -> expression MINUS term .)
    MINUS           reduce using rule 86 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 86 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 86 (expression -> expression MINUS term .)
    COMMA           reduce using rule 86 (expression -> expression MINUS term .)
    RSQBRACKET      reduce using rule 86 (expression -> expression MINUS term .)
    TIMES           shift and go to state 98
    DIVIDE          shift and go to state 99
>>>>>>> rLevin


state 115

<<<<<<< HEAD
    (58) logical_factor -> object_access .

    OR              reduce using rule 58 (logical_factor -> object_access .)
    AND             reduce using rule 58 (logical_factor -> object_access .)
    NOT             reduce using rule 58 (logical_factor -> object_access .)
    GREATER_THAN    reduce using rule 58 (logical_factor -> object_access .)
    LESS_THAN       reduce using rule 58 (logical_factor -> object_access .)
    GREATER_EQUALS_THAN reduce using rule 58 (logical_factor -> object_access .)
    LESS_EQUALS_THAN reduce using rule 58 (logical_factor -> object_access .)
    EQUALITY        reduce using rule 58 (logical_factor -> object_access .)
    RPAREN          reduce using rule 58 (logical_factor -> object_access .)
    SEMICOLON       reduce using rule 58 (logical_factor -> object_access .)


state 116

    (83) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 83 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 83 (factor -> LPAREN expression RPAREN .)


state 117

    (25) function -> modifier data_type names . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 154


state 118

    (23) names -> ID .

    LPAREN          reduce using rule 23 (names -> ID .)


state 119

    (24) names -> CLASSOBJECT .

    LPAREN          reduce using rule 24 (names -> CLASSOBJECT .)


state 120

    (26) function -> modifier VOID names . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 155


state 121

    (27) function -> modifier STATIC data_type . names LPAREN declarations RPAREN block
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 118
    CLASSOBJECT     shift and go to state 119

    names                          shift and go to state 156

state 122

    (28) function -> modifier STATIC VOID . names LPAREN declarations RPAREN block
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 118
    CLASSOBJECT     shift and go to state 119

    names                          shift and go to state 157

state 123

    (73) assignment -> data_type ID EQUALS . expression
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
=======
    (66) logical_factor -> LPAREN . logical_expression RPAREN
    (58) logical_expression -> . logical_expression logical_operator logical_factor
    (59) logical_expression -> . logical_factor
    (60) logical_factor -> . TRUE
    (61) logical_factor -> . FALSE
    (62) logical_factor -> . ID
    (63) logical_factor -> . indexing
    (64) logical_factor -> . type
    (65) logical_factor -> . object_access
    (66) logical_factor -> . LPAREN logical_expression RPAREN
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
<<<<<<< HEAD
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
=======
>>>>>>> rLevin

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120
    LPAREN          shift and go to state 115
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 124

    logical_expression             shift and go to state 160
    logical_factor                 shift and go to state 117
    indexing                       shift and go to state 121
    type                           shift and go to state 122
    object_access                  shift and go to state 123

state 116

    (43) if -> IF LPAREN logical_expression . RPAREN block
    (44) if -> IF LPAREN logical_expression . RPAREN block body
    (45) if -> IF LPAREN logical_expression . RPAREN block elseif
    (46) if -> IF LPAREN logical_expression . RPAREN block else
    (58) logical_expression -> logical_expression . logical_operator logical_factor
    (67) logical_operator -> . OR
    (68) logical_operator -> . AND
    (69) logical_operator -> . NOT
    (70) logical_operator -> . GREATER_THAN
    (71) logical_operator -> . LESS_THAN
    (72) logical_operator -> . GREATER_EQUALS_THAN
    (73) logical_operator -> . LESS_EQUALS_THAN
    (74) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 161
    OR              shift and go to state 163
    AND             shift and go to state 164
    NOT             shift and go to state 165
    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    GREATER_EQUALS_THAN shift and go to state 168
    LESS_EQUALS_THAN shift and go to state 169
    EQUALITY        shift and go to state 170

    logical_operator               shift and go to state 162

state 117

    (59) logical_expression -> logical_factor .

    RPAREN          reduce using rule 59 (logical_expression -> logical_factor .)
    OR              reduce using rule 59 (logical_expression -> logical_factor .)
    AND             reduce using rule 59 (logical_expression -> logical_factor .)
    NOT             reduce using rule 59 (logical_expression -> logical_factor .)
    GREATER_THAN    reduce using rule 59 (logical_expression -> logical_factor .)
    LESS_THAN       reduce using rule 59 (logical_expression -> logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 59 (logical_expression -> logical_factor .)
    LESS_EQUALS_THAN reduce using rule 59 (logical_expression -> logical_factor .)
    EQUALITY        reduce using rule 59 (logical_expression -> logical_factor .)
    SEMICOLON       reduce using rule 59 (logical_expression -> logical_factor .)


state 118

    (60) logical_factor -> TRUE .

    RPAREN          reduce using rule 60 (logical_factor -> TRUE .)
    OR              reduce using rule 60 (logical_factor -> TRUE .)
    AND             reduce using rule 60 (logical_factor -> TRUE .)
    NOT             reduce using rule 60 (logical_factor -> TRUE .)
    GREATER_THAN    reduce using rule 60 (logical_factor -> TRUE .)
    LESS_THAN       reduce using rule 60 (logical_factor -> TRUE .)
    GREATER_EQUALS_THAN reduce using rule 60 (logical_factor -> TRUE .)
    LESS_EQUALS_THAN reduce using rule 60 (logical_factor -> TRUE .)
    EQUALITY        reduce using rule 60 (logical_factor -> TRUE .)
    SEMICOLON       reduce using rule 60 (logical_factor -> TRUE .)


state 119

    (61) logical_factor -> FALSE .

    RPAREN          reduce using rule 61 (logical_factor -> FALSE .)
    OR              reduce using rule 61 (logical_factor -> FALSE .)
    AND             reduce using rule 61 (logical_factor -> FALSE .)
    NOT             reduce using rule 61 (logical_factor -> FALSE .)
    GREATER_THAN    reduce using rule 61 (logical_factor -> FALSE .)
    LESS_THAN       reduce using rule 61 (logical_factor -> FALSE .)
    GREATER_EQUALS_THAN reduce using rule 61 (logical_factor -> FALSE .)
    LESS_EQUALS_THAN reduce using rule 61 (logical_factor -> FALSE .)
    EQUALITY        reduce using rule 61 (logical_factor -> FALSE .)
    SEMICOLON       reduce using rule 61 (logical_factor -> FALSE .)


state 120

    (62) logical_factor -> ID .
    (123) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (125) indexing -> ID . LSQBRACKET expression RSQBRACKET
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT

    RPAREN          reduce using rule 62 (logical_factor -> ID .)
    OR              reduce using rule 62 (logical_factor -> ID .)
    AND             reduce using rule 62 (logical_factor -> ID .)
    NOT             reduce using rule 62 (logical_factor -> ID .)
    GREATER_THAN    reduce using rule 62 (logical_factor -> ID .)
    LESS_THAN       reduce using rule 62 (logical_factor -> ID .)
    GREATER_EQUALS_THAN reduce using rule 62 (logical_factor -> ID .)
    LESS_EQUALS_THAN reduce using rule 62 (logical_factor -> ID .)
    EQUALITY        reduce using rule 62 (logical_factor -> ID .)
    SEMICOLON       reduce using rule 62 (logical_factor -> ID .)
    LSQBRACKET      shift and go to state 94
    DOT             shift and go to state 95


state 121

    (63) logical_factor -> indexing .

    RPAREN          reduce using rule 63 (logical_factor -> indexing .)
    OR              reduce using rule 63 (logical_factor -> indexing .)
    AND             reduce using rule 63 (logical_factor -> indexing .)
    NOT             reduce using rule 63 (logical_factor -> indexing .)
    GREATER_THAN    reduce using rule 63 (logical_factor -> indexing .)
    LESS_THAN       reduce using rule 63 (logical_factor -> indexing .)
    GREATER_EQUALS_THAN reduce using rule 63 (logical_factor -> indexing .)
    LESS_EQUALS_THAN reduce using rule 63 (logical_factor -> indexing .)
    EQUALITY        reduce using rule 63 (logical_factor -> indexing .)
    SEMICOLON       reduce using rule 63 (logical_factor -> indexing .)

<<<<<<< HEAD
    expression                     shift and go to state 158
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    factor                         shift and go to state 53
    type                           shift and go to state 47
    indexing                       shift and go to state 67
=======
>>>>>>> rLevin

state 124

<<<<<<< HEAD
    (74) assignment -> ID EQUALS expression .
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 74 (assignment -> ID EQUALS expression .)
    RPAREN          reduce using rule 74 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
=======
    (64) logical_factor -> type .

    RPAREN          reduce using rule 64 (logical_factor -> type .)
    OR              reduce using rule 64 (logical_factor -> type .)
    AND             reduce using rule 64 (logical_factor -> type .)
    NOT             reduce using rule 64 (logical_factor -> type .)
    GREATER_THAN    reduce using rule 64 (logical_factor -> type .)
    LESS_THAN       reduce using rule 64 (logical_factor -> type .)
    GREATER_EQUALS_THAN reduce using rule 64 (logical_factor -> type .)
    LESS_EQUALS_THAN reduce using rule 64 (logical_factor -> type .)
    EQUALITY        reduce using rule 64 (logical_factor -> type .)
    SEMICOLON       reduce using rule 64 (logical_factor -> type .)
>>>>>>> rLevin


state 125

    (65) logical_factor -> object_access .

    RPAREN          reduce using rule 65 (logical_factor -> object_access .)
    OR              reduce using rule 65 (logical_factor -> object_access .)
    AND             reduce using rule 65 (logical_factor -> object_access .)
    NOT             reduce using rule 65 (logical_factor -> object_access .)
    GREATER_THAN    reduce using rule 65 (logical_factor -> object_access .)
    LESS_THAN       reduce using rule 65 (logical_factor -> object_access .)
    GREATER_EQUALS_THAN reduce using rule 65 (logical_factor -> object_access .)
    LESS_EQUALS_THAN reduce using rule 65 (logical_factor -> object_access .)
    EQUALITY        reduce using rule 65 (logical_factor -> object_access .)
    SEMICOLON       reduce using rule 65 (logical_factor -> object_access .)


state 124

    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID

    DOT             shift and go to state 107


state 125

    (92) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 92 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 92 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 92 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 92 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 92 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 92 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 92 (factor -> LPAREN expression RPAREN .)
    RSQBRACKET      reduce using rule 92 (factor -> LPAREN expression RPAREN .)


state 126

    (25) function -> modifier data_type names . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 171


state 127

    (23) names -> ID .

    LPAREN          reduce using rule 23 (names -> ID .)


state 128

    (24) names -> CLASSOBJECT .

    LPAREN          reduce using rule 24 (names -> CLASSOBJECT .)


state 129

    (26) function -> modifier VOID names . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 172


state 130

    (27) function -> modifier STATIC data_type . names LPAREN declarations RPAREN block
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 127
    CLASSOBJECT     shift and go to state 128

    names                          shift and go to state 173

state 131

    (28) function -> modifier STATIC VOID . names LPAREN declarations RPAREN block
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 127
    CLASSOBJECT     shift and go to state 128

    names                          shift and go to state 174

state 132

    (80) assignment -> data_type ID EQUALS . expression
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

    ID              shift and go to state 83
    CLASSOBJECT     shift and go to state 84
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

    expression                     shift and go to state 175
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70
    names                          shift and go to state 42

state 133

    (37) arguments -> names .
    (38) arguments -> names . COMMA arguments
    (33) function_call -> names . LPAREN RPAREN
    (34) function_call -> names . LPAREN arguments RPAREN

    RPAREN          reduce using rule 37 (arguments -> names .)
    COMMA           shift and go to state 176
    LPAREN          shift and go to state 91


state 134

    (33) function_call -> names LPAREN RPAREN .

    TIMES           reduce using rule 33 (function_call -> names LPAREN RPAREN .)
    DIVIDE          reduce using rule 33 (function_call -> names LPAREN RPAREN .)
    PLUS            reduce using rule 33 (function_call -> names LPAREN RPAREN .)
    MINUS           reduce using rule 33 (function_call -> names LPAREN RPAREN .)
    SEMICOLON       reduce using rule 33 (function_call -> names LPAREN RPAREN .)
    RPAREN          reduce using rule 33 (function_call -> names LPAREN RPAREN .)
    COMMA           reduce using rule 33 (function_call -> names LPAREN RPAREN .)
    RSQBRACKET      reduce using rule 33 (function_call -> names LPAREN RPAREN .)


state 135

    (34) function_call -> names LPAREN arguments . RPAREN

    RPAREN          shift and go to state 177


state 136

    (35) arguments -> expression .
    (36) arguments -> expression . COMMA arguments
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term

    RPAREN          reduce using rule 35 (arguments -> expression .)
    COMMA           shift and go to state 178
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80


state 137

    (23) names -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (94) factor -> ID .
    (123) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (125) indexing -> ID . LSQBRACKET expression RSQBRACKET

  ! reduce/reduce conflict for COMMA resolved using rule 23 (names -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 23 (names -> ID .)
    COMMA           reduce using rule 23 (names -> ID .)
    LPAREN          reduce using rule 23 (names -> ID .)
    RPAREN          reduce using rule 23 (names -> ID .)
    DOT             shift and go to state 95
    TIMES           reduce using rule 94 (factor -> ID .)
    DIVIDE          reduce using rule 94 (factor -> ID .)
    PLUS            reduce using rule 94 (factor -> ID .)
    MINUS           reduce using rule 94 (factor -> ID .)
    LSQBRACKET      shift and go to state 94

  ! COMMA           [ reduce using rule 94 (factor -> ID .) ]
  ! RPAREN          [ reduce using rule 94 (factor -> ID .) ]


state 138

    (24) names -> CLASSOBJECT .
    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID

    COMMA           reduce using rule 24 (names -> CLASSOBJECT .)
    LPAREN          reduce using rule 24 (names -> CLASSOBJECT .)
    RPAREN          reduce using rule 24 (names -> CLASSOBJECT .)
    DOT             shift and go to state 107


state 139

    (81) assignment -> ID EQUALS expression .
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 81 (assignment -> ID EQUALS expression .)
    RPAREN          reduce using rule 81 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80


state 140

    (124) indexing -> ID LSQBRACKET ID . RSQBRACKET
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (94) factor -> ID .
    (123) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (125) indexing -> ID . LSQBRACKET expression RSQBRACKET
    (23) names -> ID .

  ! shift/reduce conflict for RSQBRACKET resolved as shift
    RSQBRACKET      shift and go to state 179
    DOT             shift and go to state 95
    TIMES           reduce using rule 94 (factor -> ID .)
    DIVIDE          reduce using rule 94 (factor -> ID .)
    PLUS            reduce using rule 94 (factor -> ID .)
    MINUS           reduce using rule 94 (factor -> ID .)
    LSQBRACKET      shift and go to state 94
    LPAREN          reduce using rule 23 (names -> ID .)

  ! RSQBRACKET      [ reduce using rule 94 (factor -> ID .) ]


state 141

    (123) indexing -> ID LSQBRACKET INTEGER_TYPE . RSQBRACKET
    (100) type -> INTEGER_TYPE .

  ! shift/reduce conflict for RSQBRACKET resolved as shift
    RSQBRACKET      shift and go to state 180
    TIMES           reduce using rule 100 (type -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 100 (type -> INTEGER_TYPE .)
    PLUS            reduce using rule 100 (type -> INTEGER_TYPE .)
    MINUS           reduce using rule 100 (type -> INTEGER_TYPE .)

  ! RSQBRACKET      [ reduce using rule 100 (type -> INTEGER_TYPE .) ]


state 142

    (125) indexing -> ID LSQBRACKET expression . RSQBRACKET
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term

    RSQBRACKET      shift and go to state 181
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80


state 143

    (9) object_access -> ID DOT ID .

    LPAREN          reduce using rule 9 (object_access -> ID DOT ID .)
    TIMES           reduce using rule 9 (object_access -> ID DOT ID .)
    DIVIDE          reduce using rule 9 (object_access -> ID DOT ID .)
    PLUS            reduce using rule 9 (object_access -> ID DOT ID .)
    MINUS           reduce using rule 9 (object_access -> ID DOT ID .)
    SEMICOLON       reduce using rule 9 (object_access -> ID DOT ID .)
    RPAREN          reduce using rule 9 (object_access -> ID DOT ID .)
    COMMA           reduce using rule 9 (object_access -> ID DOT ID .)
    RSQBRACKET      reduce using rule 9 (object_access -> ID DOT ID .)
    OR              reduce using rule 9 (object_access -> ID DOT ID .)
    AND             reduce using rule 9 (object_access -> ID DOT ID .)
    NOT             reduce using rule 9 (object_access -> ID DOT ID .)
    GREATER_THAN    reduce using rule 9 (object_access -> ID DOT ID .)
    LESS_THAN       reduce using rule 9 (object_access -> ID DOT ID .)
    GREATER_EQUALS_THAN reduce using rule 9 (object_access -> ID DOT ID .)
    LESS_EQUALS_THAN reduce using rule 9 (object_access -> ID DOT ID .)
    EQUALITY        reduce using rule 9 (object_access -> ID DOT ID .)


<<<<<<< HEAD
state 126
=======
state 144
>>>>>>> rLevin

    (11) object_access -> ID DOT CLASSOBJECT .

    LPAREN          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    TIMES           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    DIVIDE          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    PLUS            reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    MINUS           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    RPAREN          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    COMMA           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    RSQBRACKET      reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    OR              reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    AND             reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    NOT             reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    GREATER_THAN    reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    LESS_THAN       reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    GREATER_EQUALS_THAN reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    LESS_EQUALS_THAN reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    EQUALITY        reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)


<<<<<<< HEAD
state 127

    (114) indexing -> ID LSQBRACKET ID . RSQBRACKET

    RSQBRACKET      shift and go to state 159
=======
state 145

    (82) assignment -> indexing EQUALS expression .
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 82 (assignment -> indexing EQUALS expression .)
    RPAREN          reduce using rule 82 (assignment -> indexing EQUALS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80


state 146

    (41) expression -> object_access LPAREN expression . RPAREN
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term

    RPAREN          shift and go to state 182
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80


state 147

    (42) expression -> object_access LPAREN RPAREN .

    PLUS            reduce using rule 42 (expression -> object_access LPAREN RPAREN .)
    MINUS           reduce using rule 42 (expression -> object_access LPAREN RPAREN .)
    SEMICOLON       reduce using rule 42 (expression -> object_access LPAREN RPAREN .)
    RPAREN          reduce using rule 42 (expression -> object_access LPAREN RPAREN .)
    COMMA           reduce using rule 42 (expression -> object_access LPAREN RPAREN .)
    RSQBRACKET      reduce using rule 42 (expression -> object_access LPAREN RPAREN .)
>>>>>>> rLevin


state 148

<<<<<<< HEAD
    (113) indexing -> ID LSQBRACKET INTEGER_TYPE . RSQBRACKET

    RSQBRACKET      shift and go to state 160
=======
    (88) term -> term TIMES factor .

    TIMES           reduce using rule 88 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 88 (term -> term TIMES factor .)
    PLUS            reduce using rule 88 (term -> term TIMES factor .)
    MINUS           reduce using rule 88 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 88 (term -> term TIMES factor .)
    RPAREN          reduce using rule 88 (term -> term TIMES factor .)
    COMMA           reduce using rule 88 (term -> term TIMES factor .)
    RSQBRACKET      reduce using rule 88 (term -> term TIMES factor .)
>>>>>>> rLevin


state 149

<<<<<<< HEAD
    (33) expression -> object_access LPAREN expression . RPAREN
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    RPAREN          shift and go to state 161
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
=======
    (89) term -> term DIVIDE factor .

    TIMES           reduce using rule 89 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 89 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 89 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 89 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 89 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 89 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 89 (term -> term DIVIDE factor .)
    RSQBRACKET      reduce using rule 89 (term -> term DIVIDE factor .)
>>>>>>> rLevin


state 150

<<<<<<< HEAD
    (34) expression -> object_access LPAREN RPAREN .

    PLUS            reduce using rule 34 (expression -> object_access LPAREN RPAREN .)
    MINUS           reduce using rule 34 (expression -> object_access LPAREN RPAREN .)
    SEMICOLON       reduce using rule 34 (expression -> object_access LPAREN RPAREN .)
    RPAREN          reduce using rule 34 (expression -> object_access LPAREN RPAREN .)
=======
    (56) while_loop -> WHILE LPAREN logical_expression . RPAREN block
    (57) while_loop -> WHILE LPAREN logical_expression . RPAREN block body
    (58) logical_expression -> logical_expression . logical_operator logical_factor
    (67) logical_operator -> . OR
    (68) logical_operator -> . AND
    (69) logical_operator -> . NOT
    (70) logical_operator -> . GREATER_THAN
    (71) logical_operator -> . LESS_THAN
    (72) logical_operator -> . GREATER_EQUALS_THAN
    (73) logical_operator -> . LESS_EQUALS_THAN
    (74) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 183
    OR              shift and go to state 163
    AND             shift and go to state 164
    NOT             shift and go to state 165
    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    GREATER_EQUALS_THAN shift and go to state 168
    LESS_EQUALS_THAN shift and go to state 169
    EQUALITY        shift and go to state 170

    logical_operator               shift and go to state 162

state 151

    (54) loop_for -> FOR LPAREN assignment . SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> FOR LPAREN assignment . SEMICOLON logical_expression SEMICOLON assignment RPAREN block body

    SEMICOLON       shift and go to state 184
>>>>>>> rLevin


state 152

<<<<<<< HEAD
    (79) term -> term TIMES factor .

    TIMES           reduce using rule 79 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 79 (term -> term TIMES factor .)
    PLUS            reduce using rule 79 (term -> term TIMES factor .)
    MINUS           reduce using rule 79 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 79 (term -> term TIMES factor .)
    RPAREN          reduce using rule 79 (term -> term TIMES factor .)


state 132

    (80) term -> term DIVIDE factor .

    TIMES           reduce using rule 80 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 80 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 80 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 80 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 80 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 80 (term -> term DIVIDE factor .)
=======
    (80) assignment -> data_type . ID EQUALS expression

    ID              shift and go to state 185
>>>>>>> rLevin


state 153

<<<<<<< HEAD
    (48) while_loop -> WHILE LPAREN logical_expression . RPAREN block
    (49) while_loop -> WHILE LPAREN logical_expression . RPAREN block body
    (51) logical_expression -> logical_expression . logical_operator logical_expression
    (60) logical_operator -> . OR
    (61) logical_operator -> . AND
    (62) logical_operator -> . NOT
    (63) logical_operator -> . GREATER_THAN
    (64) logical_operator -> . LESS_THAN
    (65) logical_operator -> . GREATER_EQUALS_THAN
    (66) logical_operator -> . LESS_EQUALS_THAN
    (67) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 162
    OR              shift and go to state 145
    AND             shift and go to state 146
    NOT             shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    GREATER_EQUALS_THAN shift and go to state 150
    LESS_EQUALS_THAN shift and go to state 151
    EQUALITY        shift and go to state 152
=======
    (81) assignment -> ID . EQUALS expression
    (83) assignment -> ID . PLUSONE
    (123) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (125) indexing -> ID . LSQBRACKET expression RSQBRACKET

    EQUALS          shift and go to state 92
    PLUSONE         shift and go to state 93
    LSQBRACKET      shift and go to state 94
>>>>>>> rLevin

    logical_operator               shift and go to state 144

state 154

<<<<<<< HEAD
    (46) loop_for -> FOR LPAREN assignment . SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> FOR LPAREN assignment . SEMICOLON logical_expression SEMICOLON assignment RPAREN block body

    SEMICOLON       shift and go to state 163
=======
    (82) assignment -> indexing . EQUALS expression

    EQUALS          shift and go to state 96
>>>>>>> rLevin


state 155

<<<<<<< HEAD
    (73) assignment -> data_type . ID EQUALS expression

    ID              shift and go to state 164
=======
    (78) data_structure_array -> primitive LSQBRACKET RSQBRACKET .

    ID              reduce using rule 78 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)
    CLASSOBJECT     reduce using rule 78 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)
    GREATER_THAN    reduce using rule 78 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)
>>>>>>> rLevin


state 156

    (74) assignment -> ID . EQUALS expression

    EQUALS          shift and go to state 87


state 137

    (71) data_structure_array -> primitive LSQBRACKET RSQBRACKET .

    ID              reduce using rule 71 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)
    CLASSOBJECT     reduce using rule 71 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)
    GREATER_THAN    reduce using rule 71 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)


state 138

    (10) object_access -> CLASSOBJECT DOT CLASSOBJECT .

    LPAREN          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    TIMES           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    DIVIDE          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    PLUS            reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    MINUS           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    RPAREN          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    COMMA           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    RSQBRACKET      reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    OR              reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    AND             reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    NOT             reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    GREATER_THAN    reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    LESS_THAN       reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    GREATER_EQUALS_THAN reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    LESS_EQUALS_THAN reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    EQUALITY        reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)


<<<<<<< HEAD
state 139
=======
state 157
>>>>>>> rLevin

    (12) object_access -> CLASSOBJECT DOT ID .

    LPAREN          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    TIMES           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    DIVIDE          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    PLUS            reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    MINUS           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    SEMICOLON       reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    RPAREN          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    COMMA           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    RSQBRACKET      reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    OR              reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    AND             reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    NOT             reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    GREATER_THAN    reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    LESS_THAN       reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    GREATER_EQUALS_THAN reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    LESS_EQUALS_THAN reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    EQUALITY        reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)


<<<<<<< HEAD
state 140

    (72) data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .

    ID              reduce using rule 72 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)
    CLASSOBJECT     reduce using rule 72 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)
    GREATER_THAN    reduce using rule 72 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)


state 141

    (70) data_structure_list -> LIST LESS_THAN data_type . GREATER_THAN ID LSQBRACKET type RSQBRACKET

    GREATER_THAN    shift and go to state 165


state 142

    (59) logical_factor -> LPAREN logical_expression . RPAREN
    (51) logical_expression -> logical_expression . logical_operator logical_expression
    (60) logical_operator -> . OR
    (61) logical_operator -> . AND
    (62) logical_operator -> . NOT
    (63) logical_operator -> . GREATER_THAN
    (64) logical_operator -> . LESS_THAN
    (65) logical_operator -> . GREATER_EQUALS_THAN
    (66) logical_operator -> . LESS_EQUALS_THAN
    (67) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 166
    OR              shift and go to state 145
    AND             shift and go to state 146
    NOT             shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    GREATER_EQUALS_THAN shift and go to state 150
    LESS_EQUALS_THAN shift and go to state 151
    EQUALITY        shift and go to state 152

    logical_operator               shift and go to state 144

state 143

    (35) if -> IF LPAREN logical_expression RPAREN . block
    (36) if -> IF LPAREN logical_expression RPAREN . block body
    (37) if -> IF LPAREN logical_expression RPAREN . block elseif
    (38) if -> IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 167

state 144

    (51) logical_expression -> logical_expression logical_operator . logical_expression
    (50) logical_expression -> . logical_factor logical_operator logical_expression
    (51) logical_expression -> . logical_expression logical_operator logical_expression
    (52) logical_expression -> . logical_factor
    (53) logical_factor -> . TRUE
    (54) logical_factor -> . FALSE
    (55) logical_factor -> . ID
    (56) logical_factor -> . indexing
    (57) logical_factor -> . type
    (58) logical_factor -> . object_access
    (59) logical_factor -> . LPAREN logical_expression RPAREN
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_expression             shift and go to state 168
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 145

    (60) logical_operator -> OR .

    TRUE            reduce using rule 60 (logical_operator -> OR .)
    FALSE           reduce using rule 60 (logical_operator -> OR .)
    ID              reduce using rule 60 (logical_operator -> OR .)
    LPAREN          reduce using rule 60 (logical_operator -> OR .)
    FLOAT_TYPE      reduce using rule 60 (logical_operator -> OR .)
    DOUBLE_TYPE     reduce using rule 60 (logical_operator -> OR .)
    DECIMAL_TYPE    reduce using rule 60 (logical_operator -> OR .)
    INTEGER_TYPE    reduce using rule 60 (logical_operator -> OR .)
    MINUS           reduce using rule 60 (logical_operator -> OR .)
    CLASSOBJECT     reduce using rule 60 (logical_operator -> OR .)


state 146

    (61) logical_operator -> AND .

    TRUE            reduce using rule 61 (logical_operator -> AND .)
    FALSE           reduce using rule 61 (logical_operator -> AND .)
    ID              reduce using rule 61 (logical_operator -> AND .)
    LPAREN          reduce using rule 61 (logical_operator -> AND .)
    FLOAT_TYPE      reduce using rule 61 (logical_operator -> AND .)
    DOUBLE_TYPE     reduce using rule 61 (logical_operator -> AND .)
    DECIMAL_TYPE    reduce using rule 61 (logical_operator -> AND .)
    INTEGER_TYPE    reduce using rule 61 (logical_operator -> AND .)
    MINUS           reduce using rule 61 (logical_operator -> AND .)
    CLASSOBJECT     reduce using rule 61 (logical_operator -> AND .)


state 147

    (62) logical_operator -> NOT .

    TRUE            reduce using rule 62 (logical_operator -> NOT .)
    FALSE           reduce using rule 62 (logical_operator -> NOT .)
    ID              reduce using rule 62 (logical_operator -> NOT .)
    LPAREN          reduce using rule 62 (logical_operator -> NOT .)
    FLOAT_TYPE      reduce using rule 62 (logical_operator -> NOT .)
    DOUBLE_TYPE     reduce using rule 62 (logical_operator -> NOT .)
    DECIMAL_TYPE    reduce using rule 62 (logical_operator -> NOT .)
    INTEGER_TYPE    reduce using rule 62 (logical_operator -> NOT .)
    MINUS           reduce using rule 62 (logical_operator -> NOT .)
    CLASSOBJECT     reduce using rule 62 (logical_operator -> NOT .)


state 148

    (63) logical_operator -> GREATER_THAN .

    TRUE            reduce using rule 63 (logical_operator -> GREATER_THAN .)
    FALSE           reduce using rule 63 (logical_operator -> GREATER_THAN .)
    ID              reduce using rule 63 (logical_operator -> GREATER_THAN .)
    LPAREN          reduce using rule 63 (logical_operator -> GREATER_THAN .)
    FLOAT_TYPE      reduce using rule 63 (logical_operator -> GREATER_THAN .)
    DOUBLE_TYPE     reduce using rule 63 (logical_operator -> GREATER_THAN .)
    DECIMAL_TYPE    reduce using rule 63 (logical_operator -> GREATER_THAN .)
    INTEGER_TYPE    reduce using rule 63 (logical_operator -> GREATER_THAN .)
    MINUS           reduce using rule 63 (logical_operator -> GREATER_THAN .)
    CLASSOBJECT     reduce using rule 63 (logical_operator -> GREATER_THAN .)


state 149

    (64) logical_operator -> LESS_THAN .

    TRUE            reduce using rule 64 (logical_operator -> LESS_THAN .)
    FALSE           reduce using rule 64 (logical_operator -> LESS_THAN .)
    ID              reduce using rule 64 (logical_operator -> LESS_THAN .)
    LPAREN          reduce using rule 64 (logical_operator -> LESS_THAN .)
    FLOAT_TYPE      reduce using rule 64 (logical_operator -> LESS_THAN .)
    DOUBLE_TYPE     reduce using rule 64 (logical_operator -> LESS_THAN .)
    DECIMAL_TYPE    reduce using rule 64 (logical_operator -> LESS_THAN .)
    INTEGER_TYPE    reduce using rule 64 (logical_operator -> LESS_THAN .)
    MINUS           reduce using rule 64 (logical_operator -> LESS_THAN .)
    CLASSOBJECT     reduce using rule 64 (logical_operator -> LESS_THAN .)


state 150

    (65) logical_operator -> GREATER_EQUALS_THAN .

    TRUE            reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    FALSE           reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    ID              reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    LPAREN          reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    FLOAT_TYPE      reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    DOUBLE_TYPE     reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    DECIMAL_TYPE    reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    INTEGER_TYPE    reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    MINUS           reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)
    CLASSOBJECT     reduce using rule 65 (logical_operator -> GREATER_EQUALS_THAN .)


state 151

    (66) logical_operator -> LESS_EQUALS_THAN .

    TRUE            reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    FALSE           reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    ID              reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    LPAREN          reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    FLOAT_TYPE      reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    DOUBLE_TYPE     reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    DECIMAL_TYPE    reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    INTEGER_TYPE    reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    MINUS           reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)
    CLASSOBJECT     reduce using rule 66 (logical_operator -> LESS_EQUALS_THAN .)


state 152

    (67) logical_operator -> EQUALITY .

    TRUE            reduce using rule 67 (logical_operator -> EQUALITY .)
    FALSE           reduce using rule 67 (logical_operator -> EQUALITY .)
    ID              reduce using rule 67 (logical_operator -> EQUALITY .)
    LPAREN          reduce using rule 67 (logical_operator -> EQUALITY .)
    FLOAT_TYPE      reduce using rule 67 (logical_operator -> EQUALITY .)
    DOUBLE_TYPE     reduce using rule 67 (logical_operator -> EQUALITY .)
    DECIMAL_TYPE    reduce using rule 67 (logical_operator -> EQUALITY .)
    INTEGER_TYPE    reduce using rule 67 (logical_operator -> EQUALITY .)
    MINUS           reduce using rule 67 (logical_operator -> EQUALITY .)
    CLASSOBJECT     reduce using rule 67 (logical_operator -> EQUALITY .)


state 153

    (50) logical_expression -> logical_factor logical_operator . logical_expression
    (50) logical_expression -> . logical_factor logical_operator logical_expression
    (51) logical_expression -> . logical_expression logical_operator logical_expression
    (52) logical_expression -> . logical_factor
    (53) logical_factor -> . TRUE
    (54) logical_factor -> . FALSE
    (55) logical_factor -> . ID
    (56) logical_factor -> . indexing
    (57) logical_factor -> . type
    (58) logical_factor -> . object_access
    (59) logical_factor -> . LPAREN logical_expression RPAREN
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_factor                 shift and go to state 109
    logical_expression             shift and go to state 169
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 154

    (25) function -> modifier data_type names LPAREN . declarations RPAREN block
    (92) declarations -> . declaration
    (93) declarations -> . declaration COMMA
    (94) declarations -> . declaration COMMA declarations
    (95) declaration -> . data_type ID
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    data_type                      shift and go to state 170
    declarations                   shift and go to state 171
    declaration                    shift and go to state 172
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 155

    (26) function -> modifier VOID names LPAREN . declarations RPAREN block
    (92) declarations -> . declaration
    (93) declarations -> . declaration COMMA
    (94) declarations -> . declaration COMMA declarations
    (95) declaration -> . data_type ID
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    declarations                   shift and go to state 173
    declaration                    shift and go to state 172
    data_type                      shift and go to state 170
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 156

    (27) function -> modifier STATIC data_type names . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 174


state 157

    (28) function -> modifier STATIC VOID names . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 175


state 158

    (73) assignment -> data_type ID EQUALS expression .
    (76) expression -> expression . PLUS term
    (77) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 73 (assignment -> data_type ID EQUALS expression .)
    RPAREN          reduce using rule 73 (assignment -> data_type ID EQUALS expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
=======
state 158

    (79) data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .

    ID              reduce using rule 79 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)
    CLASSOBJECT     reduce using rule 79 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)
    GREATER_THAN    reduce using rule 79 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)
>>>>>>> rLevin


state 159

<<<<<<< HEAD
    (114) indexing -> ID LSQBRACKET ID RSQBRACKET .
=======
    (77) data_structure_list -> LIST LESS_THAN data_type . GREATER_THAN ID LSQBRACKET type RSQBRACKET

    GREATER_THAN    shift and go to state 186


state 160

    (66) logical_factor -> LPAREN logical_expression . RPAREN
    (58) logical_expression -> logical_expression . logical_operator logical_factor
    (67) logical_operator -> . OR
    (68) logical_operator -> . AND
    (69) logical_operator -> . NOT
    (70) logical_operator -> . GREATER_THAN
    (71) logical_operator -> . LESS_THAN
    (72) logical_operator -> . GREATER_EQUALS_THAN
    (73) logical_operator -> . LESS_EQUALS_THAN
    (74) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 187
    OR              shift and go to state 163
    AND             shift and go to state 164
    NOT             shift and go to state 165
    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    GREATER_EQUALS_THAN shift and go to state 168
    LESS_EQUALS_THAN shift and go to state 169
    EQUALITY        shift and go to state 170

    logical_operator               shift and go to state 162

state 161

    (43) if -> IF LPAREN logical_expression RPAREN . block
    (44) if -> IF LPAREN logical_expression RPAREN . block body
    (45) if -> IF LPAREN logical_expression RPAREN . block elseif
    (46) if -> IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET
>>>>>>> rLevin

    TIMES           reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    DIVIDE          reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    PLUS            reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    MINUS           reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    SEMICOLON       reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    RPAREN          reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    OR              reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    AND             reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    NOT             reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    GREATER_THAN    reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    LESS_THAN       reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    GREATER_EQUALS_THAN reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    LESS_EQUALS_THAN reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    EQUALITY        reduce using rule 114 (indexing -> ID LSQBRACKET ID RSQBRACKET .)

<<<<<<< HEAD
=======
    block                          shift and go to state 188
>>>>>>> rLevin

state 162

<<<<<<< HEAD
    (113) indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .

    TIMES           reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    DIVIDE          reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    PLUS            reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    MINUS           reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    SEMICOLON       reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    RPAREN          reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    OR              reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    AND             reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    NOT             reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    GREATER_THAN    reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    LESS_THAN       reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    GREATER_EQUALS_THAN reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    LESS_EQUALS_THAN reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    EQUALITY        reduce using rule 113 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)


state 161

    (33) expression -> object_access LPAREN expression RPAREN .

    PLUS            reduce using rule 33 (expression -> object_access LPAREN expression RPAREN .)
    MINUS           reduce using rule 33 (expression -> object_access LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 33 (expression -> object_access LPAREN expression RPAREN .)
    RPAREN          reduce using rule 33 (expression -> object_access LPAREN expression RPAREN .)


state 162

    (48) while_loop -> WHILE LPAREN logical_expression RPAREN . block
    (49) while_loop -> WHILE LPAREN logical_expression RPAREN . block body
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 176

state 163

    (46) loop_for -> FOR LPAREN assignment SEMICOLON . logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> FOR LPAREN assignment SEMICOLON . logical_expression SEMICOLON assignment RPAREN block body
    (50) logical_expression -> . logical_factor logical_operator logical_expression
    (51) logical_expression -> . logical_expression logical_operator logical_expression
    (52) logical_expression -> . logical_factor
    (53) logical_factor -> . TRUE
    (54) logical_factor -> . FALSE
    (55) logical_factor -> . ID
    (56) logical_factor -> . indexing
    (57) logical_factor -> . type
    (58) logical_factor -> . object_access
    (59) logical_factor -> . LPAREN logical_expression RPAREN
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
=======
    (58) logical_expression -> logical_expression logical_operator . logical_factor
    (60) logical_factor -> . TRUE
    (61) logical_factor -> . FALSE
    (62) logical_factor -> . ID
    (63) logical_factor -> . indexing
    (64) logical_factor -> . type
    (65) logical_factor -> . object_access
    (66) logical_factor -> . LPAREN logical_expression RPAREN
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120
    LPAREN          shift and go to state 115
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 124

    logical_factor                 shift and go to state 189
    indexing                       shift and go to state 121
    type                           shift and go to state 122
    object_access                  shift and go to state 123

state 163

    (67) logical_operator -> OR .

    TRUE            reduce using rule 67 (logical_operator -> OR .)
    FALSE           reduce using rule 67 (logical_operator -> OR .)
    ID              reduce using rule 67 (logical_operator -> OR .)
    LPAREN          reduce using rule 67 (logical_operator -> OR .)
    FLOAT_TYPE      reduce using rule 67 (logical_operator -> OR .)
    DOUBLE_TYPE     reduce using rule 67 (logical_operator -> OR .)
    DECIMAL_TYPE    reduce using rule 67 (logical_operator -> OR .)
    INTEGER_TYPE    reduce using rule 67 (logical_operator -> OR .)
    MINUS           reduce using rule 67 (logical_operator -> OR .)
    CLASSOBJECT     reduce using rule 67 (logical_operator -> OR .)


state 164

    (68) logical_operator -> AND .

    TRUE            reduce using rule 68 (logical_operator -> AND .)
    FALSE           reduce using rule 68 (logical_operator -> AND .)
    ID              reduce using rule 68 (logical_operator -> AND .)
    LPAREN          reduce using rule 68 (logical_operator -> AND .)
    FLOAT_TYPE      reduce using rule 68 (logical_operator -> AND .)
    DOUBLE_TYPE     reduce using rule 68 (logical_operator -> AND .)
    DECIMAL_TYPE    reduce using rule 68 (logical_operator -> AND .)
    INTEGER_TYPE    reduce using rule 68 (logical_operator -> AND .)
    MINUS           reduce using rule 68 (logical_operator -> AND .)
    CLASSOBJECT     reduce using rule 68 (logical_operator -> AND .)


state 165

    (69) logical_operator -> NOT .

    TRUE            reduce using rule 69 (logical_operator -> NOT .)
    FALSE           reduce using rule 69 (logical_operator -> NOT .)
    ID              reduce using rule 69 (logical_operator -> NOT .)
    LPAREN          reduce using rule 69 (logical_operator -> NOT .)
    FLOAT_TYPE      reduce using rule 69 (logical_operator -> NOT .)
    DOUBLE_TYPE     reduce using rule 69 (logical_operator -> NOT .)
    DECIMAL_TYPE    reduce using rule 69 (logical_operator -> NOT .)
    INTEGER_TYPE    reduce using rule 69 (logical_operator -> NOT .)
    MINUS           reduce using rule 69 (logical_operator -> NOT .)
    CLASSOBJECT     reduce using rule 69 (logical_operator -> NOT .)


state 166

    (70) logical_operator -> GREATER_THAN .

    TRUE            reduce using rule 70 (logical_operator -> GREATER_THAN .)
    FALSE           reduce using rule 70 (logical_operator -> GREATER_THAN .)
    ID              reduce using rule 70 (logical_operator -> GREATER_THAN .)
    LPAREN          reduce using rule 70 (logical_operator -> GREATER_THAN .)
    FLOAT_TYPE      reduce using rule 70 (logical_operator -> GREATER_THAN .)
    DOUBLE_TYPE     reduce using rule 70 (logical_operator -> GREATER_THAN .)
    DECIMAL_TYPE    reduce using rule 70 (logical_operator -> GREATER_THAN .)
    INTEGER_TYPE    reduce using rule 70 (logical_operator -> GREATER_THAN .)
    MINUS           reduce using rule 70 (logical_operator -> GREATER_THAN .)
    CLASSOBJECT     reduce using rule 70 (logical_operator -> GREATER_THAN .)


state 167

    (71) logical_operator -> LESS_THAN .

    TRUE            reduce using rule 71 (logical_operator -> LESS_THAN .)
    FALSE           reduce using rule 71 (logical_operator -> LESS_THAN .)
    ID              reduce using rule 71 (logical_operator -> LESS_THAN .)
    LPAREN          reduce using rule 71 (logical_operator -> LESS_THAN .)
    FLOAT_TYPE      reduce using rule 71 (logical_operator -> LESS_THAN .)
    DOUBLE_TYPE     reduce using rule 71 (logical_operator -> LESS_THAN .)
    DECIMAL_TYPE    reduce using rule 71 (logical_operator -> LESS_THAN .)
    INTEGER_TYPE    reduce using rule 71 (logical_operator -> LESS_THAN .)
    MINUS           reduce using rule 71 (logical_operator -> LESS_THAN .)
    CLASSOBJECT     reduce using rule 71 (logical_operator -> LESS_THAN .)


state 168

    (72) logical_operator -> GREATER_EQUALS_THAN .

    TRUE            reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    FALSE           reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    ID              reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    LPAREN          reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    FLOAT_TYPE      reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    DOUBLE_TYPE     reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    DECIMAL_TYPE    reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    INTEGER_TYPE    reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    MINUS           reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)
    CLASSOBJECT     reduce using rule 72 (logical_operator -> GREATER_EQUALS_THAN .)


state 169

    (73) logical_operator -> LESS_EQUALS_THAN .

    TRUE            reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    FALSE           reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    ID              reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    LPAREN          reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    FLOAT_TYPE      reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    DOUBLE_TYPE     reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    DECIMAL_TYPE    reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    INTEGER_TYPE    reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    MINUS           reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)
    CLASSOBJECT     reduce using rule 73 (logical_operator -> LESS_EQUALS_THAN .)


state 170

    (74) logical_operator -> EQUALITY .

    TRUE            reduce using rule 74 (logical_operator -> EQUALITY .)
    FALSE           reduce using rule 74 (logical_operator -> EQUALITY .)
    ID              reduce using rule 74 (logical_operator -> EQUALITY .)
    LPAREN          reduce using rule 74 (logical_operator -> EQUALITY .)
    FLOAT_TYPE      reduce using rule 74 (logical_operator -> EQUALITY .)
    DOUBLE_TYPE     reduce using rule 74 (logical_operator -> EQUALITY .)
    DECIMAL_TYPE    reduce using rule 74 (logical_operator -> EQUALITY .)
    INTEGER_TYPE    reduce using rule 74 (logical_operator -> EQUALITY .)
    MINUS           reduce using rule 74 (logical_operator -> EQUALITY .)
    CLASSOBJECT     reduce using rule 74 (logical_operator -> EQUALITY .)


state 171

    (25) function -> modifier data_type names LPAREN . declarations RPAREN block
    (102) declarations -> . declaration
    (103) declarations -> . declaration COMMA
    (104) declarations -> . declaration COMMA declarations
    (105) declaration -> . data_type ID
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89

    data_type                      shift and go to state 190
    declarations                   shift and go to state 191
    declaration                    shift and go to state 192
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 172

    (26) function -> modifier VOID names LPAREN . declarations RPAREN block
    (102) declarations -> . declaration
    (103) declarations -> . declaration COMMA
    (104) declarations -> . declaration COMMA declarations
    (105) declaration -> . data_type ID
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89

    declarations                   shift and go to state 193
    declaration                    shift and go to state 192
    data_type                      shift and go to state 190
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 173

    (27) function -> modifier STATIC data_type names . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 194


state 174

    (28) function -> modifier STATIC VOID names . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 195


state 175

    (80) assignment -> data_type ID EQUALS expression .
    (85) expression -> expression . PLUS term
    (86) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 80 (assignment -> data_type ID EQUALS expression .)
    RPAREN          reduce using rule 80 (assignment -> data_type ID EQUALS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80


state 176

    (38) arguments -> names COMMA . arguments
    (35) arguments -> . expression
    (36) arguments -> . expression COMMA arguments
    (37) arguments -> . names
    (38) arguments -> . names COMMA arguments
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
<<<<<<< HEAD
=======
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN

    ID              shift and go to state 137
    CLASSOBJECT     shift and go to state 138
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

    names                          shift and go to state 133
    arguments                      shift and go to state 196
    expression                     shift and go to state 136
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70

state 177

    (34) function_call -> names LPAREN arguments RPAREN .

    TIMES           reduce using rule 34 (function_call -> names LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 34 (function_call -> names LPAREN arguments RPAREN .)
    PLUS            reduce using rule 34 (function_call -> names LPAREN arguments RPAREN .)
    MINUS           reduce using rule 34 (function_call -> names LPAREN arguments RPAREN .)
    SEMICOLON       reduce using rule 34 (function_call -> names LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 34 (function_call -> names LPAREN arguments RPAREN .)
    COMMA           reduce using rule 34 (function_call -> names LPAREN arguments RPAREN .)
    RSQBRACKET      reduce using rule 34 (function_call -> names LPAREN arguments RPAREN .)


state 178

    (36) arguments -> expression COMMA . arguments
    (35) arguments -> . expression
    (36) arguments -> . expression COMMA arguments
    (37) arguments -> . names
    (38) arguments -> . names COMMA arguments
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (23) names -> . ID
    (24) names -> . CLASSOBJECT
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN

    ID              shift and go to state 137
    CLASSOBJECT     shift and go to state 138
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

    expression                     shift and go to state 136
    arguments                      shift and go to state 197
    names                          shift and go to state 133
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 56
    type                           shift and go to state 49
    indexing                       shift and go to state 85
    function_call                  shift and go to state 70

state 179

    (124) indexing -> ID LSQBRACKET ID RSQBRACKET .

    EQUALS          reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    TIMES           reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    DIVIDE          reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    PLUS            reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    MINUS           reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    SEMICOLON       reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    RPAREN          reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    COMMA           reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    RSQBRACKET      reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    OR              reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    AND             reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    NOT             reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    GREATER_THAN    reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    LESS_THAN       reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    GREATER_EQUALS_THAN reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    LESS_EQUALS_THAN reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    EQUALITY        reduce using rule 124 (indexing -> ID LSQBRACKET ID RSQBRACKET .)


state 180

    (123) indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .

    EQUALS          reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    TIMES           reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    DIVIDE          reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    PLUS            reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    MINUS           reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    SEMICOLON       reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    RPAREN          reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    COMMA           reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    RSQBRACKET      reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    OR              reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    AND             reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    NOT             reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    GREATER_THAN    reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    LESS_THAN       reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    GREATER_EQUALS_THAN reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    LESS_EQUALS_THAN reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    EQUALITY        reduce using rule 123 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)


state 181

    (125) indexing -> ID LSQBRACKET expression RSQBRACKET .

    EQUALS          reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    TIMES           reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    DIVIDE          reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    PLUS            reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    MINUS           reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    SEMICOLON       reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    RPAREN          reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    COMMA           reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    RSQBRACKET      reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    OR              reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    AND             reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    NOT             reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    GREATER_THAN    reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    LESS_THAN       reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    GREATER_EQUALS_THAN reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    LESS_EQUALS_THAN reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)
    EQUALITY        reduce using rule 125 (indexing -> ID LSQBRACKET expression RSQBRACKET .)


state 182

    (41) expression -> object_access LPAREN expression RPAREN .

    PLUS            reduce using rule 41 (expression -> object_access LPAREN expression RPAREN .)
    MINUS           reduce using rule 41 (expression -> object_access LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 41 (expression -> object_access LPAREN expression RPAREN .)
    RPAREN          reduce using rule 41 (expression -> object_access LPAREN expression RPAREN .)
    COMMA           reduce using rule 41 (expression -> object_access LPAREN expression RPAREN .)
    RSQBRACKET      reduce using rule 41 (expression -> object_access LPAREN expression RPAREN .)


state 183

    (56) while_loop -> WHILE LPAREN logical_expression RPAREN . block
    (57) while_loop -> WHILE LPAREN logical_expression RPAREN . block body
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 198

state 184

    (54) loop_for -> FOR LPAREN assignment SEMICOLON . logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> FOR LPAREN assignment SEMICOLON . logical_expression SEMICOLON assignment RPAREN block body
    (58) logical_expression -> . logical_expression logical_operator logical_factor
    (59) logical_expression -> . logical_factor
    (60) logical_factor -> . TRUE
    (61) logical_factor -> . FALSE
    (62) logical_factor -> . ID
    (63) logical_factor -> . indexing
    (64) logical_factor -> . type
    (65) logical_factor -> . object_access
    (66) logical_factor -> . LPAREN logical_expression RPAREN
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120
    LPAREN          shift and go to state 115
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 124

    logical_expression             shift and go to state 199
    logical_factor                 shift and go to state 117
    indexing                       shift and go to state 121
    type                           shift and go to state 122
    object_access                  shift and go to state 123

state 185

    (80) assignment -> data_type ID . EQUALS expression

    EQUALS          shift and go to state 132


state 186

    (77) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN . ID LSQBRACKET type RSQBRACKET

    ID              shift and go to state 200


state 187

    (66) logical_factor -> LPAREN logical_expression RPAREN .

    RPAREN          reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    OR              reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    AND             reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    NOT             reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    GREATER_THAN    reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    LESS_THAN       reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    GREATER_EQUALS_THAN reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    LESS_EQUALS_THAN reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    EQUALITY        reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)
    SEMICOLON       reduce using rule 66 (logical_factor -> LPAREN logical_expression RPAREN .)


state 188

    (43) if -> IF LPAREN logical_expression RPAREN block .
    (44) if -> IF LPAREN logical_expression RPAREN block . body
    (45) if -> IF LPAREN logical_expression RPAREN block . elseif
    (46) if -> IF LPAREN logical_expression RPAREN block . else
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (47) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (48) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (49) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (50) else -> . ELSE block
    (51) else -> . ELSE block body
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (43) if -> . IF LPAREN logical_expression RPAREN block
    (44) if -> . IF LPAREN logical_expression RPAREN block body
    (45) if -> . IF LPAREN logical_expression RPAREN block elseif
    (46) if -> . IF LPAREN logical_expression RPAREN block else
    (52) loop -> . while_loop
    (53) loop -> . loop_for
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
    (29) function -> . function body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (105) declaration -> . data_type ID
    (30) return -> . RETURN ID
    (31) return -> . RETURN type
    (32) return -> . RETURN expression
    (56) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (57) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (54) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for INTERNAL resolved as shift
  ! shift/reduce conflict for CLASSOBJECT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SBYTE resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for DECIMAL_TYPE resolved as shift
  ! shift/reduce conflict for INTEGER_TYPE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 204
    IF              shift and go to state 36
    ID              shift and go to state 43
    RETURN          shift and go to state 48
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 55
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LPAREN          shift and go to state 37
    LIST            shift and go to state 71
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

  ! IF              [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! ID              [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! RETURN          [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! WHILE           [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! FOR             [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! PUBLIC          [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! PRIVATE         [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! PROTECTED       [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! INTERNAL        [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! CLASSOBJECT     [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! INT             [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! FLOAT           [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! BOOL            [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! BYTE            [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! CHAR            [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! SBYTE           [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! DECIMAL         [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! DOUBLE          [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! LONG            [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! SHORT           [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! UINT            [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! LPAREN          [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! LIST            [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! FLOAT_TYPE      [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! DOUBLE_TYPE     [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! DECIMAL_TYPE    [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! INTEGER_TYPE    [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]
  ! MINUS           [ reduce using rule 43 (if -> IF LPAREN logical_expression RPAREN block .) ]

    body                           shift and go to state 201
    elseif                         shift and go to state 202
    else                           shift and go to state 203
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    names                          shift and go to state 42
    indexing                       shift and go to state 44
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    type                           shift and go to state 49
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    factor                         shift and go to state 56
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69
    function_call                  shift and go to state 70

state 189

    (58) logical_expression -> logical_expression logical_operator logical_factor .

    RPAREN          reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    OR              reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    AND             reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    NOT             reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_THAN    reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_THAN       reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_EQUALS_THAN reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    EQUALITY        reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)
    SEMICOLON       reduce using rule 58 (logical_expression -> logical_expression logical_operator logical_factor .)


state 190

    (105) declaration -> data_type . ID

    ID              shift and go to state 205


state 191

    (25) function -> modifier data_type names LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 206


state 192

    (102) declarations -> declaration .
    (103) declarations -> declaration . COMMA
    (104) declarations -> declaration . COMMA declarations

    RPAREN          reduce using rule 102 (declarations -> declaration .)
    COMMA           shift and go to state 207


state 193

    (26) function -> modifier VOID names LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 208


state 194

    (27) function -> modifier STATIC data_type names LPAREN . declarations RPAREN block
    (102) declarations -> . declaration
    (103) declarations -> . declaration COMMA
    (104) declarations -> . declaration COMMA declarations
    (105) declaration -> . data_type ID
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89

    data_type                      shift and go to state 190
    declarations                   shift and go to state 209
    declaration                    shift and go to state 192
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 195

    (28) function -> modifier STATIC VOID names LPAREN . declarations RPAREN block
    (102) declarations -> . declaration
    (103) declarations -> . declaration COMMA
    (104) declarations -> . declaration COMMA declarations
    (105) declaration -> . data_type ID
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89

    declarations                   shift and go to state 210
    declaration                    shift and go to state 192
    data_type                      shift and go to state 190
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 196

    (38) arguments -> names COMMA arguments .

    RPAREN          reduce using rule 38 (arguments -> names COMMA arguments .)


state 197

    (36) arguments -> expression COMMA arguments .
>>>>>>> rLevin

    RPAREN          reduce using rule 36 (arguments -> expression COMMA arguments .)

<<<<<<< HEAD
    logical_expression             shift and go to state 177
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115
=======
>>>>>>> rLevin

state 164

    (73) assignment -> data_type ID . EQUALS expression

    EQUALS          shift and go to state 123


state 165

    (70) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN . ID LSQBRACKET type RSQBRACKET

    ID              shift and go to state 178


state 166

    (59) logical_factor -> LPAREN logical_expression RPAREN .

    OR              reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    AND             reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    NOT             reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    GREATER_THAN    reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    LESS_THAN       reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    GREATER_EQUALS_THAN reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    LESS_EQUALS_THAN reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    EQUALITY        reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    RPAREN          reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)
    SEMICOLON       reduce using rule 59 (logical_factor -> LPAREN logical_expression RPAREN .)


state 167

    (35) if -> IF LPAREN logical_expression RPAREN block .
    (36) if -> IF LPAREN logical_expression RPAREN block . body
    (37) if -> IF LPAREN logical_expression RPAREN block . elseif
    (38) if -> IF LPAREN logical_expression RPAREN block . else
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (39) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (40) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (41) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (42) else -> . ELSE block
    (43) else -> . ELSE block body
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (35) if -> . IF LPAREN logical_expression RPAREN block
    (36) if -> . IF LPAREN logical_expression RPAREN block body
    (37) if -> . IF LPAREN logical_expression RPAREN block elseif
    (38) if -> . IF LPAREN logical_expression RPAREN block else
    (44) loop -> . while_loop
    (45) loop -> . loop_for
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
    (73) assignment -> . data_type ID EQUALS expression
    (74) assignment -> . ID EQUALS expression
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (95) declaration -> . data_type ID
    (29) return -> . RETURN ID
    (30) return -> . RETURN type
    (48) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (49) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (46) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (96) modifier -> . PUBLIC
    (97) modifier -> . PRIVATE
    (98) modifier -> . PROTECTED
    (99) modifier -> . INTERNAL
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 35 (if -> IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 182
    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    body                           shift and go to state 179
    elseif                         shift and go to state 180
    else                           shift and go to state 181
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 168

    (51) logical_expression -> logical_expression logical_operator logical_expression .
    (51) logical_expression -> logical_expression . logical_operator logical_expression
    (60) logical_operator -> . OR
    (61) logical_operator -> . AND
    (62) logical_operator -> . NOT
    (63) logical_operator -> . GREATER_THAN
    (64) logical_operator -> . LESS_THAN
    (65) logical_operator -> . GREATER_EQUALS_THAN
    (66) logical_operator -> . LESS_EQUALS_THAN
    (67) logical_operator -> . EQUALITY

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    RPAREN          reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .)
    SEMICOLON       reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .)
    OR              shift and go to state 145
    AND             shift and go to state 146
    NOT             shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    GREATER_EQUALS_THAN shift and go to state 150
    LESS_EQUALS_THAN shift and go to state 151
    EQUALITY        shift and go to state 152

  ! OR              [ reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .) ]
  ! AND             [ reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .) ]
  ! NOT             [ reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .) ]
  ! EQUALITY        [ reduce using rule 51 (logical_expression -> logical_expression logical_operator logical_expression .) ]

    logical_operator               shift and go to state 144

state 169

    (50) logical_expression -> logical_factor logical_operator logical_expression .
    (51) logical_expression -> logical_expression . logical_operator logical_expression
    (60) logical_operator -> . OR
    (61) logical_operator -> . AND
    (62) logical_operator -> . NOT
    (63) logical_operator -> . GREATER_THAN
    (64) logical_operator -> . LESS_THAN
    (65) logical_operator -> . GREATER_EQUALS_THAN
    (66) logical_operator -> . LESS_EQUALS_THAN
    (67) logical_operator -> . EQUALITY

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for EQUALITY resolved as shift
    RPAREN          reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .)
    SEMICOLON       reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .)
    OR              shift and go to state 145
    AND             shift and go to state 146
    NOT             shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    GREATER_EQUALS_THAN shift and go to state 150
    LESS_EQUALS_THAN shift and go to state 151
    EQUALITY        shift and go to state 152

  ! OR              [ reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .) ]
  ! AND             [ reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .) ]
  ! NOT             [ reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .) ]
  ! EQUALITY        [ reduce using rule 50 (logical_expression -> logical_factor logical_operator logical_expression .) ]

    logical_operator               shift and go to state 144

state 170

    (95) declaration -> data_type . ID

    ID              shift and go to state 183


state 171

    (25) function -> modifier data_type names LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 184


state 172

    (92) declarations -> declaration .
    (93) declarations -> declaration . COMMA
    (94) declarations -> declaration . COMMA declarations

    RPAREN          reduce using rule 92 (declarations -> declaration .)
    COMMA           shift and go to state 185


state 173

    (26) function -> modifier VOID names LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 186


state 174

    (27) function -> modifier STATIC data_type names LPAREN . declarations RPAREN block
    (92) declarations -> . declaration
    (93) declarations -> . declaration COMMA
    (94) declarations -> . declaration COMMA declarations
    (95) declaration -> . data_type ID
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    data_type                      shift and go to state 170
    declarations                   shift and go to state 187
    declaration                    shift and go to state 172
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 175

    (28) function -> modifier STATIC VOID names LPAREN . declarations RPAREN block
    (92) declarations -> . declaration
    (93) declarations -> . declaration COMMA
    (94) declarations -> . declaration COMMA declarations
    (95) declaration -> . data_type ID
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    declarations                   shift and go to state 188
    declaration                    shift and go to state 172
    data_type                      shift and go to state 170
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 176

    (48) while_loop -> WHILE LPAREN logical_expression RPAREN block .
    (49) while_loop -> WHILE LPAREN logical_expression RPAREN block . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (35) if -> . IF LPAREN logical_expression RPAREN block
    (36) if -> . IF LPAREN logical_expression RPAREN block body
    (37) if -> . IF LPAREN logical_expression RPAREN block elseif
    (38) if -> . IF LPAREN logical_expression RPAREN block else
    (44) loop -> . while_loop
    (45) loop -> . loop_for
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
    (73) assignment -> . data_type ID EQUALS expression
    (74) assignment -> . ID EQUALS expression
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (95) declaration -> . data_type ID
    (29) return -> . RETURN ID
    (30) return -> . RETURN type
    (48) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (49) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (46) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (96) modifier -> . PUBLIC
    (97) modifier -> . PRIVATE
    (98) modifier -> . PROTECTED
    (99) modifier -> . INTERNAL
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 48 (while_loop -> WHILE LPAREN logical_expression RPAREN block .)
    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    body                           shift and go to state 189
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 177

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression . SEMICOLON assignment RPAREN block
    (47) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression . SEMICOLON assignment RPAREN block body
    (51) logical_expression -> logical_expression . logical_operator logical_expression
    (60) logical_operator -> . OR
    (61) logical_operator -> . AND
    (62) logical_operator -> . NOT
    (63) logical_operator -> . GREATER_THAN
    (64) logical_operator -> . LESS_THAN
    (65) logical_operator -> . GREATER_EQUALS_THAN
    (66) logical_operator -> . LESS_EQUALS_THAN
    (67) logical_operator -> . EQUALITY

    SEMICOLON       shift and go to state 190
    OR              shift and go to state 145
    AND             shift and go to state 146
    NOT             shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    GREATER_EQUALS_THAN shift and go to state 150
    LESS_EQUALS_THAN shift and go to state 151
    EQUALITY        shift and go to state 152

    logical_operator               shift and go to state 144

state 178

    (70) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID . LSQBRACKET type RSQBRACKET

    LSQBRACKET      shift and go to state 191


state 179

    (36) if -> IF LPAREN logical_expression RPAREN block body .

    RBRACKET        reduce using rule 36 (if -> IF LPAREN logical_expression RPAREN block body .)


state 180

    (37) if -> IF LPAREN logical_expression RPAREN block elseif .

    RBRACKET        reduce using rule 37 (if -> IF LPAREN logical_expression RPAREN block elseif .)


state 181

    (38) if -> IF LPAREN logical_expression RPAREN block else .

    RBRACKET        reduce using rule 38 (if -> IF LPAREN logical_expression RPAREN block else .)


state 182

    (39) elseif -> ELSE . IF LPAREN logical_expression RPAREN block
    (40) elseif -> ELSE . IF LPAREN logical_expression RPAREN block elseif
    (41) elseif -> ELSE . IF LPAREN logical_expression RPAREN block else
    (42) else -> ELSE . block
    (43) else -> ELSE . block body
    (13) block -> . LBRACKET body RBRACKET

    IF              shift and go to state 192
    LBRACKET        shift and go to state 25

    block                          shift and go to state 193

state 183

    (95) declaration -> data_type ID .

    COMMA           reduce using rule 95 (declaration -> data_type ID .)
    RPAREN          reduce using rule 95 (declaration -> data_type ID .)


state 184

    (25) function -> modifier data_type names LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 194

state 185

    (93) declarations -> declaration COMMA .
    (94) declarations -> declaration COMMA . declarations
    (92) declarations -> . declaration
    (93) declarations -> . declaration COMMA
    (94) declarations -> . declaration COMMA declarations
    (95) declaration -> . data_type ID
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    RPAREN          reduce using rule 93 (declarations -> declaration COMMA .)
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    declaration                    shift and go to state 172
    declarations                   shift and go to state 195
    data_type                      shift and go to state 170
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 186

    (26) function -> modifier VOID names LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 196

state 187

    (27) function -> modifier STATIC data_type names LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 197


state 188

    (28) function -> modifier STATIC VOID names LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 198


state 189

    (49) while_loop -> WHILE LPAREN logical_expression RPAREN block body .

    RBRACKET        reduce using rule 49 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)


state 190

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON . assignment RPAREN block
    (47) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON . assignment RPAREN block body
    (73) assignment -> . data_type ID EQUALS expression
    (74) assignment -> . ID EQUALS expression
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 136
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    assignment                     shift and go to state 199
    data_type                      shift and go to state 135
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 191

    (70) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET . type RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type

    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    type                           shift and go to state 200

state 192

    (39) elseif -> ELSE IF . LPAREN logical_expression RPAREN block
    (40) elseif -> ELSE IF . LPAREN logical_expression RPAREN block elseif
    (41) elseif -> ELSE IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 201


state 193

    (42) else -> ELSE block .
    (43) else -> ELSE block . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (35) if -> . IF LPAREN logical_expression RPAREN block
    (36) if -> . IF LPAREN logical_expression RPAREN block body
    (37) if -> . IF LPAREN logical_expression RPAREN block elseif
    (38) if -> . IF LPAREN logical_expression RPAREN block else
    (44) loop -> . while_loop
    (45) loop -> . loop_for
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
    (73) assignment -> . data_type ID EQUALS expression
    (74) assignment -> . ID EQUALS expression
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (95) declaration -> . data_type ID
    (29) return -> . RETURN ID
    (30) return -> . RETURN type
    (48) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (49) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (46) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (96) modifier -> . PUBLIC
    (97) modifier -> . PRIVATE
    (98) modifier -> . PROTECTED
    (99) modifier -> . INTERNAL
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 42 (else -> ELSE block .)
    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    body                           shift and go to state 202
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 194

    (25) function -> modifier data_type names LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)


state 195

    (94) declarations -> declaration COMMA declarations .

    RPAREN          reduce using rule 94 (declarations -> declaration COMMA declarations .)


state 196

    (26) function -> modifier VOID names LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)


state 197

    (27) function -> modifier STATIC data_type names LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 203

state 198

<<<<<<< HEAD
    (28) function -> modifier STATIC VOID names LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 204

state 199

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment . RPAREN block
    (47) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment . RPAREN block body

    RPAREN          shift and go to state 205


state 200

    (70) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type . RSQBRACKET

    RSQBRACKET      shift and go to state 206


state 201

    (39) elseif -> ELSE IF LPAREN . logical_expression RPAREN block
    (40) elseif -> ELSE IF LPAREN . logical_expression RPAREN block elseif
    (41) elseif -> ELSE IF LPAREN . logical_expression RPAREN block else
    (50) logical_expression -> . logical_factor logical_operator logical_expression
    (51) logical_expression -> . logical_expression logical_operator logical_expression
    (52) logical_expression -> . logical_factor
    (53) logical_factor -> . TRUE
    (54) logical_factor -> . FALSE
    (55) logical_factor -> . ID
    (56) logical_factor -> . indexing
    (57) logical_factor -> . type
    (58) logical_factor -> . object_access
    (59) logical_factor -> . LPAREN logical_expression RPAREN
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_expression             shift and go to state 207
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 202

    (43) else -> ELSE block body .

    RBRACKET        reduce using rule 43 (else -> ELSE block body .)


state 203

    (27) function -> modifier STATIC data_type names LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)


state 204

    (28) function -> modifier STATIC VOID names LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)


state 205

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN . block
    (47) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN . block body
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 208

state 206

    (70) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .

    ID              reduce using rule 70 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)
    CLASSOBJECT     reduce using rule 70 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)
    GREATER_THAN    reduce using rule 70 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)


state 207

    (39) elseif -> ELSE IF LPAREN logical_expression . RPAREN block
    (40) elseif -> ELSE IF LPAREN logical_expression . RPAREN block elseif
    (41) elseif -> ELSE IF LPAREN logical_expression . RPAREN block else
    (51) logical_expression -> logical_expression . logical_operator logical_expression
    (60) logical_operator -> . OR
    (61) logical_operator -> . AND
    (62) logical_operator -> . NOT
    (63) logical_operator -> . GREATER_THAN
    (64) logical_operator -> . LESS_THAN
    (65) logical_operator -> . GREATER_EQUALS_THAN
    (66) logical_operator -> . LESS_EQUALS_THAN
    (67) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 209
    OR              shift and go to state 145
    AND             shift and go to state 146
    NOT             shift and go to state 147
    GREATER_THAN    shift and go to state 148
    LESS_THAN       shift and go to state 149
    GREATER_EQUALS_THAN shift and go to state 150
    LESS_EQUALS_THAN shift and go to state 151
    EQUALITY        shift and go to state 152

    logical_operator               shift and go to state 144

state 208

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .
    (47) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block . body
=======
    (56) while_loop -> WHILE LPAREN logical_expression RPAREN block .
    (57) while_loop -> WHILE LPAREN logical_expression RPAREN block . body
>>>>>>> rLevin
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
<<<<<<< HEAD
    (35) if -> . IF LPAREN logical_expression RPAREN block
    (36) if -> . IF LPAREN logical_expression RPAREN block body
    (37) if -> . IF LPAREN logical_expression RPAREN block elseif
    (38) if -> . IF LPAREN logical_expression RPAREN block else
    (44) loop -> . while_loop
    (45) loop -> . loop_for
=======
    (43) if -> . IF LPAREN logical_expression RPAREN block
    (44) if -> . IF LPAREN logical_expression RPAREN block body
    (45) if -> . IF LPAREN logical_expression RPAREN block elseif
    (46) if -> . IF LPAREN logical_expression RPAREN block else
    (52) loop -> . while_loop
    (53) loop -> . loop_for
>>>>>>> rLevin
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
<<<<<<< HEAD
    (73) assignment -> . data_type ID EQUALS expression
    (74) assignment -> . ID EQUALS expression
    (33) expression -> . object_access LPAREN expression RPAREN
    (34) expression -> . object_access LPAREN RPAREN
    (76) expression -> . expression PLUS term
    (77) expression -> . expression MINUS term
    (78) expression -> . term
    (95) declaration -> . data_type ID
    (29) return -> . RETURN ID
    (30) return -> . RETURN type
    (48) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (49) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (46) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (47) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (96) modifier -> . PUBLIC
    (97) modifier -> . PRIVATE
    (98) modifier -> . PROTECTED
    (99) modifier -> . INTERNAL
    (100) data_type -> . primitive
    (101) data_type -> . data_structure
=======
    (29) function -> . function body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (105) declaration -> . data_type ID
    (30) return -> . RETURN ID
    (31) return -> . RETURN type
    (32) return -> . RETURN expression
    (56) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (57) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (54) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
>>>>>>> rLevin
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
<<<<<<< HEAD
    (79) term -> . term TIMES factor
    (80) term -> . term DIVIDE factor
    (81) term -> . factor
    (102) primitive -> . INT
    (103) primitive -> . FLOAT
    (104) primitive -> . BOOL
    (105) primitive -> . BYTE
    (106) primitive -> . CHAR
    (107) primitive -> . SBYTE
    (108) primitive -> . DECIMAL
    (109) primitive -> . DOUBLE
    (110) primitive -> . LONG
    (111) primitive -> . SHORT
    (112) primitive -> . UINT
    (68) data_structure -> . data_structure_list
    (69) data_structure -> . data_structure_array
    (82) factor -> . type
    (83) factor -> . LPAREN expression RPAREN
    (84) factor -> . object_access
    (85) factor -> . ID
    (86) factor -> . indexing
    (70) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (71) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (72) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (87) type -> . FLOAT_TYPE
    (88) type -> . DOUBLE_TYPE
    (89) type -> . DECIMAL_TYPE
    (90) type -> . INTEGER_TYPE
    (91) type -> . MINUS type
    (113) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (114) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 46 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .)
=======
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for INTERNAL resolved as shift
  ! shift/reduce conflict for CLASSOBJECT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SBYTE resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for DECIMAL_TYPE resolved as shift
  ! shift/reduce conflict for INTEGER_TYPE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .)
>>>>>>> rLevin
    IF              shift and go to state 36
    ID              shift and go to state 43
    RETURN          shift and go to state 48
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 55
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LPAREN          shift and go to state 37
    LIST            shift and go to state 71
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

  ! IF              [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! ID              [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! RETURN          [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! WHILE           [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! FOR             [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! PUBLIC          [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! PRIVATE         [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! PROTECTED       [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! INTERNAL        [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! CLASSOBJECT     [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! INT             [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! FLOAT           [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! BOOL            [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! BYTE            [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! CHAR            [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! SBYTE           [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! DECIMAL         [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! DOUBLE          [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! LONG            [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! SHORT           [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! UINT            [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! LPAREN          [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! LIST            [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! FLOAT_TYPE      [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! DOUBLE_TYPE     [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! DECIMAL_TYPE    [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! INTEGER_TYPE    [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]
  ! MINUS           [ reduce using rule 56 (while_loop -> WHILE LPAREN logical_expression RPAREN block .) ]

    body                           shift and go to state 211
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    names                          shift and go to state 42
    indexing                       shift and go to state 44
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    type                           shift and go to state 49
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    factor                         shift and go to state 56
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69
    function_call                  shift and go to state 70

state 199

    (54) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression . SEMICOLON assignment RPAREN block
    (55) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression . SEMICOLON assignment RPAREN block body
    (58) logical_expression -> logical_expression . logical_operator logical_factor
    (67) logical_operator -> . OR
    (68) logical_operator -> . AND
    (69) logical_operator -> . NOT
    (70) logical_operator -> . GREATER_THAN
    (71) logical_operator -> . LESS_THAN
    (72) logical_operator -> . GREATER_EQUALS_THAN
    (73) logical_operator -> . LESS_EQUALS_THAN
    (74) logical_operator -> . EQUALITY

    SEMICOLON       shift and go to state 212
    OR              shift and go to state 163
    AND             shift and go to state 164
    NOT             shift and go to state 165
    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    GREATER_EQUALS_THAN shift and go to state 168
    LESS_EQUALS_THAN shift and go to state 169
    EQUALITY        shift and go to state 170

    logical_operator               shift and go to state 162

state 200

    (77) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID . LSQBRACKET type RSQBRACKET

    LSQBRACKET      shift and go to state 213


state 201

    (44) if -> IF LPAREN logical_expression RPAREN block body .

    RBRACKET        reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    IF              reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    ID              reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    RETURN          reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    WHILE           reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    FOR             reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    PUBLIC          reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    PRIVATE         reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    PROTECTED       reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    INTERNAL        reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    CLASSOBJECT     reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    INT             reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    FLOAT           reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    BOOL            reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    BYTE            reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    CHAR            reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    SBYTE           reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    DECIMAL         reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    DOUBLE          reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    LONG            reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    SHORT           reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    UINT            reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    LPAREN          reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    LIST            reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    FLOAT_TYPE      reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    DOUBLE_TYPE     reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    DECIMAL_TYPE    reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    INTEGER_TYPE    reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)
    MINUS           reduce using rule 44 (if -> IF LPAREN logical_expression RPAREN block body .)


state 202

    (45) if -> IF LPAREN logical_expression RPAREN block elseif .

    RBRACKET        reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    IF              reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    ID              reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    RETURN          reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    WHILE           reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    FOR             reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    PUBLIC          reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    PRIVATE         reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    PROTECTED       reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    INTERNAL        reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    CLASSOBJECT     reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    INT             reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    FLOAT           reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    BOOL            reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    BYTE            reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    CHAR            reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    SBYTE           reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    DECIMAL         reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    DOUBLE          reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    LONG            reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    SHORT           reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    UINT            reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    LPAREN          reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    LIST            reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    FLOAT_TYPE      reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    DOUBLE_TYPE     reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    DECIMAL_TYPE    reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    INTEGER_TYPE    reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)
    MINUS           reduce using rule 45 (if -> IF LPAREN logical_expression RPAREN block elseif .)


state 203

    (46) if -> IF LPAREN logical_expression RPAREN block else .

    RBRACKET        reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    IF              reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    ID              reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    RETURN          reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    WHILE           reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    FOR             reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    PUBLIC          reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    PRIVATE         reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    PROTECTED       reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    INTERNAL        reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    CLASSOBJECT     reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    INT             reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    FLOAT           reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    BOOL            reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    BYTE            reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    CHAR            reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    SBYTE           reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    DECIMAL         reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    DOUBLE          reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    LONG            reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    SHORT           reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    UINT            reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    LPAREN          reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    LIST            reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    FLOAT_TYPE      reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    DOUBLE_TYPE     reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    DECIMAL_TYPE    reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    INTEGER_TYPE    reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)
    MINUS           reduce using rule 46 (if -> IF LPAREN logical_expression RPAREN block else .)


state 204

    (47) elseif -> ELSE . IF LPAREN logical_expression RPAREN block
    (48) elseif -> ELSE . IF LPAREN logical_expression RPAREN block elseif
    (49) elseif -> ELSE . IF LPAREN logical_expression RPAREN block else
    (50) else -> ELSE . block
    (51) else -> ELSE . block body
    (13) block -> . LBRACKET body RBRACKET

    IF              shift and go to state 214
    LBRACKET        shift and go to state 25

    block                          shift and go to state 215

state 205

    (105) declaration -> data_type ID .

    COMMA           reduce using rule 105 (declaration -> data_type ID .)
    RPAREN          reduce using rule 105 (declaration -> data_type ID .)


state 206

    (25) function -> modifier data_type names LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 216

state 207

    (103) declarations -> declaration COMMA .
    (104) declarations -> declaration COMMA . declarations
    (102) declarations -> . declaration
    (103) declarations -> . declaration COMMA
    (104) declarations -> . declaration COMMA declarations
    (105) declaration -> . data_type ID
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    RPAREN          reduce using rule 103 (declarations -> declaration COMMA .)
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89

    declaration                    shift and go to state 192
    declarations                   shift and go to state 217
    data_type                      shift and go to state 190
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 208

    (26) function -> modifier VOID names LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 218

state 209

    (27) function -> modifier STATIC data_type names LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 219


state 210

    (28) function -> modifier STATIC VOID names LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 220


state 211

    (57) while_loop -> WHILE LPAREN logical_expression RPAREN block body .

    RBRACKET        reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    IF              reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    ID              reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    RETURN          reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    WHILE           reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    FOR             reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    PUBLIC          reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    PRIVATE         reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    PROTECTED       reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    INTERNAL        reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    CLASSOBJECT     reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    INT             reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    FLOAT           reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    BOOL            reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    BYTE            reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    CHAR            reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    SBYTE           reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    DECIMAL         reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    DOUBLE          reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    LONG            reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    SHORT           reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    UINT            reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    LPAREN          reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    LIST            reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    FLOAT_TYPE      reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    DOUBLE_TYPE     reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    DECIMAL_TYPE    reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    INTEGER_TYPE    reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)
    MINUS           reduce using rule 57 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)


state 212

    (54) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON . assignment RPAREN block
    (55) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON . assignment RPAREN block body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 153
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LIST            shift and go to state 71
    CLASSOBJECT     shift and go to state 89

    assignment                     shift and go to state 221
    data_type                      shift and go to state 152
    indexing                       shift and go to state 154
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69

state 213

    (77) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET . type RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type

    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

    type                           shift and go to state 222

state 214

    (47) elseif -> ELSE IF . LPAREN logical_expression RPAREN block
    (48) elseif -> ELSE IF . LPAREN logical_expression RPAREN block elseif
    (49) elseif -> ELSE IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 223


state 215

    (50) else -> ELSE block .
    (51) else -> ELSE block . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (43) if -> . IF LPAREN logical_expression RPAREN block
    (44) if -> . IF LPAREN logical_expression RPAREN block body
    (45) if -> . IF LPAREN logical_expression RPAREN block elseif
    (46) if -> . IF LPAREN logical_expression RPAREN block else
    (52) loop -> . while_loop
    (53) loop -> . loop_for
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
    (29) function -> . function body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (105) declaration -> . data_type ID
    (30) return -> . RETURN ID
    (31) return -> . RETURN type
    (32) return -> . RETURN expression
    (56) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (57) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (54) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for INTERNAL resolved as shift
  ! shift/reduce conflict for CLASSOBJECT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SBYTE resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for DECIMAL_TYPE resolved as shift
  ! shift/reduce conflict for INTEGER_TYPE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 50 (else -> ELSE block .)
    IF              shift and go to state 36
    ID              shift and go to state 43
    RETURN          shift and go to state 48
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 55
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LPAREN          shift and go to state 37
    LIST            shift and go to state 71
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

  ! IF              [ reduce using rule 50 (else -> ELSE block .) ]
  ! ID              [ reduce using rule 50 (else -> ELSE block .) ]
  ! RETURN          [ reduce using rule 50 (else -> ELSE block .) ]
  ! WHILE           [ reduce using rule 50 (else -> ELSE block .) ]
  ! FOR             [ reduce using rule 50 (else -> ELSE block .) ]
  ! PUBLIC          [ reduce using rule 50 (else -> ELSE block .) ]
  ! PRIVATE         [ reduce using rule 50 (else -> ELSE block .) ]
  ! PROTECTED       [ reduce using rule 50 (else -> ELSE block .) ]
  ! INTERNAL        [ reduce using rule 50 (else -> ELSE block .) ]
  ! CLASSOBJECT     [ reduce using rule 50 (else -> ELSE block .) ]
  ! INT             [ reduce using rule 50 (else -> ELSE block .) ]
  ! FLOAT           [ reduce using rule 50 (else -> ELSE block .) ]
  ! BOOL            [ reduce using rule 50 (else -> ELSE block .) ]
  ! BYTE            [ reduce using rule 50 (else -> ELSE block .) ]
  ! CHAR            [ reduce using rule 50 (else -> ELSE block .) ]
  ! SBYTE           [ reduce using rule 50 (else -> ELSE block .) ]
  ! DECIMAL         [ reduce using rule 50 (else -> ELSE block .) ]
  ! DOUBLE          [ reduce using rule 50 (else -> ELSE block .) ]
  ! LONG            [ reduce using rule 50 (else -> ELSE block .) ]
  ! SHORT           [ reduce using rule 50 (else -> ELSE block .) ]
  ! UINT            [ reduce using rule 50 (else -> ELSE block .) ]
  ! LPAREN          [ reduce using rule 50 (else -> ELSE block .) ]
  ! LIST            [ reduce using rule 50 (else -> ELSE block .) ]
  ! FLOAT_TYPE      [ reduce using rule 50 (else -> ELSE block .) ]
  ! DOUBLE_TYPE     [ reduce using rule 50 (else -> ELSE block .) ]
  ! DECIMAL_TYPE    [ reduce using rule 50 (else -> ELSE block .) ]
  ! INTEGER_TYPE    [ reduce using rule 50 (else -> ELSE block .) ]
  ! MINUS           [ reduce using rule 50 (else -> ELSE block .) ]

    body                           shift and go to state 224
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    names                          shift and go to state 42
    indexing                       shift and go to state 44
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    type                           shift and go to state 49
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    factor                         shift and go to state 56
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69
    function_call                  shift and go to state 70

state 216

    (25) function -> modifier data_type names LPAREN declarations RPAREN block .

    IF              reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    ID              reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    RETURN          reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    WHILE           reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    FOR             reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    PUBLIC          reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    PRIVATE         reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    PROTECTED       reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    INTERNAL        reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    CLASSOBJECT     reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    INT             reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    FLOAT           reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    BOOL            reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    BYTE            reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    CHAR            reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    SBYTE           reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    DECIMAL         reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    DOUBLE          reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    LONG            reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    SHORT           reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    UINT            reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    LPAREN          reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    LIST            reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    FLOAT_TYPE      reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    DOUBLE_TYPE     reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    DECIMAL_TYPE    reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    INTEGER_TYPE    reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    MINUS           reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)
    RBRACKET        reduce using rule 25 (function -> modifier data_type names LPAREN declarations RPAREN block .)


state 217

    (104) declarations -> declaration COMMA declarations .

    RPAREN          reduce using rule 104 (declarations -> declaration COMMA declarations .)


state 218

    (26) function -> modifier VOID names LPAREN declarations RPAREN block .

    IF              reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    ID              reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    RETURN          reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    WHILE           reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    FOR             reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    PUBLIC          reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    PRIVATE         reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    PROTECTED       reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    INTERNAL        reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    CLASSOBJECT     reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    INT             reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    FLOAT           reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    BOOL            reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    BYTE            reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    CHAR            reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    SBYTE           reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    DECIMAL         reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    DOUBLE          reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    LONG            reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    SHORT           reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    UINT            reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    LPAREN          reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    LIST            reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    FLOAT_TYPE      reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    DOUBLE_TYPE     reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    DECIMAL_TYPE    reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    INTEGER_TYPE    reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    MINUS           reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)
    RBRACKET        reduce using rule 26 (function -> modifier VOID names LPAREN declarations RPAREN block .)


state 219

    (27) function -> modifier STATIC data_type names LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 225

state 220

    (28) function -> modifier STATIC VOID names LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 226

state 221

    (54) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment . RPAREN block
    (55) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment . RPAREN block body

    RPAREN          shift and go to state 227


state 222

    (77) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type . RSQBRACKET

    RSQBRACKET      shift and go to state 228


state 223

    (47) elseif -> ELSE IF LPAREN . logical_expression RPAREN block
    (48) elseif -> ELSE IF LPAREN . logical_expression RPAREN block elseif
    (49) elseif -> ELSE IF LPAREN . logical_expression RPAREN block else
    (58) logical_expression -> . logical_expression logical_operator logical_factor
    (59) logical_expression -> . logical_factor
    (60) logical_factor -> . TRUE
    (61) logical_factor -> . FALSE
    (62) logical_factor -> . ID
    (63) logical_factor -> . indexing
    (64) logical_factor -> . type
    (65) logical_factor -> . object_access
    (66) logical_factor -> . LPAREN logical_expression RPAREN
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120
    LPAREN          shift and go to state 115
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47
    CLASSOBJECT     shift and go to state 124

    logical_expression             shift and go to state 229
    logical_factor                 shift and go to state 117
    indexing                       shift and go to state 121
    type                           shift and go to state 122
    object_access                  shift and go to state 123

state 224

    (51) else -> ELSE block body .

    IF              reduce using rule 51 (else -> ELSE block body .)
    ID              reduce using rule 51 (else -> ELSE block body .)
    RETURN          reduce using rule 51 (else -> ELSE block body .)
    WHILE           reduce using rule 51 (else -> ELSE block body .)
    FOR             reduce using rule 51 (else -> ELSE block body .)
    PUBLIC          reduce using rule 51 (else -> ELSE block body .)
    PRIVATE         reduce using rule 51 (else -> ELSE block body .)
    PROTECTED       reduce using rule 51 (else -> ELSE block body .)
    INTERNAL        reduce using rule 51 (else -> ELSE block body .)
    CLASSOBJECT     reduce using rule 51 (else -> ELSE block body .)
    INT             reduce using rule 51 (else -> ELSE block body .)
    FLOAT           reduce using rule 51 (else -> ELSE block body .)
    BOOL            reduce using rule 51 (else -> ELSE block body .)
    BYTE            reduce using rule 51 (else -> ELSE block body .)
    CHAR            reduce using rule 51 (else -> ELSE block body .)
    SBYTE           reduce using rule 51 (else -> ELSE block body .)
    DECIMAL         reduce using rule 51 (else -> ELSE block body .)
    DOUBLE          reduce using rule 51 (else -> ELSE block body .)
    LONG            reduce using rule 51 (else -> ELSE block body .)
    SHORT           reduce using rule 51 (else -> ELSE block body .)
    UINT            reduce using rule 51 (else -> ELSE block body .)
    LPAREN          reduce using rule 51 (else -> ELSE block body .)
    LIST            reduce using rule 51 (else -> ELSE block body .)
    FLOAT_TYPE      reduce using rule 51 (else -> ELSE block body .)
    DOUBLE_TYPE     reduce using rule 51 (else -> ELSE block body .)
    DECIMAL_TYPE    reduce using rule 51 (else -> ELSE block body .)
    INTEGER_TYPE    reduce using rule 51 (else -> ELSE block body .)
    MINUS           reduce using rule 51 (else -> ELSE block body .)
    RBRACKET        reduce using rule 51 (else -> ELSE block body .)


state 225

    (27) function -> modifier STATIC data_type names LPAREN declarations RPAREN block .

    IF              reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    ID              reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    RETURN          reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    WHILE           reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    FOR             reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    PUBLIC          reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    PRIVATE         reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    PROTECTED       reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    INTERNAL        reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    CLASSOBJECT     reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    INT             reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    FLOAT           reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    BOOL            reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    BYTE            reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    CHAR            reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    SBYTE           reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    DECIMAL         reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    DOUBLE          reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    LONG            reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    SHORT           reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    UINT            reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    LPAREN          reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    LIST            reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    FLOAT_TYPE      reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    DOUBLE_TYPE     reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    DECIMAL_TYPE    reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    INTEGER_TYPE    reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    MINUS           reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)
    RBRACKET        reduce using rule 27 (function -> modifier STATIC data_type names LPAREN declarations RPAREN block .)


state 226

    (28) function -> modifier STATIC VOID names LPAREN declarations RPAREN block .

    IF              reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    ID              reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    RETURN          reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    WHILE           reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    FOR             reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    PUBLIC          reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    PRIVATE         reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    PROTECTED       reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    INTERNAL        reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    CLASSOBJECT     reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    INT             reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    FLOAT           reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    BOOL            reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    BYTE            reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    CHAR            reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    SBYTE           reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    DECIMAL         reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    DOUBLE          reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    LONG            reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    SHORT           reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    UINT            reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    LPAREN          reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    LIST            reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    FLOAT_TYPE      reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    DOUBLE_TYPE     reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    DECIMAL_TYPE    reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    INTEGER_TYPE    reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    MINUS           reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)
    RBRACKET        reduce using rule 28 (function -> modifier STATIC VOID names LPAREN declarations RPAREN block .)


state 227

    (54) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN . block
    (55) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN . block body
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 230

state 228

    (77) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .

    ID              reduce using rule 77 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)
    CLASSOBJECT     reduce using rule 77 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)
    GREATER_THAN    reduce using rule 77 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)


state 229

    (47) elseif -> ELSE IF LPAREN logical_expression . RPAREN block
    (48) elseif -> ELSE IF LPAREN logical_expression . RPAREN block elseif
    (49) elseif -> ELSE IF LPAREN logical_expression . RPAREN block else
    (58) logical_expression -> logical_expression . logical_operator logical_factor
    (67) logical_operator -> . OR
    (68) logical_operator -> . AND
    (69) logical_operator -> . NOT
    (70) logical_operator -> . GREATER_THAN
    (71) logical_operator -> . LESS_THAN
    (72) logical_operator -> . GREATER_EQUALS_THAN
    (73) logical_operator -> . LESS_EQUALS_THAN
    (74) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 231
    OR              shift and go to state 163
    AND             shift and go to state 164
    NOT             shift and go to state 165
    GREATER_THAN    shift and go to state 166
    LESS_THAN       shift and go to state 167
    GREATER_EQUALS_THAN shift and go to state 168
    LESS_EQUALS_THAN shift and go to state 169
    EQUALITY        shift and go to state 170

    logical_operator               shift and go to state 162

state 230

    (54) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .
    (55) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (43) if -> . IF LPAREN logical_expression RPAREN block
    (44) if -> . IF LPAREN logical_expression RPAREN block body
    (45) if -> . IF LPAREN logical_expression RPAREN block elseif
    (46) if -> . IF LPAREN logical_expression RPAREN block else
    (52) loop -> . while_loop
    (53) loop -> . loop_for
    (25) function -> . modifier data_type names LPAREN declarations RPAREN block
    (26) function -> . modifier VOID names LPAREN declarations RPAREN block
    (27) function -> . modifier STATIC data_type names LPAREN declarations RPAREN block
    (28) function -> . modifier STATIC VOID names LPAREN declarations RPAREN block
    (29) function -> . function body
    (80) assignment -> . data_type ID EQUALS expression
    (81) assignment -> . ID EQUALS expression
    (82) assignment -> . indexing EQUALS expression
    (83) assignment -> . ID PLUSONE
    (41) expression -> . object_access LPAREN expression RPAREN
    (42) expression -> . object_access LPAREN RPAREN
    (85) expression -> . expression PLUS term
    (86) expression -> . expression MINUS term
    (87) expression -> . term
    (105) declaration -> . data_type ID
    (30) return -> . RETURN ID
    (31) return -> . RETURN type
    (32) return -> . RETURN expression
    (56) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (57) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (54) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (55) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (106) modifier -> . PUBLIC
    (107) modifier -> . PRIVATE
    (108) modifier -> . PROTECTED
    (109) modifier -> . INTERNAL
    (110) data_type -> . primitive
    (111) data_type -> . data_structure
    (123) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (124) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (125) indexing -> . ID LSQBRACKET expression RSQBRACKET
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) term -> . term TIMES factor
    (89) term -> . term DIVIDE factor
    (90) term -> . factor
    (112) primitive -> . INT
    (113) primitive -> . FLOAT
    (114) primitive -> . BOOL
    (115) primitive -> . BYTE
    (116) primitive -> . CHAR
    (117) primitive -> . SBYTE
    (118) primitive -> . DECIMAL
    (119) primitive -> . DOUBLE
    (120) primitive -> . LONG
    (121) primitive -> . SHORT
    (122) primitive -> . UINT
    (75) data_structure -> . data_structure_list
    (76) data_structure -> . data_structure_array
    (91) factor -> . type
    (92) factor -> . LPAREN expression RPAREN
    (93) factor -> . object_access
    (94) factor -> . ID
    (95) factor -> . indexing
    (96) factor -> . function_call
    (77) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (78) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (79) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (97) type -> . FLOAT_TYPE
    (98) type -> . DOUBLE_TYPE
    (99) type -> . DECIMAL_TYPE
    (100) type -> . INTEGER_TYPE
    (101) type -> . MINUS type
    (33) function_call -> . names LPAREN RPAREN
    (34) function_call -> . names LPAREN arguments RPAREN
    (23) names -> . ID
    (24) names -> . CLASSOBJECT

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for INTERNAL resolved as shift
  ! shift/reduce conflict for CLASSOBJECT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for SBYTE resolved as shift
  ! shift/reduce conflict for DECIMAL resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for UINT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for FLOAT_TYPE resolved as shift
  ! shift/reduce conflict for DOUBLE_TYPE resolved as shift
  ! shift/reduce conflict for DECIMAL_TYPE resolved as shift
  ! shift/reduce conflict for INTEGER_TYPE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .)
    IF              shift and go to state 36
    ID              shift and go to state 43
    RETURN          shift and go to state 48
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 55
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    BOOL            shift and go to state 59
    BYTE            shift and go to state 60
    CHAR            shift and go to state 61
    SBYTE           shift and go to state 62
    DECIMAL         shift and go to state 63
    DOUBLE          shift and go to state 64
    LONG            shift and go to state 65
    SHORT           shift and go to state 66
    UINT            shift and go to state 67
    LPAREN          shift and go to state 37
    LIST            shift and go to state 71
    FLOAT_TYPE      shift and go to state 72
    DOUBLE_TYPE     shift and go to state 73
    DECIMAL_TYPE    shift and go to state 74
    INTEGER_TYPE    shift and go to state 54
    MINUS           shift and go to state 47

  ! IF              [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! ID              [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! RETURN          [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! WHILE           [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! FOR             [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! PUBLIC          [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! PRIVATE         [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! PROTECTED       [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! INTERNAL        [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! CLASSOBJECT     [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! INT             [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! FLOAT           [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! BOOL            [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! BYTE            [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! CHAR            [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! SBYTE           [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! DECIMAL         [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! DOUBLE          [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! LONG            [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! SHORT           [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! UINT            [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! LPAREN          [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! LIST            [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! FLOAT_TYPE      [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! DOUBLE_TYPE     [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! DECIMAL_TYPE    [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! INTEGER_TYPE    [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]
  ! MINUS           [ reduce using rule 54 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .) ]

    assignment                     shift and go to state 32
<<<<<<< HEAD
    body                           shift and go to state 210
=======
    body                           shift and go to state 232
>>>>>>> rLevin
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    names                          shift and go to state 42
    indexing                       shift and go to state 44
    object_access                  shift and go to state 45
    term                           shift and go to state 46
    type                           shift and go to state 49
    primitive                      shift and go to state 52
    data_structure                 shift and go to state 53
    factor                         shift and go to state 56
    data_structure_list            shift and go to state 68
    data_structure_array           shift and go to state 69
    function_call                  shift and go to state 70

<<<<<<< HEAD
state 209

    (39) elseif -> ELSE IF LPAREN logical_expression RPAREN . block
    (40) elseif -> ELSE IF LPAREN logical_expression RPAREN . block elseif
    (41) elseif -> ELSE IF LPAREN logical_expression RPAREN . block else
=======
state 231

    (47) elseif -> ELSE IF LPAREN logical_expression RPAREN . block
    (48) elseif -> ELSE IF LPAREN logical_expression RPAREN . block elseif
    (49) elseif -> ELSE IF LPAREN logical_expression RPAREN . block else
>>>>>>> rLevin
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

<<<<<<< HEAD
    block                          shift and go to state 211

state 210

    (47) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .

    RBRACKET        reduce using rule 47 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)


state 211

    (39) elseif -> ELSE IF LPAREN logical_expression RPAREN block .
    (40) elseif -> ELSE IF LPAREN logical_expression RPAREN block . elseif
    (41) elseif -> ELSE IF LPAREN logical_expression RPAREN block . else
    (39) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (40) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (41) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (42) else -> . ELSE block
    (43) else -> . ELSE block body

    RBRACKET        reduce using rule 39 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 182

    elseif                         shift and go to state 212
    else                           shift and go to state 213

state 212

    (40) elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .

    RBRACKET        reduce using rule 40 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)


state 213

    (41) elseif -> ELSE IF LPAREN logical_expression RPAREN block else .

    RBRACKET        reduce using rule 41 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
=======
    block                          shift and go to state 233

state 232

    (55) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .

    RBRACKET        reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    IF              reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    ID              reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    RETURN          reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    WHILE           reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    FOR             reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    PUBLIC          reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    PRIVATE         reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    PROTECTED       reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    INTERNAL        reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    CLASSOBJECT     reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    INT             reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    FLOAT           reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    BOOL            reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    BYTE            reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    CHAR            reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    SBYTE           reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    DECIMAL         reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    DOUBLE          reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    LONG            reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    SHORT           reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    UINT            reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    LPAREN          reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    LIST            reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    FLOAT_TYPE      reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    DOUBLE_TYPE     reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    DECIMAL_TYPE    reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    INTEGER_TYPE    reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)
    MINUS           reduce using rule 55 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)


state 233

    (47) elseif -> ELSE IF LPAREN logical_expression RPAREN block .
    (48) elseif -> ELSE IF LPAREN logical_expression RPAREN block . elseif
    (49) elseif -> ELSE IF LPAREN logical_expression RPAREN block . else
    (47) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (48) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (49) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (50) else -> . ELSE block
    (51) else -> . ELSE block body

    IF              reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    ID              reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    RETURN          reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    WHILE           reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    FOR             reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    PUBLIC          reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    PRIVATE         reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    PROTECTED       reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    INTERNAL        reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    CLASSOBJECT     reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    INT             reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    FLOAT           reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    BOOL            reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    BYTE            reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    CHAR            reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    SBYTE           reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    DECIMAL         reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    DOUBLE          reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    LONG            reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    SHORT           reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    UINT            reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    LPAREN          reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    LIST            reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    FLOAT_TYPE      reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    DOUBLE_TYPE     reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    DECIMAL_TYPE    reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    INTEGER_TYPE    reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    MINUS           reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    RBRACKET        reduce using rule 47 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 204

    elseif                         shift and go to state 234
    else                           shift and go to state 235

state 234

    (48) elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .

    IF              reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    ID              reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    RETURN          reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    WHILE           reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    FOR             reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    PUBLIC          reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    PRIVATE         reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    PROTECTED       reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    INTERNAL        reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    CLASSOBJECT     reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    INT             reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    FLOAT           reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    BOOL            reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    BYTE            reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    CHAR            reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    SBYTE           reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    DECIMAL         reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    DOUBLE          reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    LONG            reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    SHORT           reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    UINT            reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    LPAREN          reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    LIST            reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    FLOAT_TYPE      reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    DOUBLE_TYPE     reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    DECIMAL_TYPE    reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    INTEGER_TYPE    reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    MINUS           reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)
    RBRACKET        reduce using rule 48 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)


state 235

    (49) elseif -> ELSE IF LPAREN logical_expression RPAREN block else .

    IF              reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    ID              reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    RETURN          reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    WHILE           reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    FOR             reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    PUBLIC          reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    PRIVATE         reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    PROTECTED       reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    INTERNAL        reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    CLASSOBJECT     reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    INT             reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    FLOAT           reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    BOOL            reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    BYTE            reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    CHAR            reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    SBYTE           reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    DECIMAL         reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    DOUBLE          reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    LONG            reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    SHORT           reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    UINT            reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    LPAREN          reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    LIST            reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    FLOAT_TYPE      reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    DOUBLE_TYPE     reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    DECIMAL_TYPE    reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    INTEGER_TYPE    reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    MINUS           reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
    RBRACKET        reduce using rule 49 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)
>>>>>>> rLevin

WARNING: 
WARNING: Conflicts:
WARNING: 
<<<<<<< HEAD
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUALITY in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 168 resolved as shift
WARNING: shift/reduce conflict for AND in state 168 resolved as shift
WARNING: shift/reduce conflict for NOT in state 168 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 168 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 168 resolved as shift
=======
WARNING: shift/reduce conflict for IF in state 31 resolved as shift
WARNING: shift/reduce conflict for ID in state 31 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 31 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 31 resolved as shift
WARNING: shift/reduce conflict for FOR in state 31 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 31 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 31 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 31 resolved as shift
WARNING: shift/reduce conflict for INTERNAL in state 31 resolved as shift
WARNING: shift/reduce conflict for CLASSOBJECT in state 31 resolved as shift
WARNING: shift/reduce conflict for INT in state 31 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 31 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 31 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 31 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 31 resolved as shift
WARNING: shift/reduce conflict for SBYTE in state 31 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 31 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 31 resolved as shift
WARNING: shift/reduce conflict for LONG in state 31 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 31 resolved as shift
WARNING: shift/reduce conflict for UINT in state 31 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 31 resolved as shift
WARNING: shift/reduce conflict for LIST in state 31 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 31 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 31 resolved as shift
WARNING: shift/reduce conflict for DECIMAL_TYPE in state 31 resolved as shift
WARNING: shift/reduce conflict for INTEGER_TYPE in state 31 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 31 resolved as shift
WARNING: shift/reduce conflict for IF in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 77 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 77 resolved as shift
WARNING: shift/reduce conflict for FOR in state 77 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 77 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 77 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 77 resolved as shift
WARNING: shift/reduce conflict for INTERNAL in state 77 resolved as shift
WARNING: shift/reduce conflict for CLASSOBJECT in state 77 resolved as shift
WARNING: shift/reduce conflict for INT in state 77 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 77 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 77 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 77 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 77 resolved as shift
WARNING: shift/reduce conflict for SBYTE in state 77 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 77 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 77 resolved as shift
WARNING: shift/reduce conflict for LONG in state 77 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 77 resolved as shift
WARNING: shift/reduce conflict for UINT in state 77 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 77 resolved as shift
WARNING: shift/reduce conflict for LIST in state 77 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 77 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 77 resolved as shift
WARNING: shift/reduce conflict for DECIMAL_TYPE in state 77 resolved as shift
WARNING: shift/reduce conflict for INTEGER_TYPE in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for RSQBRACKET in state 140 resolved as shift
WARNING: shift/reduce conflict for RSQBRACKET in state 141 resolved as shift
WARNING: shift/reduce conflict for IF in state 188 resolved as shift
WARNING: shift/reduce conflict for ID in state 188 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 188 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 188 resolved as shift
WARNING: shift/reduce conflict for FOR in state 188 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 188 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 188 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 188 resolved as shift
WARNING: shift/reduce conflict for INTERNAL in state 188 resolved as shift
WARNING: shift/reduce conflict for CLASSOBJECT in state 188 resolved as shift
WARNING: shift/reduce conflict for INT in state 188 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 188 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 188 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 188 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 188 resolved as shift
WARNING: shift/reduce conflict for SBYTE in state 188 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 188 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 188 resolved as shift
WARNING: shift/reduce conflict for LONG in state 188 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 188 resolved as shift
WARNING: shift/reduce conflict for UINT in state 188 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 188 resolved as shift
WARNING: shift/reduce conflict for LIST in state 188 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 188 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 188 resolved as shift
WARNING: shift/reduce conflict for DECIMAL_TYPE in state 188 resolved as shift
WARNING: shift/reduce conflict for INTEGER_TYPE in state 188 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 188 resolved as shift
WARNING: shift/reduce conflict for IF in state 198 resolved as shift
WARNING: shift/reduce conflict for ID in state 198 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 198 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 198 resolved as shift
WARNING: shift/reduce conflict for FOR in state 198 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 198 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 198 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 198 resolved as shift
WARNING: shift/reduce conflict for INTERNAL in state 198 resolved as shift
WARNING: shift/reduce conflict for CLASSOBJECT in state 198 resolved as shift
WARNING: shift/reduce conflict for INT in state 198 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 198 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 198 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 198 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 198 resolved as shift
WARNING: shift/reduce conflict for SBYTE in state 198 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 198 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 198 resolved as shift
WARNING: shift/reduce conflict for LONG in state 198 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 198 resolved as shift
WARNING: shift/reduce conflict for UINT in state 198 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 198 resolved as shift
WARNING: shift/reduce conflict for LIST in state 198 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 198 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 198 resolved as shift
WARNING: shift/reduce conflict for DECIMAL_TYPE in state 198 resolved as shift
WARNING: shift/reduce conflict for INTEGER_TYPE in state 198 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 198 resolved as shift
WARNING: shift/reduce conflict for IF in state 215 resolved as shift
WARNING: shift/reduce conflict for ID in state 215 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 215 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 215 resolved as shift
WARNING: shift/reduce conflict for FOR in state 215 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 215 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 215 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 215 resolved as shift
WARNING: shift/reduce conflict for INTERNAL in state 215 resolved as shift
WARNING: shift/reduce conflict for CLASSOBJECT in state 215 resolved as shift
WARNING: shift/reduce conflict for INT in state 215 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 215 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 215 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 215 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 215 resolved as shift
WARNING: shift/reduce conflict for SBYTE in state 215 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 215 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 215 resolved as shift
WARNING: shift/reduce conflict for LONG in state 215 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 215 resolved as shift
WARNING: shift/reduce conflict for UINT in state 215 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 215 resolved as shift
WARNING: shift/reduce conflict for LIST in state 215 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 215 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 215 resolved as shift
WARNING: shift/reduce conflict for DECIMAL_TYPE in state 215 resolved as shift
WARNING: shift/reduce conflict for INTEGER_TYPE in state 215 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 215 resolved as shift
WARNING: shift/reduce conflict for IF in state 230 resolved as shift
WARNING: shift/reduce conflict for ID in state 230 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 230 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 230 resolved as shift
WARNING: shift/reduce conflict for FOR in state 230 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 230 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 230 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 230 resolved as shift
WARNING: shift/reduce conflict for INTERNAL in state 230 resolved as shift
WARNING: shift/reduce conflict for CLASSOBJECT in state 230 resolved as shift
WARNING: shift/reduce conflict for INT in state 230 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 230 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 230 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 230 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 230 resolved as shift
WARNING: shift/reduce conflict for SBYTE in state 230 resolved as shift
WARNING: shift/reduce conflict for DECIMAL in state 230 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 230 resolved as shift
WARNING: shift/reduce conflict for LONG in state 230 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 230 resolved as shift
WARNING: shift/reduce conflict for UINT in state 230 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 230 resolved as shift
WARNING: shift/reduce conflict for LIST in state 230 resolved as shift
WARNING: shift/reduce conflict for FLOAT_TYPE in state 230 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_TYPE in state 230 resolved as shift
WARNING: shift/reduce conflict for DECIMAL_TYPE in state 230 resolved as shift
WARNING: shift/reduce conflict for INTEGER_TYPE in state 230 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 230 resolved as shift
WARNING: reduce/reduce conflict in state 101 resolved using rule (return -> RETURN ID)
WARNING: rejected rule (factor -> ID) in state 101
WARNING: reduce/reduce conflict in state 102 resolved using rule (return -> RETURN type)
WARNING: rejected rule (factor -> type) in state 102
WARNING: reduce/reduce conflict in state 137 resolved using rule (names -> ID)
WARNING: rejected rule (factor -> ID) in state 137
>>>>>>> rLevin
