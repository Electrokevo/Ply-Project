Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BOOL
    BYTE
    CHAR
    CHARACTER
    CLASS
    CLASSOBJECT
    COMMA
    DECIMAL
    DIVIDE_EQUAL
    DO
    DOT
    DOUBLE
    ELSE
    FILE
    FLOAT
    FOR
    GREATER_EQUALS_THAN
    GREATER_THAN
    IF
    INT
    INTERNAL
    LBRACKET
    LESS_EQUALS_THAN
    LESS_THAN
    LONG
    LSQBRACKET
    MINUS_EQUAL
    MODULE
    MODULE_EQUAL
    NEW
    NINT
    NOT
    NUINT
    OR
    PLUS_EQUAL
    PRIVATE
    PROTECTED
    PUBLIC
    RBRACKET
    RETURN
    RSQBRACKET
    SBYTE
    SHORT
    STRING
    THEN
    TIMES_EQUAL
    UINT
    ULONG
    USHORT
    USING
    VAR
    VOID
    WHILE

Grammar

Rule 0     S' -> program
Rule 1     program -> assignments
Rule 2     assignments -> assignments assignment
Rule 3     assignments -> assignment
Rule 4     assignment -> ID EQUALS expression SEMICOLON
Rule 5     expression -> expression PLUS term
Rule 6     expression -> expression MINUS term
Rule 7     expression -> term
Rule 8     term -> term TIMES factor
Rule 9     term -> term DIVIDE factor
Rule 10    term -> factor
Rule 11    factor -> INTEGER_TYPE
Rule 12    factor -> FLOAT_TYPE
Rule 13    factor -> DOUBLE_TYPE
Rule 14    factor -> DECIMAL_TYPE
Rule 15    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 
BOOL                 : 
BYTE                 : 
CHAR                 : 
CHARACTER            : 
CLASS                : 
CLASSOBJECT          : 
COMMA                : 
DECIMAL              : 
DECIMAL_TYPE         : 14
DIVIDE               : 9
DIVIDE_EQUAL         : 
DO                   : 
DOT                  : 
DOUBLE               : 
DOUBLE_TYPE          : 13
ELSE                 : 
EQUALS               : 4
FILE                 : 
FLOAT                : 
FLOAT_TYPE           : 12
FOR                  : 
GREATER_EQUALS_THAN  : 
GREATER_THAN         : 
ID                   : 4
IF                   : 
INT                  : 
INTEGER_TYPE         : 11
INTERNAL             : 
LBRACKET             : 
LESS_EQUALS_THAN     : 
LESS_THAN            : 
LONG                 : 
LPAREN               : 15
LSQBRACKET           : 
MINUS                : 6
MINUS_EQUAL          : 
MODULE               : 
MODULE_EQUAL         : 
NEW                  : 
NINT                 : 
NOT                  : 
NUINT                : 
OR                   : 
PLUS                 : 5
PLUS_EQUAL           : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
RBRACKET             : 
RETURN               : 
RPAREN               : 15
RSQBRACKET           : 
SBYTE                : 
SEMICOLON            : 4
SHORT                : 
STRING               : 
THEN                 : 
TIMES                : 8
TIMES_EQUAL          : 
UINT                 : 
ULONG                : 
USHORT               : 
USING                : 
VAR                  : 
VOID                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 2 3
assignments          : 1 2
expression           : 4 5 6 15
factor               : 8 9 10
program              : 0
term                 : 5 6 7 8 9

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . assignments
    (2) assignments -> . assignments assignment
    (3) assignments -> . assignment
    (4) assignment -> . ID EQUALS expression SEMICOLON

    ID              shift and go to state 4

    program                        shift and go to state 1
    assignments                    shift and go to state 2
    assignment                     shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> assignments .
    (2) assignments -> assignments . assignment
    (4) assignment -> . ID EQUALS expression SEMICOLON

    $end            reduce using rule 1 (program -> assignments .)
    ID              shift and go to state 4

    assignment                     shift and go to state 5

state 3

    (3) assignments -> assignment .

    ID              reduce using rule 3 (assignments -> assignment .)
    $end            reduce using rule 3 (assignments -> assignment .)


state 4

    (4) assignment -> ID . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 6


state 5

    (2) assignments -> assignments assignment .

    ID              reduce using rule 2 (assignments -> assignments assignment .)
    $end            reduce using rule 2 (assignments -> assignments assignment .)


state 6

    (4) assignment -> ID EQUALS . expression SEMICOLON
    (5) expression -> . expression PLUS term
    (6) expression -> . expression MINUS term
    (7) expression -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . INTEGER_TYPE
    (12) factor -> . FLOAT_TYPE
    (13) factor -> . DOUBLE_TYPE
    (14) factor -> . DECIMAL_TYPE
    (15) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 10
    FLOAT_TYPE      shift and go to state 11
    DOUBLE_TYPE     shift and go to state 12
    DECIMAL_TYPE    shift and go to state 13
    LPAREN          shift and go to state 14

    expression                     shift and go to state 7
    term                           shift and go to state 8
    factor                         shift and go to state 9

state 7

    (4) assignment -> ID EQUALS expression . SEMICOLON
    (5) expression -> expression . PLUS term
    (6) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 8

    (7) expression -> term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 7 (expression -> term .)
    PLUS            reduce using rule 7 (expression -> term .)
    MINUS           reduce using rule 7 (expression -> term .)
    RPAREN          reduce using rule 7 (expression -> term .)
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 19


state 9

    (10) term -> factor .

    TIMES           reduce using rule 10 (term -> factor .)
    DIVIDE          reduce using rule 10 (term -> factor .)
    SEMICOLON       reduce using rule 10 (term -> factor .)
    PLUS            reduce using rule 10 (term -> factor .)
    MINUS           reduce using rule 10 (term -> factor .)
    RPAREN          reduce using rule 10 (term -> factor .)


state 10

    (11) factor -> INTEGER_TYPE .

    TIMES           reduce using rule 11 (factor -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 11 (factor -> INTEGER_TYPE .)
    SEMICOLON       reduce using rule 11 (factor -> INTEGER_TYPE .)
    PLUS            reduce using rule 11 (factor -> INTEGER_TYPE .)
    MINUS           reduce using rule 11 (factor -> INTEGER_TYPE .)
    RPAREN          reduce using rule 11 (factor -> INTEGER_TYPE .)


state 11

    (12) factor -> FLOAT_TYPE .

    TIMES           reduce using rule 12 (factor -> FLOAT_TYPE .)
    DIVIDE          reduce using rule 12 (factor -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 12 (factor -> FLOAT_TYPE .)
    PLUS            reduce using rule 12 (factor -> FLOAT_TYPE .)
    MINUS           reduce using rule 12 (factor -> FLOAT_TYPE .)
    RPAREN          reduce using rule 12 (factor -> FLOAT_TYPE .)


state 12

    (13) factor -> DOUBLE_TYPE .

    TIMES           reduce using rule 13 (factor -> DOUBLE_TYPE .)
    DIVIDE          reduce using rule 13 (factor -> DOUBLE_TYPE .)
    SEMICOLON       reduce using rule 13 (factor -> DOUBLE_TYPE .)
    PLUS            reduce using rule 13 (factor -> DOUBLE_TYPE .)
    MINUS           reduce using rule 13 (factor -> DOUBLE_TYPE .)
    RPAREN          reduce using rule 13 (factor -> DOUBLE_TYPE .)


state 13

    (14) factor -> DECIMAL_TYPE .

    TIMES           reduce using rule 14 (factor -> DECIMAL_TYPE .)
    DIVIDE          reduce using rule 14 (factor -> DECIMAL_TYPE .)
    SEMICOLON       reduce using rule 14 (factor -> DECIMAL_TYPE .)
    PLUS            reduce using rule 14 (factor -> DECIMAL_TYPE .)
    MINUS           reduce using rule 14 (factor -> DECIMAL_TYPE .)
    RPAREN          reduce using rule 14 (factor -> DECIMAL_TYPE .)


state 14

    (15) factor -> LPAREN . expression RPAREN
    (5) expression -> . expression PLUS term
    (6) expression -> . expression MINUS term
    (7) expression -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . INTEGER_TYPE
    (12) factor -> . FLOAT_TYPE
    (13) factor -> . DOUBLE_TYPE
    (14) factor -> . DECIMAL_TYPE
    (15) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 10
    FLOAT_TYPE      shift and go to state 11
    DOUBLE_TYPE     shift and go to state 12
    DECIMAL_TYPE    shift and go to state 13
    LPAREN          shift and go to state 14

    expression                     shift and go to state 20
    term                           shift and go to state 8
    factor                         shift and go to state 9

state 15

    (4) assignment -> ID EQUALS expression SEMICOLON .

    ID              reduce using rule 4 (assignment -> ID EQUALS expression SEMICOLON .)
    $end            reduce using rule 4 (assignment -> ID EQUALS expression SEMICOLON .)


state 16

    (5) expression -> expression PLUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . INTEGER_TYPE
    (12) factor -> . FLOAT_TYPE
    (13) factor -> . DOUBLE_TYPE
    (14) factor -> . DECIMAL_TYPE
    (15) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 10
    FLOAT_TYPE      shift and go to state 11
    DOUBLE_TYPE     shift and go to state 12
    DECIMAL_TYPE    shift and go to state 13
    LPAREN          shift and go to state 14

    term                           shift and go to state 21
    factor                         shift and go to state 9

state 17

    (6) expression -> expression MINUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (10) term -> . factor
    (11) factor -> . INTEGER_TYPE
    (12) factor -> . FLOAT_TYPE
    (13) factor -> . DOUBLE_TYPE
    (14) factor -> . DECIMAL_TYPE
    (15) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 10
    FLOAT_TYPE      shift and go to state 11
    DOUBLE_TYPE     shift and go to state 12
    DECIMAL_TYPE    shift and go to state 13
    LPAREN          shift and go to state 14

    term                           shift and go to state 22
    factor                         shift and go to state 9

state 18

    (8) term -> term TIMES . factor
    (11) factor -> . INTEGER_TYPE
    (12) factor -> . FLOAT_TYPE
    (13) factor -> . DOUBLE_TYPE
    (14) factor -> . DECIMAL_TYPE
    (15) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 10
    FLOAT_TYPE      shift and go to state 11
    DOUBLE_TYPE     shift and go to state 12
    DECIMAL_TYPE    shift and go to state 13
    LPAREN          shift and go to state 14

    factor                         shift and go to state 23

state 19

    (9) term -> term DIVIDE . factor
    (11) factor -> . INTEGER_TYPE
    (12) factor -> . FLOAT_TYPE
    (13) factor -> . DOUBLE_TYPE
    (14) factor -> . DECIMAL_TYPE
    (15) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 10
    FLOAT_TYPE      shift and go to state 11
    DOUBLE_TYPE     shift and go to state 12
    DECIMAL_TYPE    shift and go to state 13
    LPAREN          shift and go to state 14

    factor                         shift and go to state 24

state 20

    (15) factor -> LPAREN expression . RPAREN
    (5) expression -> expression . PLUS term
    (6) expression -> expression . MINUS term

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 21

    (5) expression -> expression PLUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 5 (expression -> expression PLUS term .)
    PLUS            reduce using rule 5 (expression -> expression PLUS term .)
    MINUS           reduce using rule 5 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 5 (expression -> expression PLUS term .)
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 19


state 22

    (6) expression -> expression MINUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 6 (expression -> expression MINUS term .)
    PLUS            reduce using rule 6 (expression -> expression MINUS term .)
    MINUS           reduce using rule 6 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 6 (expression -> expression MINUS term .)
    TIMES           shift and go to state 18
    DIVIDE          shift and go to state 19


state 23

    (8) term -> term TIMES factor .

    TIMES           reduce using rule 8 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 8 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 8 (term -> term TIMES factor .)
    PLUS            reduce using rule 8 (term -> term TIMES factor .)
    MINUS           reduce using rule 8 (term -> term TIMES factor .)
    RPAREN          reduce using rule 8 (term -> term TIMES factor .)


state 24

    (9) term -> term DIVIDE factor .

    TIMES           reduce using rule 9 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 9 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 9 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 9 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 9 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 9 (term -> term DIVIDE factor .)


state 25

    (15) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 15 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 15 (factor -> LPAREN expression RPAREN .)

