Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    DIVIDE_EQUAL
    DO
    FILE
    IN
    MINUS_EQUAL
    MODULE
    MODULE_EQUAL
    NEW
    NINT
    NUINT
    PLUS_EQUAL
    STRING
    THEN
    TIMES_EQUAL
    ULONG
    USHORT
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> usings namespace class
Rule 2     program -> namespace class
Rule 3     usings -> using usings
Rule 4     usings -> using
Rule 5     using -> USING CLASSOBJECT SEMICOLON
Rule 6     namespace -> NAMESPACE CLASSOBJECT SEMICOLON
Rule 7     class -> modifier CLASS CLASSOBJECT block
Rule 8     class -> modifier STATIC CLASS CLASSOBJECT block
Rule 9     object_access -> ID DOT ID
Rule 10    object_access -> CLASSOBJECT DOT CLASSOBJECT
Rule 11    object_access -> ID DOT CLASSOBJECT
Rule 12    object_access -> CLASSOBJECT DOT ID
Rule 13    block -> LBRACKET body RBRACKET
Rule 14    body -> lines SEMICOLON
Rule 15    body -> lines SEMICOLON body
Rule 16    body -> if
Rule 17    body -> loop
Rule 18    body -> function
Rule 19    lines -> assignment
Rule 20    lines -> expression
Rule 21    lines -> declaration
Rule 22    lines -> return
Rule 23    function -> modifier data_type ID LPAREN declarations RPAREN block
Rule 24    function -> modifier VOID ID LPAREN declarations RPAREN block
Rule 25    function -> modifier STATIC data_type ID LPAREN declarations RPAREN block
Rule 26    function -> modifier STATIC VOID ID LPAREN declarations RPAREN block
Rule 27    return -> RETURN ID
Rule 28    return -> RETURN type
Rule 29    lambda_function -> LPAREN ID RPAREN ARROW expression
Rule 30    lambda_function -> LPAREN ID RPAREN ARROW block
Rule 31    expression -> object_access LPAREN expression RPAREN
Rule 32    expression -> object_access LPAREN RPAREN
Rule 33    if -> IF LPAREN logical_expression RPAREN block
Rule 34    if -> IF LPAREN logical_expression RPAREN block body
Rule 35    if -> IF LPAREN logical_expression RPAREN block elseif
Rule 36    if -> IF LPAREN logical_expression RPAREN block else
Rule 37    elseif -> ELSE IF LPAREN logical_expression RPAREN block
Rule 38    elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif
Rule 39    elseif -> ELSE IF LPAREN logical_expression RPAREN block else
Rule 40    else -> ELSE block
Rule 41    else -> ELSE block body
Rule 42    loop -> while_loop
Rule 43    loop -> loop_for
Rule 44    loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
Rule 45    loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
Rule 46    while_loop -> WHILE LPAREN logical_expression RPAREN block
Rule 47    while_loop -> WHILE LPAREN logical_expression RPAREN block body
Rule 48    logical_expression -> logical_expression logical_operator logical_factor
Rule 49    logical_expression -> logical_factor
Rule 50    logical_factor -> TRUE
Rule 51    logical_factor -> FALSE
Rule 52    logical_factor -> ID
Rule 53    logical_factor -> indexing
Rule 54    logical_factor -> type
Rule 55    logical_factor -> object_access
Rule 56    logical_factor -> LPAREN logical_expression RPAREN
Rule 57    logical_operator -> OR
Rule 58    logical_operator -> AND
Rule 59    logical_operator -> NOT
Rule 60    logical_operator -> GREATER_THAN
Rule 61    logical_operator -> LESS_THAN
Rule 62    logical_operator -> GREATER_EQUALS_THAN
Rule 63    logical_operator -> LESS_EQUALS_THAN
Rule 64    logical_operator -> EQUALITY
Rule 65    data_structure -> data_structure_list
Rule 66    data_structure -> data_structure_array
Rule 67    data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
Rule 68    data_structure_array -> primitive LSQBRACKET RSQBRACKET
Rule 69    data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET
Rule 70    assignment -> data_type ID EQUALS expression
Rule 71    assignment -> ID EQUALS expression
Rule 72    assignment_class -> CLASSOBJECT ID
Rule 73    expression -> expression PLUS term
Rule 74    expression -> expression MINUS term
Rule 75    expression -> term
Rule 76    term -> term TIMES factor
Rule 77    term -> term DIVIDE factor
Rule 78    term -> factor
Rule 79    factor -> type
Rule 80    factor -> LPAREN expression RPAREN
Rule 81    factor -> object_access
Rule 82    factor -> ID
Rule 83    factor -> indexing
Rule 84    type -> FLOAT_TYPE
Rule 85    type -> DOUBLE_TYPE
Rule 86    type -> DECIMAL_TYPE
Rule 87    type -> INTEGER_TYPE
Rule 88    type -> MINUS type
Rule 89    declarations -> declaration
Rule 90    declarations -> declaration COMMA
Rule 91    declarations -> declaration COMMA declarations
Rule 92    declaration -> data_type ID
Rule 93    modifier -> PUBLIC
Rule 94    modifier -> PRIVATE
Rule 95    modifier -> PROTECTED
Rule 96    modifier -> INTERNAL
Rule 97    data_type -> primitive
Rule 98    data_type -> data_structure
Rule 99    primitive -> INT
Rule 100   primitive -> FLOAT
Rule 101   primitive -> BOOL
Rule 102   primitive -> BYTE
Rule 103   primitive -> CHAR
Rule 104   primitive -> SBYTE
Rule 105   primitive -> DECIMAL
Rule 106   primitive -> DOUBLE
Rule 107   primitive -> LONG
Rule 108   primitive -> SHORT
Rule 109   primitive -> UINT
Rule 110   indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET
Rule 111   indexing -> ID LSQBRACKET ID RSQBRACKET

Terminals, with rules where they appear

AND                  : 58
ARROW                : 29 30
BOOL                 : 101
BYTE                 : 102
CHAR                 : 103
CHARACTER            : 
CLASS                : 7 8
CLASSOBJECT          : 5 6 7 8 10 10 11 12 69 72
COMMA                : 90 91
DECIMAL              : 105
DECIMAL_TYPE         : 86
DIVIDE               : 77
DIVIDE_EQUAL         : 
DO                   : 
DOT                  : 9 10 11 12
DOUBLE               : 106
DOUBLE_TYPE          : 85
ELSE                 : 37 38 39 40 41
EQUALITY             : 64
EQUALS               : 70 71
FALSE                : 51
FILE                 : 
FLOAT                : 100
FLOAT_TYPE           : 84
FOR                  : 44 45
GREATER_EQUALS_THAN  : 62
GREATER_THAN         : 60 67
ID                   : 9 9 11 12 23 24 25 26 27 29 30 52 67 70 71 72 82 92 110 111 111
IF                   : 33 34 35 36 37 38 39
IN                   : 
INT                  : 99
INTEGER_TYPE         : 87 110
INTERNAL             : 96
LBRACKET             : 13
LESS_EQUALS_THAN     : 63
LESS_THAN            : 61 67
LIST                 : 67
LONG                 : 107
LPAREN               : 23 24 25 26 29 30 31 32 33 34 35 36 37 38 39 44 45 46 47 56 80
LSQBRACKET           : 67 68 69 110 111
MINUS                : 74 88
MINUS_EQUAL          : 
MODULE               : 
MODULE_EQUAL         : 
NAMESPACE            : 6
NEW                  : 
NINT                 : 
NOT                  : 59
NUINT                : 
OR                   : 57
PLUS                 : 73
PLUS_EQUAL           : 
PRIVATE              : 94
PROTECTED            : 95
PUBLIC               : 93
RBRACKET             : 13
RETURN               : 27 28
RPAREN               : 23 24 25 26 29 30 31 32 33 34 35 36 37 38 39 44 45 46 47 56 80
RSQBRACKET           : 67 68 69 110 111
SBYTE                : 104
SEMICOLON            : 5 6 14 15 44 44 45 45
SHORT                : 108
STATIC               : 8 25 26
STRING               : 
THEN                 : 
TIMES                : 76
TIMES_EQUAL          : 
TRUE                 : 50
UINT                 : 109
ULONG                : 
USHORT               : 
USING                : 5
VAR                  : 
VOID                 : 24 26
WHILE                : 46 47
error                : 

Nonterminals, with rules where they appear

assignment           : 19 44 44 45 45
assignment_class     : 
block                : 7 8 23 24 25 26 30 33 34 35 36 37 38 39 40 41 44 45 46 47
body                 : 13 15 34 41 45 47
class                : 1 2
data_structure       : 98
data_structure_array : 66
data_structure_list  : 65
data_type            : 23 25 67 70 92
declaration          : 21 89 90 91
declarations         : 23 24 25 26 91
else                 : 36 39
elseif               : 35 38
expression           : 20 29 31 70 71 73 74 80
factor               : 76 77 78
function             : 18
if                   : 16
indexing             : 53 83
lambda_function      : 
lines                : 14 15
logical_expression   : 33 34 35 36 37 38 39 44 45 46 47 48 56
logical_factor       : 48 49
logical_operator     : 48
loop                 : 17
loop_for             : 43
modifier             : 7 8 23 24 25 26
namespace            : 1 2
object_access        : 31 32 55 81
primitive            : 68 97
program              : 0
return               : 22
term                 : 73 74 75 76 77
type                 : 28 54 67 79 88
using                : 3 4
usings               : 1 3
while_loop           : 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . usings namespace class
    (2) program -> . namespace class
    (3) usings -> . using usings
    (4) usings -> . using
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5
    USING           shift and go to state 6

    program                        shift and go to state 1
    usings                         shift and go to state 2
    namespace                      shift and go to state 3
    using                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> usings . namespace class
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5

    namespace                      shift and go to state 7

state 3

    (2) program -> namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
    (93) modifier -> . PUBLIC
    (94) modifier -> . PRIVATE
    (95) modifier -> . PROTECTED
    (96) modifier -> . INTERNAL

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 8
    modifier                       shift and go to state 9

state 4

    (3) usings -> using . usings
    (4) usings -> using .
    (3) usings -> . using usings
    (4) usings -> . using
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       reduce using rule 4 (usings -> using .)
    USING           shift and go to state 6

    using                          shift and go to state 4
    usings                         shift and go to state 14

state 5

    (6) namespace -> NAMESPACE . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 15


state 6

    (5) using -> USING . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 16


state 7

    (1) program -> usings namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
    (93) modifier -> . PUBLIC
    (94) modifier -> . PRIVATE
    (95) modifier -> . PROTECTED
    (96) modifier -> . INTERNAL

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 17
    modifier                       shift and go to state 9

state 8

    (2) program -> namespace class .

    $end            reduce using rule 2 (program -> namespace class .)


state 9

    (7) class -> modifier . CLASS CLASSOBJECT block
    (8) class -> modifier . STATIC CLASS CLASSOBJECT block

    CLASS           shift and go to state 18
    STATIC          shift and go to state 19


state 10

    (93) modifier -> PUBLIC .

    CLASS           reduce using rule 93 (modifier -> PUBLIC .)
    STATIC          reduce using rule 93 (modifier -> PUBLIC .)
    VOID            reduce using rule 93 (modifier -> PUBLIC .)
    INT             reduce using rule 93 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 93 (modifier -> PUBLIC .)
    BOOL            reduce using rule 93 (modifier -> PUBLIC .)
    BYTE            reduce using rule 93 (modifier -> PUBLIC .)
    CHAR            reduce using rule 93 (modifier -> PUBLIC .)
    SBYTE           reduce using rule 93 (modifier -> PUBLIC .)
    DECIMAL         reduce using rule 93 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 93 (modifier -> PUBLIC .)
    LONG            reduce using rule 93 (modifier -> PUBLIC .)
    SHORT           reduce using rule 93 (modifier -> PUBLIC .)
    UINT            reduce using rule 93 (modifier -> PUBLIC .)
    LIST            reduce using rule 93 (modifier -> PUBLIC .)
    CLASSOBJECT     reduce using rule 93 (modifier -> PUBLIC .)


state 11

    (94) modifier -> PRIVATE .

    CLASS           reduce using rule 94 (modifier -> PRIVATE .)
    STATIC          reduce using rule 94 (modifier -> PRIVATE .)
    VOID            reduce using rule 94 (modifier -> PRIVATE .)
    INT             reduce using rule 94 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 94 (modifier -> PRIVATE .)
    BOOL            reduce using rule 94 (modifier -> PRIVATE .)
    BYTE            reduce using rule 94 (modifier -> PRIVATE .)
    CHAR            reduce using rule 94 (modifier -> PRIVATE .)
    SBYTE           reduce using rule 94 (modifier -> PRIVATE .)
    DECIMAL         reduce using rule 94 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 94 (modifier -> PRIVATE .)
    LONG            reduce using rule 94 (modifier -> PRIVATE .)
    SHORT           reduce using rule 94 (modifier -> PRIVATE .)
    UINT            reduce using rule 94 (modifier -> PRIVATE .)
    LIST            reduce using rule 94 (modifier -> PRIVATE .)
    CLASSOBJECT     reduce using rule 94 (modifier -> PRIVATE .)


state 12

    (95) modifier -> PROTECTED .

    CLASS           reduce using rule 95 (modifier -> PROTECTED .)
    STATIC          reduce using rule 95 (modifier -> PROTECTED .)
    VOID            reduce using rule 95 (modifier -> PROTECTED .)
    INT             reduce using rule 95 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 95 (modifier -> PROTECTED .)
    BOOL            reduce using rule 95 (modifier -> PROTECTED .)
    BYTE            reduce using rule 95 (modifier -> PROTECTED .)
    CHAR            reduce using rule 95 (modifier -> PROTECTED .)
    SBYTE           reduce using rule 95 (modifier -> PROTECTED .)
    DECIMAL         reduce using rule 95 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 95 (modifier -> PROTECTED .)
    LONG            reduce using rule 95 (modifier -> PROTECTED .)
    SHORT           reduce using rule 95 (modifier -> PROTECTED .)
    UINT            reduce using rule 95 (modifier -> PROTECTED .)
    LIST            reduce using rule 95 (modifier -> PROTECTED .)
    CLASSOBJECT     reduce using rule 95 (modifier -> PROTECTED .)


state 13

    (96) modifier -> INTERNAL .

    CLASS           reduce using rule 96 (modifier -> INTERNAL .)
    STATIC          reduce using rule 96 (modifier -> INTERNAL .)
    VOID            reduce using rule 96 (modifier -> INTERNAL .)
    INT             reduce using rule 96 (modifier -> INTERNAL .)
    FLOAT           reduce using rule 96 (modifier -> INTERNAL .)
    BOOL            reduce using rule 96 (modifier -> INTERNAL .)
    BYTE            reduce using rule 96 (modifier -> INTERNAL .)
    CHAR            reduce using rule 96 (modifier -> INTERNAL .)
    SBYTE           reduce using rule 96 (modifier -> INTERNAL .)
    DECIMAL         reduce using rule 96 (modifier -> INTERNAL .)
    DOUBLE          reduce using rule 96 (modifier -> INTERNAL .)
    LONG            reduce using rule 96 (modifier -> INTERNAL .)
    SHORT           reduce using rule 96 (modifier -> INTERNAL .)
    UINT            reduce using rule 96 (modifier -> INTERNAL .)
    LIST            reduce using rule 96 (modifier -> INTERNAL .)
    CLASSOBJECT     reduce using rule 96 (modifier -> INTERNAL .)


state 14

    (3) usings -> using usings .

    NAMESPACE       reduce using rule 3 (usings -> using usings .)


state 15

    (6) namespace -> NAMESPACE CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 20


state 16

    (5) using -> USING CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 21


state 17

    (1) program -> usings namespace class .

    $end            reduce using rule 1 (program -> usings namespace class .)


state 18

    (7) class -> modifier CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 22


state 19

    (8) class -> modifier STATIC . CLASS CLASSOBJECT block

    CLASS           shift and go to state 23


state 20

    (6) namespace -> NAMESPACE CLASSOBJECT SEMICOLON .

    PUBLIC          reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PRIVATE         reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PROTECTED       reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    INTERNAL        reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)


state 21

    (5) using -> USING CLASSOBJECT SEMICOLON .

    USING           reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)
    NAMESPACE       reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)


state 22

    (7) class -> modifier CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 24

state 23

    (8) class -> modifier STATIC CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 26


state 24

    (7) class -> modifier CLASS CLASSOBJECT block .

    $end            reduce using rule 7 (class -> modifier CLASS CLASSOBJECT block .)


state 25

    (13) block -> LBRACKET . body RBRACKET
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (33) if -> . IF LPAREN logical_expression RPAREN block
    (34) if -> . IF LPAREN logical_expression RPAREN block body
    (35) if -> . IF LPAREN logical_expression RPAREN block elseif
    (36) if -> . IF LPAREN logical_expression RPAREN block else
    (42) loop -> . while_loop
    (43) loop -> . loop_for
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (70) assignment -> . data_type ID EQUALS expression
    (71) assignment -> . ID EQUALS expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (92) declaration -> . data_type ID
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (46) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (47) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (44) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (93) modifier -> . PUBLIC
    (94) modifier -> . PRIVATE
    (95) modifier -> . PROTECTED
    (96) modifier -> . INTERNAL
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    body                           shift and go to state 27
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 26

    (8) class -> modifier STATIC CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 73

state 27

    (13) block -> LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 74


state 28

    (14) body -> lines . SEMICOLON
    (15) body -> lines . SEMICOLON body

    SEMICOLON       shift and go to state 75


state 29

    (16) body -> if .

    RBRACKET        reduce using rule 16 (body -> if .)


state 30

    (17) body -> loop .

    RBRACKET        reduce using rule 17 (body -> loop .)


state 31

    (18) body -> function .

    RBRACKET        reduce using rule 18 (body -> function .)


state 32

    (19) lines -> assignment .

    SEMICOLON       reduce using rule 19 (lines -> assignment .)


state 33

    (20) lines -> expression .
    (73) expression -> expression . PLUS term
    (74) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 20 (lines -> expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77


state 34

    (21) lines -> declaration .

    SEMICOLON       reduce using rule 21 (lines -> declaration .)


state 35

    (22) lines -> return .

    SEMICOLON       reduce using rule 22 (lines -> return .)


state 36

    (33) if -> IF . LPAREN logical_expression RPAREN block
    (34) if -> IF . LPAREN logical_expression RPAREN block body
    (35) if -> IF . LPAREN logical_expression RPAREN block elseif
    (36) if -> IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 78


state 37

    (80) factor -> LPAREN . expression RPAREN
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 80
    CLASSOBJECT     shift and go to state 81
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    expression                     shift and go to state 79
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    factor                         shift and go to state 53
    type                           shift and go to state 47
    indexing                       shift and go to state 67

state 38

    (42) loop -> while_loop .

    RBRACKET        reduce using rule 42 (loop -> while_loop .)


state 39

    (43) loop -> loop_for .

    RBRACKET        reduce using rule 43 (loop -> loop_for .)


state 40

    (23) function -> modifier . data_type ID LPAREN declarations RPAREN block
    (24) function -> modifier . VOID ID LPAREN declarations RPAREN block
    (25) function -> modifier . STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> modifier . STATIC VOID ID LPAREN declarations RPAREN block
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 83
    STATIC          shift and go to state 84
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    data_type                      shift and go to state 82
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 41

    (70) assignment -> data_type . ID EQUALS expression
    (92) declaration -> data_type . ID

    ID              shift and go to state 86


state 42

    (71) assignment -> ID . EQUALS expression
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (82) factor -> ID .
    (110) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> ID . LSQBRACKET ID RSQBRACKET

    EQUALS          shift and go to state 87
    DOT             shift and go to state 88
    TIMES           reduce using rule 82 (factor -> ID .)
    DIVIDE          reduce using rule 82 (factor -> ID .)
    PLUS            reduce using rule 82 (factor -> ID .)
    MINUS           reduce using rule 82 (factor -> ID .)
    SEMICOLON       reduce using rule 82 (factor -> ID .)
    LSQBRACKET      shift and go to state 89


state 43

    (31) expression -> object_access . LPAREN expression RPAREN
    (32) expression -> object_access . LPAREN RPAREN
    (81) factor -> object_access .

    LPAREN          shift and go to state 90
    TIMES           reduce using rule 81 (factor -> object_access .)
    DIVIDE          reduce using rule 81 (factor -> object_access .)
    PLUS            reduce using rule 81 (factor -> object_access .)
    MINUS           reduce using rule 81 (factor -> object_access .)
    SEMICOLON       reduce using rule 81 (factor -> object_access .)
    RPAREN          reduce using rule 81 (factor -> object_access .)


state 44

    (75) expression -> term .
    (76) term -> term . TIMES factor
    (77) term -> term . DIVIDE factor

    PLUS            reduce using rule 75 (expression -> term .)
    MINUS           reduce using rule 75 (expression -> term .)
    SEMICOLON       reduce using rule 75 (expression -> term .)
    RPAREN          reduce using rule 75 (expression -> term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92


state 45

    (88) type -> MINUS . type
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type

    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    type                           shift and go to state 93

state 46

    (27) return -> RETURN . ID
    (28) return -> RETURN . type
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type

    ID              shift and go to state 94
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    type                           shift and go to state 95

state 47

    (79) factor -> type .

    TIMES           reduce using rule 79 (factor -> type .)
    DIVIDE          reduce using rule 79 (factor -> type .)
    PLUS            reduce using rule 79 (factor -> type .)
    MINUS           reduce using rule 79 (factor -> type .)
    SEMICOLON       reduce using rule 79 (factor -> type .)
    RPAREN          reduce using rule 79 (factor -> type .)


state 48

    (46) while_loop -> WHILE . LPAREN logical_expression RPAREN block
    (47) while_loop -> WHILE . LPAREN logical_expression RPAREN block body

    LPAREN          shift and go to state 96


state 49

    (44) loop_for -> FOR . LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> FOR . LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body

    LPAREN          shift and go to state 97


state 50

    (97) data_type -> primitive .
    (68) data_structure_array -> primitive . LSQBRACKET RSQBRACKET

    ID              reduce using rule 97 (data_type -> primitive .)
    GREATER_THAN    reduce using rule 97 (data_type -> primitive .)
    LSQBRACKET      shift and go to state 98


state 51

    (98) data_type -> data_structure .

    ID              reduce using rule 98 (data_type -> data_structure .)
    GREATER_THAN    reduce using rule 98 (data_type -> data_structure .)


state 52

    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID
    (69) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    DOT             shift and go to state 99
    LSQBRACKET      shift and go to state 100


state 53

    (78) term -> factor .

    TIMES           reduce using rule 78 (term -> factor .)
    DIVIDE          reduce using rule 78 (term -> factor .)
    PLUS            reduce using rule 78 (term -> factor .)
    MINUS           reduce using rule 78 (term -> factor .)
    SEMICOLON       reduce using rule 78 (term -> factor .)
    RPAREN          reduce using rule 78 (term -> factor .)


state 54

    (99) primitive -> INT .

    LSQBRACKET      reduce using rule 99 (primitive -> INT .)
    ID              reduce using rule 99 (primitive -> INT .)
    GREATER_THAN    reduce using rule 99 (primitive -> INT .)


state 55

    (100) primitive -> FLOAT .

    LSQBRACKET      reduce using rule 100 (primitive -> FLOAT .)
    ID              reduce using rule 100 (primitive -> FLOAT .)
    GREATER_THAN    reduce using rule 100 (primitive -> FLOAT .)


state 56

    (101) primitive -> BOOL .

    LSQBRACKET      reduce using rule 101 (primitive -> BOOL .)
    ID              reduce using rule 101 (primitive -> BOOL .)
    GREATER_THAN    reduce using rule 101 (primitive -> BOOL .)


state 57

    (102) primitive -> BYTE .

    LSQBRACKET      reduce using rule 102 (primitive -> BYTE .)
    ID              reduce using rule 102 (primitive -> BYTE .)
    GREATER_THAN    reduce using rule 102 (primitive -> BYTE .)


state 58

    (103) primitive -> CHAR .

    LSQBRACKET      reduce using rule 103 (primitive -> CHAR .)
    ID              reduce using rule 103 (primitive -> CHAR .)
    GREATER_THAN    reduce using rule 103 (primitive -> CHAR .)


state 59

    (104) primitive -> SBYTE .

    LSQBRACKET      reduce using rule 104 (primitive -> SBYTE .)
    ID              reduce using rule 104 (primitive -> SBYTE .)
    GREATER_THAN    reduce using rule 104 (primitive -> SBYTE .)


state 60

    (105) primitive -> DECIMAL .

    LSQBRACKET      reduce using rule 105 (primitive -> DECIMAL .)
    ID              reduce using rule 105 (primitive -> DECIMAL .)
    GREATER_THAN    reduce using rule 105 (primitive -> DECIMAL .)


state 61

    (106) primitive -> DOUBLE .

    LSQBRACKET      reduce using rule 106 (primitive -> DOUBLE .)
    ID              reduce using rule 106 (primitive -> DOUBLE .)
    GREATER_THAN    reduce using rule 106 (primitive -> DOUBLE .)


state 62

    (107) primitive -> LONG .

    LSQBRACKET      reduce using rule 107 (primitive -> LONG .)
    ID              reduce using rule 107 (primitive -> LONG .)
    GREATER_THAN    reduce using rule 107 (primitive -> LONG .)


state 63

    (108) primitive -> SHORT .

    LSQBRACKET      reduce using rule 108 (primitive -> SHORT .)
    ID              reduce using rule 108 (primitive -> SHORT .)
    GREATER_THAN    reduce using rule 108 (primitive -> SHORT .)


state 64

    (109) primitive -> UINT .

    LSQBRACKET      reduce using rule 109 (primitive -> UINT .)
    ID              reduce using rule 109 (primitive -> UINT .)
    GREATER_THAN    reduce using rule 109 (primitive -> UINT .)


state 65

    (65) data_structure -> data_structure_list .

    ID              reduce using rule 65 (data_structure -> data_structure_list .)
    GREATER_THAN    reduce using rule 65 (data_structure -> data_structure_list .)


state 66

    (66) data_structure -> data_structure_array .

    ID              reduce using rule 66 (data_structure -> data_structure_array .)
    GREATER_THAN    reduce using rule 66 (data_structure -> data_structure_array .)


state 67

    (83) factor -> indexing .

    TIMES           reduce using rule 83 (factor -> indexing .)
    DIVIDE          reduce using rule 83 (factor -> indexing .)
    PLUS            reduce using rule 83 (factor -> indexing .)
    MINUS           reduce using rule 83 (factor -> indexing .)
    SEMICOLON       reduce using rule 83 (factor -> indexing .)
    RPAREN          reduce using rule 83 (factor -> indexing .)


state 68

    (67) data_structure_list -> LIST . LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET

    LESS_THAN       shift and go to state 101


state 69

    (84) type -> FLOAT_TYPE .

    TIMES           reduce using rule 84 (type -> FLOAT_TYPE .)
    DIVIDE          reduce using rule 84 (type -> FLOAT_TYPE .)
    PLUS            reduce using rule 84 (type -> FLOAT_TYPE .)
    MINUS           reduce using rule 84 (type -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 84 (type -> FLOAT_TYPE .)
    RPAREN          reduce using rule 84 (type -> FLOAT_TYPE .)
    OR              reduce using rule 84 (type -> FLOAT_TYPE .)
    AND             reduce using rule 84 (type -> FLOAT_TYPE .)
    NOT             reduce using rule 84 (type -> FLOAT_TYPE .)
    GREATER_THAN    reduce using rule 84 (type -> FLOAT_TYPE .)
    LESS_THAN       reduce using rule 84 (type -> FLOAT_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 84 (type -> FLOAT_TYPE .)
    LESS_EQUALS_THAN reduce using rule 84 (type -> FLOAT_TYPE .)
    EQUALITY        reduce using rule 84 (type -> FLOAT_TYPE .)
    RSQBRACKET      reduce using rule 84 (type -> FLOAT_TYPE .)


state 70

    (85) type -> DOUBLE_TYPE .

    TIMES           reduce using rule 85 (type -> DOUBLE_TYPE .)
    DIVIDE          reduce using rule 85 (type -> DOUBLE_TYPE .)
    PLUS            reduce using rule 85 (type -> DOUBLE_TYPE .)
    MINUS           reduce using rule 85 (type -> DOUBLE_TYPE .)
    SEMICOLON       reduce using rule 85 (type -> DOUBLE_TYPE .)
    RPAREN          reduce using rule 85 (type -> DOUBLE_TYPE .)
    OR              reduce using rule 85 (type -> DOUBLE_TYPE .)
    AND             reduce using rule 85 (type -> DOUBLE_TYPE .)
    NOT             reduce using rule 85 (type -> DOUBLE_TYPE .)
    GREATER_THAN    reduce using rule 85 (type -> DOUBLE_TYPE .)
    LESS_THAN       reduce using rule 85 (type -> DOUBLE_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 85 (type -> DOUBLE_TYPE .)
    LESS_EQUALS_THAN reduce using rule 85 (type -> DOUBLE_TYPE .)
    EQUALITY        reduce using rule 85 (type -> DOUBLE_TYPE .)
    RSQBRACKET      reduce using rule 85 (type -> DOUBLE_TYPE .)


state 71

    (86) type -> DECIMAL_TYPE .

    TIMES           reduce using rule 86 (type -> DECIMAL_TYPE .)
    DIVIDE          reduce using rule 86 (type -> DECIMAL_TYPE .)
    PLUS            reduce using rule 86 (type -> DECIMAL_TYPE .)
    MINUS           reduce using rule 86 (type -> DECIMAL_TYPE .)
    SEMICOLON       reduce using rule 86 (type -> DECIMAL_TYPE .)
    RPAREN          reduce using rule 86 (type -> DECIMAL_TYPE .)
    OR              reduce using rule 86 (type -> DECIMAL_TYPE .)
    AND             reduce using rule 86 (type -> DECIMAL_TYPE .)
    NOT             reduce using rule 86 (type -> DECIMAL_TYPE .)
    GREATER_THAN    reduce using rule 86 (type -> DECIMAL_TYPE .)
    LESS_THAN       reduce using rule 86 (type -> DECIMAL_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 86 (type -> DECIMAL_TYPE .)
    LESS_EQUALS_THAN reduce using rule 86 (type -> DECIMAL_TYPE .)
    EQUALITY        reduce using rule 86 (type -> DECIMAL_TYPE .)
    RSQBRACKET      reduce using rule 86 (type -> DECIMAL_TYPE .)


state 72

    (87) type -> INTEGER_TYPE .

    TIMES           reduce using rule 87 (type -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 87 (type -> INTEGER_TYPE .)
    PLUS            reduce using rule 87 (type -> INTEGER_TYPE .)
    MINUS           reduce using rule 87 (type -> INTEGER_TYPE .)
    SEMICOLON       reduce using rule 87 (type -> INTEGER_TYPE .)
    RPAREN          reduce using rule 87 (type -> INTEGER_TYPE .)
    OR              reduce using rule 87 (type -> INTEGER_TYPE .)
    AND             reduce using rule 87 (type -> INTEGER_TYPE .)
    NOT             reduce using rule 87 (type -> INTEGER_TYPE .)
    GREATER_THAN    reduce using rule 87 (type -> INTEGER_TYPE .)
    LESS_THAN       reduce using rule 87 (type -> INTEGER_TYPE .)
    GREATER_EQUALS_THAN reduce using rule 87 (type -> INTEGER_TYPE .)
    LESS_EQUALS_THAN reduce using rule 87 (type -> INTEGER_TYPE .)
    EQUALITY        reduce using rule 87 (type -> INTEGER_TYPE .)
    RSQBRACKET      reduce using rule 87 (type -> INTEGER_TYPE .)


state 73

    (8) class -> modifier STATIC CLASS CLASSOBJECT block .

    $end            reduce using rule 8 (class -> modifier STATIC CLASS CLASSOBJECT block .)


state 74

    (13) block -> LBRACKET body RBRACKET .

    $end            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    ELSE            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    IF              reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    ID              reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    RETURN          reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    WHILE           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    FOR             reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    PUBLIC          reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    PRIVATE         reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    PROTECTED       reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    INTERNAL        reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    CLASSOBJECT     reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    INT             reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    FLOAT           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    BOOL            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    BYTE            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    CHAR            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    SBYTE           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    DECIMAL         reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    DOUBLE          reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    LONG            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    SHORT           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    UINT            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    LPAREN          reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    LIST            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    FLOAT_TYPE      reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    DOUBLE_TYPE     reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    DECIMAL_TYPE    reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    INTEGER_TYPE    reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    MINUS           reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 13 (block -> LBRACKET body RBRACKET .)


state 75

    (14) body -> lines SEMICOLON .
    (15) body -> lines SEMICOLON . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (33) if -> . IF LPAREN logical_expression RPAREN block
    (34) if -> . IF LPAREN logical_expression RPAREN block body
    (35) if -> . IF LPAREN logical_expression RPAREN block elseif
    (36) if -> . IF LPAREN logical_expression RPAREN block else
    (42) loop -> . while_loop
    (43) loop -> . loop_for
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (70) assignment -> . data_type ID EQUALS expression
    (71) assignment -> . ID EQUALS expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (92) declaration -> . data_type ID
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (46) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (47) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (44) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (93) modifier -> . PUBLIC
    (94) modifier -> . PRIVATE
    (95) modifier -> . PROTECTED
    (96) modifier -> . INTERNAL
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 14 (body -> lines SEMICOLON .)
    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    lines                          shift and go to state 28
    body                           shift and go to state 102
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 76

    (73) expression -> expression PLUS . term
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 37
    ID              shift and go to state 105
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    term                           shift and go to state 103
    factor                         shift and go to state 53
    type                           shift and go to state 47
    object_access                  shift and go to state 104
    indexing                       shift and go to state 67

state 77

    (74) expression -> expression MINUS . term
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 37
    ID              shift and go to state 105
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    term                           shift and go to state 106
    factor                         shift and go to state 53
    type                           shift and go to state 47
    object_access                  shift and go to state 104
    indexing                       shift and go to state 67

state 78

    (33) if -> IF LPAREN . logical_expression RPAREN block
    (34) if -> IF LPAREN . logical_expression RPAREN block body
    (35) if -> IF LPAREN . logical_expression RPAREN block elseif
    (36) if -> IF LPAREN . logical_expression RPAREN block else
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . indexing
    (54) logical_factor -> . type
    (55) logical_factor -> . object_access
    (56) logical_factor -> . LPAREN logical_expression RPAREN
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_expression             shift and go to state 108
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 79

    (80) factor -> LPAREN expression . RPAREN
    (73) expression -> expression . PLUS term
    (74) expression -> expression . MINUS term

    RPAREN          shift and go to state 116
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77


state 80

    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (82) factor -> ID .
    (110) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> ID . LSQBRACKET ID RSQBRACKET

    DOT             shift and go to state 88
    TIMES           reduce using rule 82 (factor -> ID .)
    DIVIDE          reduce using rule 82 (factor -> ID .)
    RPAREN          reduce using rule 82 (factor -> ID .)
    PLUS            reduce using rule 82 (factor -> ID .)
    MINUS           reduce using rule 82 (factor -> ID .)
    SEMICOLON       reduce using rule 82 (factor -> ID .)
    LSQBRACKET      shift and go to state 89


state 81

    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID

    DOT             shift and go to state 99


state 82

    (23) function -> modifier data_type . ID LPAREN declarations RPAREN block

    ID              shift and go to state 117


state 83

    (24) function -> modifier VOID . ID LPAREN declarations RPAREN block

    ID              shift and go to state 118


state 84

    (25) function -> modifier STATIC . data_type ID LPAREN declarations RPAREN block
    (26) function -> modifier STATIC . VOID ID LPAREN declarations RPAREN block
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 120
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    data_type                      shift and go to state 119
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 85

    (69) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    LSQBRACKET      shift and go to state 100


state 86

    (70) assignment -> data_type ID . EQUALS expression
    (92) declaration -> data_type ID .

    EQUALS          shift and go to state 121
    SEMICOLON       reduce using rule 92 (declaration -> data_type ID .)


state 87

    (71) assignment -> ID EQUALS . expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 80
    CLASSOBJECT     shift and go to state 81
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    expression                     shift and go to state 122
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    factor                         shift and go to state 53
    type                           shift and go to state 47
    indexing                       shift and go to state 67

state 88

    (9) object_access -> ID DOT . ID
    (11) object_access -> ID DOT . CLASSOBJECT

    ID              shift and go to state 123
    CLASSOBJECT     shift and go to state 124


state 89

    (110) indexing -> ID LSQBRACKET . INTEGER_TYPE RSQBRACKET
    (111) indexing -> ID LSQBRACKET . ID RSQBRACKET

    INTEGER_TYPE    shift and go to state 126
    ID              shift and go to state 125


state 90

    (31) expression -> object_access LPAREN . expression RPAREN
    (32) expression -> object_access LPAREN . RPAREN
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RPAREN          shift and go to state 128
    ID              shift and go to state 80
    CLASSOBJECT     shift and go to state 81
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    object_access                  shift and go to state 43
    expression                     shift and go to state 127
    term                           shift and go to state 44
    factor                         shift and go to state 53
    type                           shift and go to state 47
    indexing                       shift and go to state 67

state 91

    (76) term -> term TIMES . factor
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 37
    ID              shift and go to state 105
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    factor                         shift and go to state 129
    type                           shift and go to state 47
    object_access                  shift and go to state 104
    indexing                       shift and go to state 67

state 92

    (77) term -> term DIVIDE . factor
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 37
    ID              shift and go to state 105
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    factor                         shift and go to state 130
    type                           shift and go to state 47
    object_access                  shift and go to state 104
    indexing                       shift and go to state 67

state 93

    (88) type -> MINUS type .

    TIMES           reduce using rule 88 (type -> MINUS type .)
    DIVIDE          reduce using rule 88 (type -> MINUS type .)
    PLUS            reduce using rule 88 (type -> MINUS type .)
    MINUS           reduce using rule 88 (type -> MINUS type .)
    SEMICOLON       reduce using rule 88 (type -> MINUS type .)
    RPAREN          reduce using rule 88 (type -> MINUS type .)
    OR              reduce using rule 88 (type -> MINUS type .)
    AND             reduce using rule 88 (type -> MINUS type .)
    NOT             reduce using rule 88 (type -> MINUS type .)
    GREATER_THAN    reduce using rule 88 (type -> MINUS type .)
    LESS_THAN       reduce using rule 88 (type -> MINUS type .)
    GREATER_EQUALS_THAN reduce using rule 88 (type -> MINUS type .)
    LESS_EQUALS_THAN reduce using rule 88 (type -> MINUS type .)
    EQUALITY        reduce using rule 88 (type -> MINUS type .)
    RSQBRACKET      reduce using rule 88 (type -> MINUS type .)


state 94

    (27) return -> RETURN ID .

    SEMICOLON       reduce using rule 27 (return -> RETURN ID .)


state 95

    (28) return -> RETURN type .

    SEMICOLON       reduce using rule 28 (return -> RETURN type .)


state 96

    (46) while_loop -> WHILE LPAREN . logical_expression RPAREN block
    (47) while_loop -> WHILE LPAREN . logical_expression RPAREN block body
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . indexing
    (54) logical_factor -> . type
    (55) logical_factor -> . object_access
    (56) logical_factor -> . LPAREN logical_expression RPAREN
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_expression             shift and go to state 131
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 97

    (44) loop_for -> FOR LPAREN . assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> FOR LPAREN . assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (70) assignment -> . data_type ID EQUALS expression
    (71) assignment -> . ID EQUALS expression
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 134
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    assignment                     shift and go to state 132
    data_type                      shift and go to state 133
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 98

    (68) data_structure_array -> primitive LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 135


state 99

    (10) object_access -> CLASSOBJECT DOT . CLASSOBJECT
    (12) object_access -> CLASSOBJECT DOT . ID

    CLASSOBJECT     shift and go to state 136
    ID              shift and go to state 137


state 100

    (69) data_structure_array -> CLASSOBJECT LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 138


state 101

    (67) data_structure_list -> LIST LESS_THAN . data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    data_type                      shift and go to state 139
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 102

    (15) body -> lines SEMICOLON body .

    RBRACKET        reduce using rule 15 (body -> lines SEMICOLON body .)


state 103

    (73) expression -> expression PLUS term .
    (76) term -> term . TIMES factor
    (77) term -> term . DIVIDE factor

    PLUS            reduce using rule 73 (expression -> expression PLUS term .)
    MINUS           reduce using rule 73 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 73 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 73 (expression -> expression PLUS term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92


state 104

    (81) factor -> object_access .

    TIMES           reduce using rule 81 (factor -> object_access .)
    DIVIDE          reduce using rule 81 (factor -> object_access .)
    PLUS            reduce using rule 81 (factor -> object_access .)
    MINUS           reduce using rule 81 (factor -> object_access .)
    SEMICOLON       reduce using rule 81 (factor -> object_access .)
    RPAREN          reduce using rule 81 (factor -> object_access .)


state 105

    (82) factor -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (110) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> ID . LSQBRACKET ID RSQBRACKET

    TIMES           reduce using rule 82 (factor -> ID .)
    DIVIDE          reduce using rule 82 (factor -> ID .)
    PLUS            reduce using rule 82 (factor -> ID .)
    MINUS           reduce using rule 82 (factor -> ID .)
    SEMICOLON       reduce using rule 82 (factor -> ID .)
    RPAREN          reduce using rule 82 (factor -> ID .)
    DOT             shift and go to state 88
    LSQBRACKET      shift and go to state 89


state 106

    (74) expression -> expression MINUS term .
    (76) term -> term . TIMES factor
    (77) term -> term . DIVIDE factor

    PLUS            reduce using rule 74 (expression -> expression MINUS term .)
    MINUS           reduce using rule 74 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 74 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 74 (expression -> expression MINUS term .)
    TIMES           shift and go to state 91
    DIVIDE          shift and go to state 92


state 107

    (56) logical_factor -> LPAREN . logical_expression RPAREN
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . indexing
    (54) logical_factor -> . type
    (55) logical_factor -> . object_access
    (56) logical_factor -> . LPAREN logical_expression RPAREN
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_expression             shift and go to state 140
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 108

    (33) if -> IF LPAREN logical_expression . RPAREN block
    (34) if -> IF LPAREN logical_expression . RPAREN block body
    (35) if -> IF LPAREN logical_expression . RPAREN block elseif
    (36) if -> IF LPAREN logical_expression . RPAREN block else
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (57) logical_operator -> . OR
    (58) logical_operator -> . AND
    (59) logical_operator -> . NOT
    (60) logical_operator -> . GREATER_THAN
    (61) logical_operator -> . LESS_THAN
    (62) logical_operator -> . GREATER_EQUALS_THAN
    (63) logical_operator -> . LESS_EQUALS_THAN
    (64) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 141
    OR              shift and go to state 143
    AND             shift and go to state 144
    NOT             shift and go to state 145
    GREATER_THAN    shift and go to state 146
    LESS_THAN       shift and go to state 147
    GREATER_EQUALS_THAN shift and go to state 148
    LESS_EQUALS_THAN shift and go to state 149
    EQUALITY        shift and go to state 150

    logical_operator               shift and go to state 142

state 109

    (49) logical_expression -> logical_factor .

    RPAREN          reduce using rule 49 (logical_expression -> logical_factor .)
    OR              reduce using rule 49 (logical_expression -> logical_factor .)
    AND             reduce using rule 49 (logical_expression -> logical_factor .)
    NOT             reduce using rule 49 (logical_expression -> logical_factor .)
    GREATER_THAN    reduce using rule 49 (logical_expression -> logical_factor .)
    LESS_THAN       reduce using rule 49 (logical_expression -> logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 49 (logical_expression -> logical_factor .)
    LESS_EQUALS_THAN reduce using rule 49 (logical_expression -> logical_factor .)
    EQUALITY        reduce using rule 49 (logical_expression -> logical_factor .)
    SEMICOLON       reduce using rule 49 (logical_expression -> logical_factor .)


state 110

    (50) logical_factor -> TRUE .

    RPAREN          reduce using rule 50 (logical_factor -> TRUE .)
    OR              reduce using rule 50 (logical_factor -> TRUE .)
    AND             reduce using rule 50 (logical_factor -> TRUE .)
    NOT             reduce using rule 50 (logical_factor -> TRUE .)
    GREATER_THAN    reduce using rule 50 (logical_factor -> TRUE .)
    LESS_THAN       reduce using rule 50 (logical_factor -> TRUE .)
    GREATER_EQUALS_THAN reduce using rule 50 (logical_factor -> TRUE .)
    LESS_EQUALS_THAN reduce using rule 50 (logical_factor -> TRUE .)
    EQUALITY        reduce using rule 50 (logical_factor -> TRUE .)
    SEMICOLON       reduce using rule 50 (logical_factor -> TRUE .)


state 111

    (51) logical_factor -> FALSE .

    RPAREN          reduce using rule 51 (logical_factor -> FALSE .)
    OR              reduce using rule 51 (logical_factor -> FALSE .)
    AND             reduce using rule 51 (logical_factor -> FALSE .)
    NOT             reduce using rule 51 (logical_factor -> FALSE .)
    GREATER_THAN    reduce using rule 51 (logical_factor -> FALSE .)
    LESS_THAN       reduce using rule 51 (logical_factor -> FALSE .)
    GREATER_EQUALS_THAN reduce using rule 51 (logical_factor -> FALSE .)
    LESS_EQUALS_THAN reduce using rule 51 (logical_factor -> FALSE .)
    EQUALITY        reduce using rule 51 (logical_factor -> FALSE .)
    SEMICOLON       reduce using rule 51 (logical_factor -> FALSE .)


state 112

    (52) logical_factor -> ID .
    (110) indexing -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> ID . LSQBRACKET ID RSQBRACKET
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT

    RPAREN          reduce using rule 52 (logical_factor -> ID .)
    OR              reduce using rule 52 (logical_factor -> ID .)
    AND             reduce using rule 52 (logical_factor -> ID .)
    NOT             reduce using rule 52 (logical_factor -> ID .)
    GREATER_THAN    reduce using rule 52 (logical_factor -> ID .)
    LESS_THAN       reduce using rule 52 (logical_factor -> ID .)
    GREATER_EQUALS_THAN reduce using rule 52 (logical_factor -> ID .)
    LESS_EQUALS_THAN reduce using rule 52 (logical_factor -> ID .)
    EQUALITY        reduce using rule 52 (logical_factor -> ID .)
    SEMICOLON       reduce using rule 52 (logical_factor -> ID .)
    LSQBRACKET      shift and go to state 89
    DOT             shift and go to state 88


state 113

    (53) logical_factor -> indexing .

    RPAREN          reduce using rule 53 (logical_factor -> indexing .)
    OR              reduce using rule 53 (logical_factor -> indexing .)
    AND             reduce using rule 53 (logical_factor -> indexing .)
    NOT             reduce using rule 53 (logical_factor -> indexing .)
    GREATER_THAN    reduce using rule 53 (logical_factor -> indexing .)
    LESS_THAN       reduce using rule 53 (logical_factor -> indexing .)
    GREATER_EQUALS_THAN reduce using rule 53 (logical_factor -> indexing .)
    LESS_EQUALS_THAN reduce using rule 53 (logical_factor -> indexing .)
    EQUALITY        reduce using rule 53 (logical_factor -> indexing .)
    SEMICOLON       reduce using rule 53 (logical_factor -> indexing .)


state 114

    (54) logical_factor -> type .

    RPAREN          reduce using rule 54 (logical_factor -> type .)
    OR              reduce using rule 54 (logical_factor -> type .)
    AND             reduce using rule 54 (logical_factor -> type .)
    NOT             reduce using rule 54 (logical_factor -> type .)
    GREATER_THAN    reduce using rule 54 (logical_factor -> type .)
    LESS_THAN       reduce using rule 54 (logical_factor -> type .)
    GREATER_EQUALS_THAN reduce using rule 54 (logical_factor -> type .)
    LESS_EQUALS_THAN reduce using rule 54 (logical_factor -> type .)
    EQUALITY        reduce using rule 54 (logical_factor -> type .)
    SEMICOLON       reduce using rule 54 (logical_factor -> type .)


state 115

    (55) logical_factor -> object_access .

    RPAREN          reduce using rule 55 (logical_factor -> object_access .)
    OR              reduce using rule 55 (logical_factor -> object_access .)
    AND             reduce using rule 55 (logical_factor -> object_access .)
    NOT             reduce using rule 55 (logical_factor -> object_access .)
    GREATER_THAN    reduce using rule 55 (logical_factor -> object_access .)
    LESS_THAN       reduce using rule 55 (logical_factor -> object_access .)
    GREATER_EQUALS_THAN reduce using rule 55 (logical_factor -> object_access .)
    LESS_EQUALS_THAN reduce using rule 55 (logical_factor -> object_access .)
    EQUALITY        reduce using rule 55 (logical_factor -> object_access .)
    SEMICOLON       reduce using rule 55 (logical_factor -> object_access .)


state 116

    (80) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 80 (factor -> LPAREN expression RPAREN .)


state 117

    (23) function -> modifier data_type ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 151


state 118

    (24) function -> modifier VOID ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 152


state 119

    (25) function -> modifier STATIC data_type . ID LPAREN declarations RPAREN block

    ID              shift and go to state 153


state 120

    (26) function -> modifier STATIC VOID . ID LPAREN declarations RPAREN block

    ID              shift and go to state 154


state 121

    (70) assignment -> data_type ID EQUALS . expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 80
    CLASSOBJECT     shift and go to state 81
    LPAREN          shift and go to state 37
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    expression                     shift and go to state 155
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    factor                         shift and go to state 53
    type                           shift and go to state 47
    indexing                       shift and go to state 67

state 122

    (71) assignment -> ID EQUALS expression .
    (73) expression -> expression . PLUS term
    (74) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 71 (assignment -> ID EQUALS expression .)
    RPAREN          reduce using rule 71 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77


state 123

    (9) object_access -> ID DOT ID .

    LPAREN          reduce using rule 9 (object_access -> ID DOT ID .)
    TIMES           reduce using rule 9 (object_access -> ID DOT ID .)
    DIVIDE          reduce using rule 9 (object_access -> ID DOT ID .)
    PLUS            reduce using rule 9 (object_access -> ID DOT ID .)
    MINUS           reduce using rule 9 (object_access -> ID DOT ID .)
    SEMICOLON       reduce using rule 9 (object_access -> ID DOT ID .)
    RPAREN          reduce using rule 9 (object_access -> ID DOT ID .)
    OR              reduce using rule 9 (object_access -> ID DOT ID .)
    AND             reduce using rule 9 (object_access -> ID DOT ID .)
    NOT             reduce using rule 9 (object_access -> ID DOT ID .)
    GREATER_THAN    reduce using rule 9 (object_access -> ID DOT ID .)
    LESS_THAN       reduce using rule 9 (object_access -> ID DOT ID .)
    GREATER_EQUALS_THAN reduce using rule 9 (object_access -> ID DOT ID .)
    LESS_EQUALS_THAN reduce using rule 9 (object_access -> ID DOT ID .)
    EQUALITY        reduce using rule 9 (object_access -> ID DOT ID .)


state 124

    (11) object_access -> ID DOT CLASSOBJECT .

    LPAREN          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    TIMES           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    DIVIDE          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    PLUS            reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    MINUS           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    RPAREN          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    OR              reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    AND             reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    NOT             reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    GREATER_THAN    reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    LESS_THAN       reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    GREATER_EQUALS_THAN reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    LESS_EQUALS_THAN reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    EQUALITY        reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)


state 125

    (111) indexing -> ID LSQBRACKET ID . RSQBRACKET

    RSQBRACKET      shift and go to state 156


state 126

    (110) indexing -> ID LSQBRACKET INTEGER_TYPE . RSQBRACKET

    RSQBRACKET      shift and go to state 157


state 127

    (31) expression -> object_access LPAREN expression . RPAREN
    (73) expression -> expression . PLUS term
    (74) expression -> expression . MINUS term

    RPAREN          shift and go to state 158
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77


state 128

    (32) expression -> object_access LPAREN RPAREN .

    PLUS            reduce using rule 32 (expression -> object_access LPAREN RPAREN .)
    MINUS           reduce using rule 32 (expression -> object_access LPAREN RPAREN .)
    SEMICOLON       reduce using rule 32 (expression -> object_access LPAREN RPAREN .)
    RPAREN          reduce using rule 32 (expression -> object_access LPAREN RPAREN .)


state 129

    (76) term -> term TIMES factor .

    TIMES           reduce using rule 76 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 76 (term -> term TIMES factor .)
    PLUS            reduce using rule 76 (term -> term TIMES factor .)
    MINUS           reduce using rule 76 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 76 (term -> term TIMES factor .)
    RPAREN          reduce using rule 76 (term -> term TIMES factor .)


state 130

    (77) term -> term DIVIDE factor .

    TIMES           reduce using rule 77 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 77 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 77 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 77 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 77 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 77 (term -> term DIVIDE factor .)


state 131

    (46) while_loop -> WHILE LPAREN logical_expression . RPAREN block
    (47) while_loop -> WHILE LPAREN logical_expression . RPAREN block body
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (57) logical_operator -> . OR
    (58) logical_operator -> . AND
    (59) logical_operator -> . NOT
    (60) logical_operator -> . GREATER_THAN
    (61) logical_operator -> . LESS_THAN
    (62) logical_operator -> . GREATER_EQUALS_THAN
    (63) logical_operator -> . LESS_EQUALS_THAN
    (64) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 159
    OR              shift and go to state 143
    AND             shift and go to state 144
    NOT             shift and go to state 145
    GREATER_THAN    shift and go to state 146
    LESS_THAN       shift and go to state 147
    GREATER_EQUALS_THAN shift and go to state 148
    LESS_EQUALS_THAN shift and go to state 149
    EQUALITY        shift and go to state 150

    logical_operator               shift and go to state 142

state 132

    (44) loop_for -> FOR LPAREN assignment . SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> FOR LPAREN assignment . SEMICOLON logical_expression SEMICOLON assignment RPAREN block body

    SEMICOLON       shift and go to state 160


state 133

    (70) assignment -> data_type . ID EQUALS expression

    ID              shift and go to state 161


state 134

    (71) assignment -> ID . EQUALS expression

    EQUALS          shift and go to state 87


state 135

    (68) data_structure_array -> primitive LSQBRACKET RSQBRACKET .

    ID              reduce using rule 68 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)
    GREATER_THAN    reduce using rule 68 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)


state 136

    (10) object_access -> CLASSOBJECT DOT CLASSOBJECT .

    LPAREN          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    TIMES           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    DIVIDE          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    PLUS            reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    MINUS           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    RPAREN          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    OR              reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    AND             reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    NOT             reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    GREATER_THAN    reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    LESS_THAN       reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    GREATER_EQUALS_THAN reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    LESS_EQUALS_THAN reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    EQUALITY        reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)


state 137

    (12) object_access -> CLASSOBJECT DOT ID .

    LPAREN          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    TIMES           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    DIVIDE          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    PLUS            reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    MINUS           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    SEMICOLON       reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    RPAREN          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    OR              reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    AND             reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    NOT             reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    GREATER_THAN    reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    LESS_THAN       reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    GREATER_EQUALS_THAN reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    LESS_EQUALS_THAN reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    EQUALITY        reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)


state 138

    (69) data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .

    ID              reduce using rule 69 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)
    GREATER_THAN    reduce using rule 69 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)


state 139

    (67) data_structure_list -> LIST LESS_THAN data_type . GREATER_THAN ID LSQBRACKET type RSQBRACKET

    GREATER_THAN    shift and go to state 162


state 140

    (56) logical_factor -> LPAREN logical_expression . RPAREN
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (57) logical_operator -> . OR
    (58) logical_operator -> . AND
    (59) logical_operator -> . NOT
    (60) logical_operator -> . GREATER_THAN
    (61) logical_operator -> . LESS_THAN
    (62) logical_operator -> . GREATER_EQUALS_THAN
    (63) logical_operator -> . LESS_EQUALS_THAN
    (64) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 163
    OR              shift and go to state 143
    AND             shift and go to state 144
    NOT             shift and go to state 145
    GREATER_THAN    shift and go to state 146
    LESS_THAN       shift and go to state 147
    GREATER_EQUALS_THAN shift and go to state 148
    LESS_EQUALS_THAN shift and go to state 149
    EQUALITY        shift and go to state 150

    logical_operator               shift and go to state 142

state 141

    (33) if -> IF LPAREN logical_expression RPAREN . block
    (34) if -> IF LPAREN logical_expression RPAREN . block body
    (35) if -> IF LPAREN logical_expression RPAREN . block elseif
    (36) if -> IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 164

state 142

    (48) logical_expression -> logical_expression logical_operator . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . indexing
    (54) logical_factor -> . type
    (55) logical_factor -> . object_access
    (56) logical_factor -> . LPAREN logical_expression RPAREN
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_factor                 shift and go to state 165
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 143

    (57) logical_operator -> OR .

    TRUE            reduce using rule 57 (logical_operator -> OR .)
    FALSE           reduce using rule 57 (logical_operator -> OR .)
    ID              reduce using rule 57 (logical_operator -> OR .)
    LPAREN          reduce using rule 57 (logical_operator -> OR .)
    FLOAT_TYPE      reduce using rule 57 (logical_operator -> OR .)
    DOUBLE_TYPE     reduce using rule 57 (logical_operator -> OR .)
    DECIMAL_TYPE    reduce using rule 57 (logical_operator -> OR .)
    INTEGER_TYPE    reduce using rule 57 (logical_operator -> OR .)
    MINUS           reduce using rule 57 (logical_operator -> OR .)
    CLASSOBJECT     reduce using rule 57 (logical_operator -> OR .)


state 144

    (58) logical_operator -> AND .

    TRUE            reduce using rule 58 (logical_operator -> AND .)
    FALSE           reduce using rule 58 (logical_operator -> AND .)
    ID              reduce using rule 58 (logical_operator -> AND .)
    LPAREN          reduce using rule 58 (logical_operator -> AND .)
    FLOAT_TYPE      reduce using rule 58 (logical_operator -> AND .)
    DOUBLE_TYPE     reduce using rule 58 (logical_operator -> AND .)
    DECIMAL_TYPE    reduce using rule 58 (logical_operator -> AND .)
    INTEGER_TYPE    reduce using rule 58 (logical_operator -> AND .)
    MINUS           reduce using rule 58 (logical_operator -> AND .)
    CLASSOBJECT     reduce using rule 58 (logical_operator -> AND .)


state 145

    (59) logical_operator -> NOT .

    TRUE            reduce using rule 59 (logical_operator -> NOT .)
    FALSE           reduce using rule 59 (logical_operator -> NOT .)
    ID              reduce using rule 59 (logical_operator -> NOT .)
    LPAREN          reduce using rule 59 (logical_operator -> NOT .)
    FLOAT_TYPE      reduce using rule 59 (logical_operator -> NOT .)
    DOUBLE_TYPE     reduce using rule 59 (logical_operator -> NOT .)
    DECIMAL_TYPE    reduce using rule 59 (logical_operator -> NOT .)
    INTEGER_TYPE    reduce using rule 59 (logical_operator -> NOT .)
    MINUS           reduce using rule 59 (logical_operator -> NOT .)
    CLASSOBJECT     reduce using rule 59 (logical_operator -> NOT .)


state 146

    (60) logical_operator -> GREATER_THAN .

    TRUE            reduce using rule 60 (logical_operator -> GREATER_THAN .)
    FALSE           reduce using rule 60 (logical_operator -> GREATER_THAN .)
    ID              reduce using rule 60 (logical_operator -> GREATER_THAN .)
    LPAREN          reduce using rule 60 (logical_operator -> GREATER_THAN .)
    FLOAT_TYPE      reduce using rule 60 (logical_operator -> GREATER_THAN .)
    DOUBLE_TYPE     reduce using rule 60 (logical_operator -> GREATER_THAN .)
    DECIMAL_TYPE    reduce using rule 60 (logical_operator -> GREATER_THAN .)
    INTEGER_TYPE    reduce using rule 60 (logical_operator -> GREATER_THAN .)
    MINUS           reduce using rule 60 (logical_operator -> GREATER_THAN .)
    CLASSOBJECT     reduce using rule 60 (logical_operator -> GREATER_THAN .)


state 147

    (61) logical_operator -> LESS_THAN .

    TRUE            reduce using rule 61 (logical_operator -> LESS_THAN .)
    FALSE           reduce using rule 61 (logical_operator -> LESS_THAN .)
    ID              reduce using rule 61 (logical_operator -> LESS_THAN .)
    LPAREN          reduce using rule 61 (logical_operator -> LESS_THAN .)
    FLOAT_TYPE      reduce using rule 61 (logical_operator -> LESS_THAN .)
    DOUBLE_TYPE     reduce using rule 61 (logical_operator -> LESS_THAN .)
    DECIMAL_TYPE    reduce using rule 61 (logical_operator -> LESS_THAN .)
    INTEGER_TYPE    reduce using rule 61 (logical_operator -> LESS_THAN .)
    MINUS           reduce using rule 61 (logical_operator -> LESS_THAN .)
    CLASSOBJECT     reduce using rule 61 (logical_operator -> LESS_THAN .)


state 148

    (62) logical_operator -> GREATER_EQUALS_THAN .

    TRUE            reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    FALSE           reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    ID              reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    LPAREN          reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    FLOAT_TYPE      reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    DOUBLE_TYPE     reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    DECIMAL_TYPE    reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    INTEGER_TYPE    reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    MINUS           reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)
    CLASSOBJECT     reduce using rule 62 (logical_operator -> GREATER_EQUALS_THAN .)


state 149

    (63) logical_operator -> LESS_EQUALS_THAN .

    TRUE            reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    FALSE           reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    ID              reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    LPAREN          reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    FLOAT_TYPE      reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    DOUBLE_TYPE     reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    DECIMAL_TYPE    reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    INTEGER_TYPE    reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    MINUS           reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)
    CLASSOBJECT     reduce using rule 63 (logical_operator -> LESS_EQUALS_THAN .)


state 150

    (64) logical_operator -> EQUALITY .

    TRUE            reduce using rule 64 (logical_operator -> EQUALITY .)
    FALSE           reduce using rule 64 (logical_operator -> EQUALITY .)
    ID              reduce using rule 64 (logical_operator -> EQUALITY .)
    LPAREN          reduce using rule 64 (logical_operator -> EQUALITY .)
    FLOAT_TYPE      reduce using rule 64 (logical_operator -> EQUALITY .)
    DOUBLE_TYPE     reduce using rule 64 (logical_operator -> EQUALITY .)
    DECIMAL_TYPE    reduce using rule 64 (logical_operator -> EQUALITY .)
    INTEGER_TYPE    reduce using rule 64 (logical_operator -> EQUALITY .)
    MINUS           reduce using rule 64 (logical_operator -> EQUALITY .)
    CLASSOBJECT     reduce using rule 64 (logical_operator -> EQUALITY .)


state 151

    (23) function -> modifier data_type ID LPAREN . declarations RPAREN block
    (89) declarations -> . declaration
    (90) declarations -> . declaration COMMA
    (91) declarations -> . declaration COMMA declarations
    (92) declaration -> . data_type ID
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    data_type                      shift and go to state 166
    declarations                   shift and go to state 167
    declaration                    shift and go to state 168
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 152

    (24) function -> modifier VOID ID LPAREN . declarations RPAREN block
    (89) declarations -> . declaration
    (90) declarations -> . declaration COMMA
    (91) declarations -> . declaration COMMA declarations
    (92) declaration -> . data_type ID
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    declarations                   shift and go to state 169
    declaration                    shift and go to state 168
    data_type                      shift and go to state 166
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 153

    (25) function -> modifier STATIC data_type ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 170


state 154

    (26) function -> modifier STATIC VOID ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 171


state 155

    (70) assignment -> data_type ID EQUALS expression .
    (73) expression -> expression . PLUS term
    (74) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 70 (assignment -> data_type ID EQUALS expression .)
    RPAREN          reduce using rule 70 (assignment -> data_type ID EQUALS expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77


state 156

    (111) indexing -> ID LSQBRACKET ID RSQBRACKET .

    TIMES           reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    DIVIDE          reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    PLUS            reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    MINUS           reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    SEMICOLON       reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    RPAREN          reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    OR              reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    AND             reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    NOT             reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    GREATER_THAN    reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    LESS_THAN       reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    GREATER_EQUALS_THAN reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    LESS_EQUALS_THAN reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)
    EQUALITY        reduce using rule 111 (indexing -> ID LSQBRACKET ID RSQBRACKET .)


state 157

    (110) indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .

    TIMES           reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    DIVIDE          reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    PLUS            reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    MINUS           reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    SEMICOLON       reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    RPAREN          reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    OR              reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    AND             reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    NOT             reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    GREATER_THAN    reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    LESS_THAN       reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    GREATER_EQUALS_THAN reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    LESS_EQUALS_THAN reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    EQUALITY        reduce using rule 110 (indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)


state 158

    (31) expression -> object_access LPAREN expression RPAREN .

    PLUS            reduce using rule 31 (expression -> object_access LPAREN expression RPAREN .)
    MINUS           reduce using rule 31 (expression -> object_access LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 31 (expression -> object_access LPAREN expression RPAREN .)
    RPAREN          reduce using rule 31 (expression -> object_access LPAREN expression RPAREN .)


state 159

    (46) while_loop -> WHILE LPAREN logical_expression RPAREN . block
    (47) while_loop -> WHILE LPAREN logical_expression RPAREN . block body
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 172

state 160

    (44) loop_for -> FOR LPAREN assignment SEMICOLON . logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> FOR LPAREN assignment SEMICOLON . logical_expression SEMICOLON assignment RPAREN block body
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . indexing
    (54) logical_factor -> . type
    (55) logical_factor -> . object_access
    (56) logical_factor -> . LPAREN logical_expression RPAREN
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_expression             shift and go to state 173
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 161

    (70) assignment -> data_type ID . EQUALS expression

    EQUALS          shift and go to state 121


state 162

    (67) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN . ID LSQBRACKET type RSQBRACKET

    ID              shift and go to state 174


state 163

    (56) logical_factor -> LPAREN logical_expression RPAREN .

    RPAREN          reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    OR              reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    AND             reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    NOT             reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    GREATER_THAN    reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    LESS_THAN       reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    GREATER_EQUALS_THAN reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    LESS_EQUALS_THAN reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    EQUALITY        reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)
    SEMICOLON       reduce using rule 56 (logical_factor -> LPAREN logical_expression RPAREN .)


state 164

    (33) if -> IF LPAREN logical_expression RPAREN block .
    (34) if -> IF LPAREN logical_expression RPAREN block . body
    (35) if -> IF LPAREN logical_expression RPAREN block . elseif
    (36) if -> IF LPAREN logical_expression RPAREN block . else
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (37) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (38) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (39) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (40) else -> . ELSE block
    (41) else -> . ELSE block body
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (33) if -> . IF LPAREN logical_expression RPAREN block
    (34) if -> . IF LPAREN logical_expression RPAREN block body
    (35) if -> . IF LPAREN logical_expression RPAREN block elseif
    (36) if -> . IF LPAREN logical_expression RPAREN block else
    (42) loop -> . while_loop
    (43) loop -> . loop_for
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (70) assignment -> . data_type ID EQUALS expression
    (71) assignment -> . ID EQUALS expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (92) declaration -> . data_type ID
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (46) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (47) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (44) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (93) modifier -> . PUBLIC
    (94) modifier -> . PRIVATE
    (95) modifier -> . PROTECTED
    (96) modifier -> . INTERNAL
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 33 (if -> IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 178
    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    body                           shift and go to state 175
    elseif                         shift and go to state 176
    else                           shift and go to state 177
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 165

    (48) logical_expression -> logical_expression logical_operator logical_factor .

    RPAREN          reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    OR              reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    AND             reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    NOT             reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_THAN    reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_THAN       reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_EQUALS_THAN reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    EQUALITY        reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    SEMICOLON       reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)


state 166

    (92) declaration -> data_type . ID

    ID              shift and go to state 179


state 167

    (23) function -> modifier data_type ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 180


state 168

    (89) declarations -> declaration .
    (90) declarations -> declaration . COMMA
    (91) declarations -> declaration . COMMA declarations

    RPAREN          reduce using rule 89 (declarations -> declaration .)
    COMMA           shift and go to state 181


state 169

    (24) function -> modifier VOID ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 182


state 170

    (25) function -> modifier STATIC data_type ID LPAREN . declarations RPAREN block
    (89) declarations -> . declaration
    (90) declarations -> . declaration COMMA
    (91) declarations -> . declaration COMMA declarations
    (92) declaration -> . data_type ID
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    data_type                      shift and go to state 166
    declarations                   shift and go to state 183
    declaration                    shift and go to state 168
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 171

    (26) function -> modifier STATIC VOID ID LPAREN . declarations RPAREN block
    (89) declarations -> . declaration
    (90) declarations -> . declaration COMMA
    (91) declarations -> . declaration COMMA declarations
    (92) declaration -> . data_type ID
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    declarations                   shift and go to state 184
    declaration                    shift and go to state 168
    data_type                      shift and go to state 166
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 172

    (46) while_loop -> WHILE LPAREN logical_expression RPAREN block .
    (47) while_loop -> WHILE LPAREN logical_expression RPAREN block . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (33) if -> . IF LPAREN logical_expression RPAREN block
    (34) if -> . IF LPAREN logical_expression RPAREN block body
    (35) if -> . IF LPAREN logical_expression RPAREN block elseif
    (36) if -> . IF LPAREN logical_expression RPAREN block else
    (42) loop -> . while_loop
    (43) loop -> . loop_for
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (70) assignment -> . data_type ID EQUALS expression
    (71) assignment -> . ID EQUALS expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (92) declaration -> . data_type ID
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (46) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (47) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (44) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (93) modifier -> . PUBLIC
    (94) modifier -> . PRIVATE
    (95) modifier -> . PROTECTED
    (96) modifier -> . INTERNAL
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 46 (while_loop -> WHILE LPAREN logical_expression RPAREN block .)
    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    body                           shift and go to state 185
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 173

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression . SEMICOLON assignment RPAREN block
    (45) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression . SEMICOLON assignment RPAREN block body
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (57) logical_operator -> . OR
    (58) logical_operator -> . AND
    (59) logical_operator -> . NOT
    (60) logical_operator -> . GREATER_THAN
    (61) logical_operator -> . LESS_THAN
    (62) logical_operator -> . GREATER_EQUALS_THAN
    (63) logical_operator -> . LESS_EQUALS_THAN
    (64) logical_operator -> . EQUALITY

    SEMICOLON       shift and go to state 186
    OR              shift and go to state 143
    AND             shift and go to state 144
    NOT             shift and go to state 145
    GREATER_THAN    shift and go to state 146
    LESS_THAN       shift and go to state 147
    GREATER_EQUALS_THAN shift and go to state 148
    LESS_EQUALS_THAN shift and go to state 149
    EQUALITY        shift and go to state 150

    logical_operator               shift and go to state 142

state 174

    (67) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID . LSQBRACKET type RSQBRACKET

    LSQBRACKET      shift and go to state 187


state 175

    (34) if -> IF LPAREN logical_expression RPAREN block body .

    RBRACKET        reduce using rule 34 (if -> IF LPAREN logical_expression RPAREN block body .)


state 176

    (35) if -> IF LPAREN logical_expression RPAREN block elseif .

    RBRACKET        reduce using rule 35 (if -> IF LPAREN logical_expression RPAREN block elseif .)


state 177

    (36) if -> IF LPAREN logical_expression RPAREN block else .

    RBRACKET        reduce using rule 36 (if -> IF LPAREN logical_expression RPAREN block else .)


state 178

    (37) elseif -> ELSE . IF LPAREN logical_expression RPAREN block
    (38) elseif -> ELSE . IF LPAREN logical_expression RPAREN block elseif
    (39) elseif -> ELSE . IF LPAREN logical_expression RPAREN block else
    (40) else -> ELSE . block
    (41) else -> ELSE . block body
    (13) block -> . LBRACKET body RBRACKET

    IF              shift and go to state 188
    LBRACKET        shift and go to state 25

    block                          shift and go to state 189

state 179

    (92) declaration -> data_type ID .

    COMMA           reduce using rule 92 (declaration -> data_type ID .)
    RPAREN          reduce using rule 92 (declaration -> data_type ID .)


state 180

    (23) function -> modifier data_type ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 190

state 181

    (90) declarations -> declaration COMMA .
    (91) declarations -> declaration COMMA . declarations
    (89) declarations -> . declaration
    (90) declarations -> . declaration COMMA
    (91) declarations -> . declaration COMMA declarations
    (92) declaration -> . data_type ID
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    RPAREN          reduce using rule 90 (declarations -> declaration COMMA .)
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    declaration                    shift and go to state 168
    declarations                   shift and go to state 191
    data_type                      shift and go to state 166
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 182

    (24) function -> modifier VOID ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 192

state 183

    (25) function -> modifier STATIC data_type ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 193


state 184

    (26) function -> modifier STATIC VOID ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 194


state 185

    (47) while_loop -> WHILE LPAREN logical_expression RPAREN block body .

    RBRACKET        reduce using rule 47 (while_loop -> WHILE LPAREN logical_expression RPAREN block body .)


state 186

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON . assignment RPAREN block
    (45) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON . assignment RPAREN block body
    (70) assignment -> . data_type ID EQUALS expression
    (71) assignment -> . ID EQUALS expression
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 134
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LIST            shift and go to state 68
    CLASSOBJECT     shift and go to state 85

    assignment                     shift and go to state 195
    data_type                      shift and go to state 133
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66

state 187

    (67) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET . type RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type

    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    type                           shift and go to state 196

state 188

    (37) elseif -> ELSE IF . LPAREN logical_expression RPAREN block
    (38) elseif -> ELSE IF . LPAREN logical_expression RPAREN block elseif
    (39) elseif -> ELSE IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 197


state 189

    (40) else -> ELSE block .
    (41) else -> ELSE block . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (33) if -> . IF LPAREN logical_expression RPAREN block
    (34) if -> . IF LPAREN logical_expression RPAREN block body
    (35) if -> . IF LPAREN logical_expression RPAREN block elseif
    (36) if -> . IF LPAREN logical_expression RPAREN block else
    (42) loop -> . while_loop
    (43) loop -> . loop_for
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (70) assignment -> . data_type ID EQUALS expression
    (71) assignment -> . ID EQUALS expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (92) declaration -> . data_type ID
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (46) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (47) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (44) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (93) modifier -> . PUBLIC
    (94) modifier -> . PRIVATE
    (95) modifier -> . PROTECTED
    (96) modifier -> . INTERNAL
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 40 (else -> ELSE block .)
    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    body                           shift and go to state 198
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    assignment                     shift and go to state 32
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 190

    (23) function -> modifier data_type ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 23 (function -> modifier data_type ID LPAREN declarations RPAREN block .)


state 191

    (91) declarations -> declaration COMMA declarations .

    RPAREN          reduce using rule 91 (declarations -> declaration COMMA declarations .)


state 192

    (24) function -> modifier VOID ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 24 (function -> modifier VOID ID LPAREN declarations RPAREN block .)


state 193

    (25) function -> modifier STATIC data_type ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 199

state 194

    (26) function -> modifier STATIC VOID ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 200

state 195

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment . RPAREN block
    (45) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment . RPAREN block body

    RPAREN          shift and go to state 201


state 196

    (67) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type . RSQBRACKET

    RSQBRACKET      shift and go to state 202


state 197

    (37) elseif -> ELSE IF LPAREN . logical_expression RPAREN block
    (38) elseif -> ELSE IF LPAREN . logical_expression RPAREN block elseif
    (39) elseif -> ELSE IF LPAREN . logical_expression RPAREN block else
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . indexing
    (54) logical_factor -> . type
    (55) logical_factor -> . object_access
    (56) logical_factor -> . LPAREN logical_expression RPAREN
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID

    TRUE            shift and go to state 110
    FALSE           shift and go to state 111
    ID              shift and go to state 112
    LPAREN          shift and go to state 107
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45
    CLASSOBJECT     shift and go to state 81

    logical_expression             shift and go to state 203
    logical_factor                 shift and go to state 109
    indexing                       shift and go to state 113
    type                           shift and go to state 114
    object_access                  shift and go to state 115

state 198

    (41) else -> ELSE block body .

    RBRACKET        reduce using rule 41 (else -> ELSE block body .)


state 199

    (25) function -> modifier STATIC data_type ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 25 (function -> modifier STATIC data_type ID LPAREN declarations RPAREN block .)


state 200

    (26) function -> modifier STATIC VOID ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 26 (function -> modifier STATIC VOID ID LPAREN declarations RPAREN block .)


state 201

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN . block
    (45) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN . block body
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 204

state 202

    (67) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .

    ID              reduce using rule 67 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)
    GREATER_THAN    reduce using rule 67 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)


state 203

    (37) elseif -> ELSE IF LPAREN logical_expression . RPAREN block
    (38) elseif -> ELSE IF LPAREN logical_expression . RPAREN block elseif
    (39) elseif -> ELSE IF LPAREN logical_expression . RPAREN block else
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (57) logical_operator -> . OR
    (58) logical_operator -> . AND
    (59) logical_operator -> . NOT
    (60) logical_operator -> . GREATER_THAN
    (61) logical_operator -> . LESS_THAN
    (62) logical_operator -> . GREATER_EQUALS_THAN
    (63) logical_operator -> . LESS_EQUALS_THAN
    (64) logical_operator -> . EQUALITY

    RPAREN          shift and go to state 205
    OR              shift and go to state 143
    AND             shift and go to state 144
    NOT             shift and go to state 145
    GREATER_THAN    shift and go to state 146
    LESS_THAN       shift and go to state 147
    GREATER_EQUALS_THAN shift and go to state 148
    LESS_EQUALS_THAN shift and go to state 149
    EQUALITY        shift and go to state 150

    logical_operator               shift and go to state 142

state 204

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .
    (45) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . if
    (17) body -> . loop
    (18) body -> . function
    (19) lines -> . assignment
    (20) lines -> . expression
    (21) lines -> . declaration
    (22) lines -> . return
    (33) if -> . IF LPAREN logical_expression RPAREN block
    (34) if -> . IF LPAREN logical_expression RPAREN block body
    (35) if -> . IF LPAREN logical_expression RPAREN block elseif
    (36) if -> . IF LPAREN logical_expression RPAREN block else
    (42) loop -> . while_loop
    (43) loop -> . loop_for
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (70) assignment -> . data_type ID EQUALS expression
    (71) assignment -> . ID EQUALS expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (73) expression -> . expression PLUS term
    (74) expression -> . expression MINUS term
    (75) expression -> . term
    (92) declaration -> . data_type ID
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (46) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (47) while_loop -> . WHILE LPAREN logical_expression RPAREN block body
    (44) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (45) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body
    (93) modifier -> . PUBLIC
    (94) modifier -> . PRIVATE
    (95) modifier -> . PROTECTED
    (96) modifier -> . INTERNAL
    (97) data_type -> . primitive
    (98) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (76) term -> . term TIMES factor
    (77) term -> . term DIVIDE factor
    (78) term -> . factor
    (99) primitive -> . INT
    (100) primitive -> . FLOAT
    (101) primitive -> . BOOL
    (102) primitive -> . BYTE
    (103) primitive -> . CHAR
    (104) primitive -> . SBYTE
    (105) primitive -> . DECIMAL
    (106) primitive -> . DOUBLE
    (107) primitive -> . LONG
    (108) primitive -> . SHORT
    (109) primitive -> . UINT
    (65) data_structure -> . data_structure_list
    (66) data_structure -> . data_structure_array
    (79) factor -> . type
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . object_access
    (82) factor -> . ID
    (83) factor -> . indexing
    (67) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (68) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (69) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (84) type -> . FLOAT_TYPE
    (85) type -> . DOUBLE_TYPE
    (86) type -> . DECIMAL_TYPE
    (87) type -> . INTEGER_TYPE
    (88) type -> . MINUS type
    (110) indexing -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (111) indexing -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 44 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .)
    IF              shift and go to state 36
    ID              shift and go to state 42
    RETURN          shift and go to state 46
    WHILE           shift and go to state 48
    FOR             shift and go to state 49
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    CLASSOBJECT     shift and go to state 52
    INT             shift and go to state 54
    FLOAT           shift and go to state 55
    BOOL            shift and go to state 56
    BYTE            shift and go to state 57
    CHAR            shift and go to state 58
    SBYTE           shift and go to state 59
    DECIMAL         shift and go to state 60
    DOUBLE          shift and go to state 61
    LONG            shift and go to state 62
    SHORT           shift and go to state 63
    UINT            shift and go to state 64
    LPAREN          shift and go to state 37
    LIST            shift and go to state 68
    FLOAT_TYPE      shift and go to state 69
    DOUBLE_TYPE     shift and go to state 70
    DECIMAL_TYPE    shift and go to state 71
    INTEGER_TYPE    shift and go to state 72
    MINUS           shift and go to state 45

    assignment                     shift and go to state 32
    body                           shift and go to state 206
    lines                          shift and go to state 28
    if                             shift and go to state 29
    loop                           shift and go to state 30
    function                       shift and go to state 31
    expression                     shift and go to state 33
    declaration                    shift and go to state 34
    return                         shift and go to state 35
    while_loop                     shift and go to state 38
    loop_for                       shift and go to state 39
    modifier                       shift and go to state 40
    data_type                      shift and go to state 41
    object_access                  shift and go to state 43
    term                           shift and go to state 44
    type                           shift and go to state 47
    primitive                      shift and go to state 50
    data_structure                 shift and go to state 51
    factor                         shift and go to state 53
    data_structure_list            shift and go to state 65
    data_structure_array           shift and go to state 66
    indexing                       shift and go to state 67

state 205

    (37) elseif -> ELSE IF LPAREN logical_expression RPAREN . block
    (38) elseif -> ELSE IF LPAREN logical_expression RPAREN . block elseif
    (39) elseif -> ELSE IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 207

state 206

    (45) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .

    RBRACKET        reduce using rule 45 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body .)


state 207

    (37) elseif -> ELSE IF LPAREN logical_expression RPAREN block .
    (38) elseif -> ELSE IF LPAREN logical_expression RPAREN block . elseif
    (39) elseif -> ELSE IF LPAREN logical_expression RPAREN block . else
    (37) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (38) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (39) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (40) else -> . ELSE block
    (41) else -> . ELSE block body

    RBRACKET        reduce using rule 37 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 178

    elseif                         shift and go to state 208
    else                           shift and go to state 209

state 208

    (38) elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .

    RBRACKET        reduce using rule 38 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)


state 209

    (39) elseif -> ELSE IF LPAREN logical_expression RPAREN block else .

    RBRACKET        reduce using rule 39 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)

