Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    DIVIDE_EQUAL
    DO
    FILE
    IN
    MINUS_EQUAL
    MODULE
    MODULE_EQUAL
    NEW
    NINT
    NUINT
    PLUS_EQUAL
    STRING
    THEN
    TIMES_EQUAL
    ULONG
    USHORT
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> usings namespace class
Rule 2     program -> namespace class
Rule 3     usings -> using usings
Rule 4     usings -> using
Rule 5     using -> USING CLASSOBJECT SEMICOLON
Rule 6     namespace -> NAMESPACE CLASSOBJECT SEMICOLON
Rule 7     class -> modifier CLASS CLASSOBJECT block
Rule 8     class -> modifier STATIC CLASS CLASSOBJECT block
Rule 9     object_access -> ID DOT ID
Rule 10    object_access -> CLASSOBJECT DOT CLASSOBJECT
Rule 11    object_access -> ID DOT CLASSOBJECT
Rule 12    object_access -> CLASSOBJECT DOT ID
Rule 13    block -> LBRACKET body RBRACKET
Rule 14    body -> lines SEMICOLON
Rule 15    body -> lines SEMICOLON body
Rule 16    body -> function
Rule 17    lines -> assignment
Rule 18    lines -> expression
Rule 19    lines -> declaration
Rule 20    lines -> if
Rule 21    lines -> loop
Rule 22    lines -> return
Rule 23    function -> modifier data_type ID LPAREN declarations RPAREN block
Rule 24    function -> modifier VOID ID LPAREN declarations RPAREN block
Rule 25    function -> modifier STATIC data_type ID LPAREN declarations RPAREN block
Rule 26    function -> modifier STATIC VOID ID LPAREN declarations RPAREN block
Rule 27    return -> RETURN ID
Rule 28    return -> RETURN type
Rule 29    lambda_function -> LPAREN ID RPAREN ARROW expression
Rule 30    lambda_function -> LPAREN ID RPAREN ARROW block
Rule 31    type -> FLOAT_TYPE
Rule 32    type -> DOUBLE_TYPE
Rule 33    type -> DECIMAL_TYPE
Rule 34    type -> INTEGER_TYPE
Rule 35    if -> IF LPAREN logical_expression RPAREN block
Rule 36    if -> IF LPAREN logical_expression RPAREN block elseif
Rule 37    if -> IF LPAREN logical_expression RPAREN block else
Rule 38    elseif -> ELSE IF LPAREN logical_expression RPAREN block
Rule 39    elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif
Rule 40    elseif -> ELSE IF LPAREN logical_expression RPAREN block else
Rule 41    else -> ELSE block
Rule 42    loop -> while_loop
Rule 43    loop -> loop_for
Rule 44    loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
Rule 45    while_loop -> WHILE LPAREN logical_expression RPAREN block
Rule 46    logical_expression -> logical_expression logical_operator logical_factor
Rule 47    logical_expression -> logical_factor
Rule 48    logical_factor -> TRUE
Rule 49    logical_factor -> FALSE
Rule 50    logical_factor -> ID
Rule 51    logical_factor -> logical_expression
Rule 52    data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
Rule 53    assignment -> ID EQUALS expression
Rule 54    assignment -> data_type ID EQUALS expression
Rule 55    assignment -> CLASSOBJECT ID
Rule 56    assignment -> ID EQUALS ID
Rule 57    declarations -> declaration
Rule 58    declarations -> declaration COMMA
Rule 59    declarations -> declaration COMMA declarations
Rule 60    declaration -> data_type ID
Rule 61    expression -> expression PLUS term
Rule 62    expression -> expression MINUS term
Rule 63    expression -> term
Rule 64    term -> term TIMES factor
Rule 65    term -> term DIVIDE factor
Rule 66    term -> factor
Rule 67    factor -> type
Rule 68    factor -> LPAREN expression RPAREN
Rule 69    factor -> object_access
Rule 70    factor -> ID
Rule 71    factor -> index
Rule 72    modifier -> PUBLIC
Rule 73    modifier -> PRIVATE
Rule 74    modifier -> PROTECTED
Rule 75    modifier -> INTERNAL
Rule 76    data_type -> primitive
Rule 77    data_type -> data_structure
Rule 78    primitive -> INT
Rule 79    primitive -> FLOAT
Rule 80    primitive -> BOOL
Rule 81    primitive -> BYTE
Rule 82    primitive -> CHAR
Rule 83    primitive -> SBYTE
Rule 84    primitive -> DECIMAL
Rule 85    primitive -> DOUBLE
Rule 86    primitive -> LONG
Rule 87    primitive -> SHORT
Rule 88    primitive -> UINT
Rule 89    data_structure -> array
Rule 90    array -> primitive LSQBRACKET RSQBRACKET
Rule 91    array -> CLASSOBJECT LSQBRACKET RSQBRACKET
Rule 92    index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET
Rule 93    index -> ID LSQBRACKET ID RSQBRACKET
Rule 94    logical_operator -> OR
Rule 95    logical_operator -> AND
Rule 96    logical_operator -> NOT
Rule 97    logical_operator -> GREATER_THAN
Rule 98    logical_operator -> LESS_THAN
Rule 99    logical_operator -> GREATER_EQUALS_THAN
Rule 100   logical_operator -> LESS_EQUALS_THAN

Terminals, with rules where they appear

AND                  : 95
ARROW                : 29 30
BOOL                 : 80
BYTE                 : 81
CHAR                 : 82
CHARACTER            : 
CLASS                : 7 8
CLASSOBJECT          : 5 6 7 8 10 10 11 12 55 91
COMMA                : 58 59
DECIMAL              : 84
DECIMAL_TYPE         : 33
DIVIDE               : 65
DIVIDE_EQUAL         : 
DO                   : 
DOT                  : 9 10 11 12
DOUBLE               : 85
DOUBLE_TYPE          : 32
ELSE                 : 38 39 40 41
EQUALS               : 53 54 56
FALSE                : 49
FILE                 : 
FLOAT                : 79
FLOAT_TYPE           : 31
FOR                  : 44
GREATER_EQUALS_THAN  : 99
GREATER_THAN         : 52 97
ID                   : 9 9 11 12 23 24 25 26 27 29 30 50 52 53 54 55 56 56 60 70 92 93 93
IF                   : 35 36 37 38 39 40
IN                   : 
INT                  : 78
INTEGER_TYPE         : 34 92
INTERNAL             : 75
LBRACKET             : 13
LESS_EQUALS_THAN     : 100
LESS_THAN            : 52 98
LIST                 : 52
LONG                 : 86
LPAREN               : 23 24 25 26 29 30 35 36 37 38 39 40 44 45 68
LSQBRACKET           : 52 90 91 92 93
MINUS                : 62
MINUS_EQUAL          : 
MODULE               : 
MODULE_EQUAL         : 
NAMESPACE            : 6
NEW                  : 
NINT                 : 
NOT                  : 96
NUINT                : 
OR                   : 94
PLUS                 : 61
PLUS_EQUAL           : 
PRIVATE              : 73
PROTECTED            : 74
PUBLIC               : 72
RBRACKET             : 13
RETURN               : 27 28
RPAREN               : 23 24 25 26 29 30 35 36 37 38 39 40 44 45 68
RSQBRACKET           : 52 90 91 92 93
SBYTE                : 83
SEMICOLON            : 5 6 14 15 44 44
SHORT                : 87
STATIC               : 8 25 26
STRING               : 
THEN                 : 
TIMES                : 64
TIMES_EQUAL          : 
TRUE                 : 48
UINT                 : 88
ULONG                : 
USHORT               : 
USING                : 5
VAR                  : 
VOID                 : 24 26
WHILE                : 45
error                : 

Nonterminals, with rules where they appear

array                : 89
assignment           : 17 44 44
block                : 7 8 23 24 25 26 30 35 36 37 38 39 40 41 44 45
body                 : 13 15
class                : 1 2
data_structure       : 77
data_structure_list  : 
data_type            : 23 25 52 54 60
declaration          : 19 57 58 59
declarations         : 23 24 25 26 59
else                 : 37 40
elseif               : 36 39
expression           : 18 29 53 54 61 62 68
factor               : 64 65 66
function             : 16
if                   : 20
index                : 71
lambda_function      : 
lines                : 14 15
logical_expression   : 35 36 37 38 39 40 44 45 46 51
logical_factor       : 46 47
logical_operator     : 46
loop                 : 21
loop_for             : 43
modifier             : 7 8 23 24 25 26
namespace            : 1 2
object_access        : 69
primitive            : 76 90
program              : 0
return               : 22
term                 : 61 62 63 64 65
type                 : 28 52 67
using                : 3 4
usings               : 1 3
while_loop           : 42

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . usings namespace class
    (2) program -> . namespace class
    (3) usings -> . using usings
    (4) usings -> . using
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5
    USING           shift and go to state 6

    program                        shift and go to state 1
    usings                         shift and go to state 2
    namespace                      shift and go to state 3
    using                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> usings . namespace class
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5

    namespace                      shift and go to state 7

state 3

    (2) program -> namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
    (72) modifier -> . PUBLIC
    (73) modifier -> . PRIVATE
    (74) modifier -> . PROTECTED
    (75) modifier -> . INTERNAL

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 8
    modifier                       shift and go to state 9

state 4

    (3) usings -> using . usings
    (4) usings -> using .
    (3) usings -> . using usings
    (4) usings -> . using
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       reduce using rule 4 (usings -> using .)
    USING           shift and go to state 6

    using                          shift and go to state 4
    usings                         shift and go to state 14

state 5

    (6) namespace -> NAMESPACE . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 15


state 6

    (5) using -> USING . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 16


state 7

    (1) program -> usings namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
    (72) modifier -> . PUBLIC
    (73) modifier -> . PRIVATE
    (74) modifier -> . PROTECTED
    (75) modifier -> . INTERNAL

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 17
    modifier                       shift and go to state 9

state 8

    (2) program -> namespace class .

    $end            reduce using rule 2 (program -> namespace class .)


state 9

    (7) class -> modifier . CLASS CLASSOBJECT block
    (8) class -> modifier . STATIC CLASS CLASSOBJECT block

    CLASS           shift and go to state 18
    STATIC          shift and go to state 19


state 10

    (72) modifier -> PUBLIC .

    CLASS           reduce using rule 72 (modifier -> PUBLIC .)
    STATIC          reduce using rule 72 (modifier -> PUBLIC .)
    VOID            reduce using rule 72 (modifier -> PUBLIC .)
    INT             reduce using rule 72 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 72 (modifier -> PUBLIC .)
    BOOL            reduce using rule 72 (modifier -> PUBLIC .)
    BYTE            reduce using rule 72 (modifier -> PUBLIC .)
    CHAR            reduce using rule 72 (modifier -> PUBLIC .)
    SBYTE           reduce using rule 72 (modifier -> PUBLIC .)
    DECIMAL         reduce using rule 72 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 72 (modifier -> PUBLIC .)
    LONG            reduce using rule 72 (modifier -> PUBLIC .)
    SHORT           reduce using rule 72 (modifier -> PUBLIC .)
    UINT            reduce using rule 72 (modifier -> PUBLIC .)
    CLASSOBJECT     reduce using rule 72 (modifier -> PUBLIC .)


state 11

    (73) modifier -> PRIVATE .

    CLASS           reduce using rule 73 (modifier -> PRIVATE .)
    STATIC          reduce using rule 73 (modifier -> PRIVATE .)
    VOID            reduce using rule 73 (modifier -> PRIVATE .)
    INT             reduce using rule 73 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 73 (modifier -> PRIVATE .)
    BOOL            reduce using rule 73 (modifier -> PRIVATE .)
    BYTE            reduce using rule 73 (modifier -> PRIVATE .)
    CHAR            reduce using rule 73 (modifier -> PRIVATE .)
    SBYTE           reduce using rule 73 (modifier -> PRIVATE .)
    DECIMAL         reduce using rule 73 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 73 (modifier -> PRIVATE .)
    LONG            reduce using rule 73 (modifier -> PRIVATE .)
    SHORT           reduce using rule 73 (modifier -> PRIVATE .)
    UINT            reduce using rule 73 (modifier -> PRIVATE .)
    CLASSOBJECT     reduce using rule 73 (modifier -> PRIVATE .)


state 12

    (74) modifier -> PROTECTED .

    CLASS           reduce using rule 74 (modifier -> PROTECTED .)
    STATIC          reduce using rule 74 (modifier -> PROTECTED .)
    VOID            reduce using rule 74 (modifier -> PROTECTED .)
    INT             reduce using rule 74 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 74 (modifier -> PROTECTED .)
    BOOL            reduce using rule 74 (modifier -> PROTECTED .)
    BYTE            reduce using rule 74 (modifier -> PROTECTED .)
    CHAR            reduce using rule 74 (modifier -> PROTECTED .)
    SBYTE           reduce using rule 74 (modifier -> PROTECTED .)
    DECIMAL         reduce using rule 74 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 74 (modifier -> PROTECTED .)
    LONG            reduce using rule 74 (modifier -> PROTECTED .)
    SHORT           reduce using rule 74 (modifier -> PROTECTED .)
    UINT            reduce using rule 74 (modifier -> PROTECTED .)
    CLASSOBJECT     reduce using rule 74 (modifier -> PROTECTED .)


state 13

    (75) modifier -> INTERNAL .

    CLASS           reduce using rule 75 (modifier -> INTERNAL .)
    STATIC          reduce using rule 75 (modifier -> INTERNAL .)
    VOID            reduce using rule 75 (modifier -> INTERNAL .)
    INT             reduce using rule 75 (modifier -> INTERNAL .)
    FLOAT           reduce using rule 75 (modifier -> INTERNAL .)
    BOOL            reduce using rule 75 (modifier -> INTERNAL .)
    BYTE            reduce using rule 75 (modifier -> INTERNAL .)
    CHAR            reduce using rule 75 (modifier -> INTERNAL .)
    SBYTE           reduce using rule 75 (modifier -> INTERNAL .)
    DECIMAL         reduce using rule 75 (modifier -> INTERNAL .)
    DOUBLE          reduce using rule 75 (modifier -> INTERNAL .)
    LONG            reduce using rule 75 (modifier -> INTERNAL .)
    SHORT           reduce using rule 75 (modifier -> INTERNAL .)
    UINT            reduce using rule 75 (modifier -> INTERNAL .)
    CLASSOBJECT     reduce using rule 75 (modifier -> INTERNAL .)


state 14

    (3) usings -> using usings .

    NAMESPACE       reduce using rule 3 (usings -> using usings .)


state 15

    (6) namespace -> NAMESPACE CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 20


state 16

    (5) using -> USING CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 21


state 17

    (1) program -> usings namespace class .

    $end            reduce using rule 1 (program -> usings namespace class .)


state 18

    (7) class -> modifier CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 22


state 19

    (8) class -> modifier STATIC . CLASS CLASSOBJECT block

    CLASS           shift and go to state 23


state 20

    (6) namespace -> NAMESPACE CLASSOBJECT SEMICOLON .

    PUBLIC          reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PRIVATE         reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PROTECTED       reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    INTERNAL        reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)


state 21

    (5) using -> USING CLASSOBJECT SEMICOLON .

    USING           reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)
    NAMESPACE       reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)


state 22

    (7) class -> modifier CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 24

state 23

    (8) class -> modifier STATIC CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 26


state 24

    (7) class -> modifier CLASS CLASSOBJECT block .

    $end            reduce using rule 7 (class -> modifier CLASS CLASSOBJECT block .)


state 25

    (13) block -> LBRACKET . body RBRACKET
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . function
    (17) lines -> . assignment
    (18) lines -> . expression
    (19) lines -> . declaration
    (20) lines -> . if
    (21) lines -> . loop
    (22) lines -> . return
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (53) assignment -> . ID EQUALS expression
    (54) assignment -> . data_type ID EQUALS expression
    (55) assignment -> . CLASSOBJECT ID
    (56) assignment -> . ID EQUALS ID
    (61) expression -> . expression PLUS term
    (62) expression -> . expression MINUS term
    (63) expression -> . term
    (60) declaration -> . data_type ID
    (35) if -> . IF LPAREN logical_expression RPAREN block
    (36) if -> . IF LPAREN logical_expression RPAREN block elseif
    (37) if -> . IF LPAREN logical_expression RPAREN block else
    (42) loop -> . while_loop
    (43) loop -> . loop_for
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (72) modifier -> . PUBLIC
    (73) modifier -> . PRIVATE
    (74) modifier -> . PROTECTED
    (75) modifier -> . INTERNAL
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (64) term -> . term TIMES factor
    (65) term -> . term DIVIDE factor
    (66) term -> . factor
    (45) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (44) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 38
    CLASSOBJECT     shift and go to state 40
    IF              shift and go to state 42
    RETURN          shift and go to state 45
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    LPAREN          shift and go to state 39
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69

    body                           shift and go to state 27
    lines                          shift and go to state 28
    function                       shift and go to state 29
    assignment                     shift and go to state 30
    expression                     shift and go to state 31
    declaration                    shift and go to state 32
    if                             shift and go to state 33
    loop                           shift and go to state 34
    return                         shift and go to state 35
    modifier                       shift and go to state 36
    data_type                      shift and go to state 37
    term                           shift and go to state 41
    while_loop                     shift and go to state 43
    loop_for                       shift and go to state 44
    type                           shift and go to state 46
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    factor                         shift and go to state 49
    array                          shift and go to state 63
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 26

    (8) class -> modifier STATIC CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 70

state 27

    (13) block -> LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 71


state 28

    (14) body -> lines . SEMICOLON
    (15) body -> lines . SEMICOLON body

    SEMICOLON       shift and go to state 72


state 29

    (16) body -> function .

    RBRACKET        reduce using rule 16 (body -> function .)


state 30

    (17) lines -> assignment .

    SEMICOLON       reduce using rule 17 (lines -> assignment .)


state 31

    (18) lines -> expression .
    (61) expression -> expression . PLUS term
    (62) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 18 (lines -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 32

    (19) lines -> declaration .

    SEMICOLON       reduce using rule 19 (lines -> declaration .)


state 33

    (20) lines -> if .

    SEMICOLON       reduce using rule 20 (lines -> if .)


state 34

    (21) lines -> loop .

    SEMICOLON       reduce using rule 21 (lines -> loop .)


state 35

    (22) lines -> return .

    SEMICOLON       reduce using rule 22 (lines -> return .)


state 36

    (23) function -> modifier . data_type ID LPAREN declarations RPAREN block
    (24) function -> modifier . VOID ID LPAREN declarations RPAREN block
    (25) function -> modifier . STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> modifier . STATIC VOID ID LPAREN declarations RPAREN block
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 76
    STATIC          shift and go to state 77
    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    CLASSOBJECT     shift and go to state 78

    data_type                      shift and go to state 75
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 37

    (54) assignment -> data_type . ID EQUALS expression
    (60) declaration -> data_type . ID

    ID              shift and go to state 79


state 38

    (53) assignment -> ID . EQUALS expression
    (56) assignment -> ID . EQUALS ID
    (70) factor -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (92) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> ID . LSQBRACKET ID RSQBRACKET

    EQUALS          shift and go to state 80
    TIMES           reduce using rule 70 (factor -> ID .)
    DIVIDE          reduce using rule 70 (factor -> ID .)
    PLUS            reduce using rule 70 (factor -> ID .)
    MINUS           reduce using rule 70 (factor -> ID .)
    SEMICOLON       reduce using rule 70 (factor -> ID .)
    DOT             shift and go to state 81
    LSQBRACKET      shift and go to state 82


state 39

    (68) factor -> LPAREN . expression RPAREN
    (61) expression -> . expression PLUS term
    (62) expression -> . expression MINUS term
    (63) expression -> . term
    (64) term -> . term TIMES factor
    (65) term -> . term DIVIDE factor
    (66) term -> . factor
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 84
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69
    CLASSOBJECT     shift and go to state 85

    expression                     shift and go to state 83
    term                           shift and go to state 41
    factor                         shift and go to state 49
    type                           shift and go to state 46
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 40

    (55) assignment -> CLASSOBJECT . ID
    (91) array -> CLASSOBJECT . LSQBRACKET RSQBRACKET
    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID

    ID              shift and go to state 86
    LSQBRACKET      shift and go to state 87
    DOT             shift and go to state 88


state 41

    (63) expression -> term .
    (64) term -> term . TIMES factor
    (65) term -> term . DIVIDE factor

    PLUS            reduce using rule 63 (expression -> term .)
    MINUS           reduce using rule 63 (expression -> term .)
    SEMICOLON       reduce using rule 63 (expression -> term .)
    RPAREN          reduce using rule 63 (expression -> term .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90


state 42

    (35) if -> IF . LPAREN logical_expression RPAREN block
    (36) if -> IF . LPAREN logical_expression RPAREN block elseif
    (37) if -> IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 91


state 43

    (42) loop -> while_loop .

    SEMICOLON       reduce using rule 42 (loop -> while_loop .)


state 44

    (43) loop -> loop_for .

    SEMICOLON       reduce using rule 43 (loop -> loop_for .)


state 45

    (27) return -> RETURN . ID
    (28) return -> RETURN . type
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE

    ID              shift and go to state 92
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69

    type                           shift and go to state 93

state 46

    (67) factor -> type .

    TIMES           reduce using rule 67 (factor -> type .)
    DIVIDE          reduce using rule 67 (factor -> type .)
    PLUS            reduce using rule 67 (factor -> type .)
    MINUS           reduce using rule 67 (factor -> type .)
    SEMICOLON       reduce using rule 67 (factor -> type .)
    RPAREN          reduce using rule 67 (factor -> type .)


state 47

    (76) data_type -> primitive .
    (90) array -> primitive . LSQBRACKET RSQBRACKET

    ID              reduce using rule 76 (data_type -> primitive .)
    LSQBRACKET      shift and go to state 94


state 48

    (77) data_type -> data_structure .

    ID              reduce using rule 77 (data_type -> data_structure .)


state 49

    (66) term -> factor .

    TIMES           reduce using rule 66 (term -> factor .)
    DIVIDE          reduce using rule 66 (term -> factor .)
    PLUS            reduce using rule 66 (term -> factor .)
    MINUS           reduce using rule 66 (term -> factor .)
    SEMICOLON       reduce using rule 66 (term -> factor .)
    RPAREN          reduce using rule 66 (term -> factor .)


state 50

    (45) while_loop -> WHILE . LPAREN logical_expression RPAREN block

    LPAREN          shift and go to state 95


state 51

    (44) loop_for -> FOR . LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block

    LPAREN          shift and go to state 96


state 52

    (78) primitive -> INT .

    LSQBRACKET      reduce using rule 78 (primitive -> INT .)
    ID              reduce using rule 78 (primitive -> INT .)


state 53

    (79) primitive -> FLOAT .

    LSQBRACKET      reduce using rule 79 (primitive -> FLOAT .)
    ID              reduce using rule 79 (primitive -> FLOAT .)


state 54

    (80) primitive -> BOOL .

    LSQBRACKET      reduce using rule 80 (primitive -> BOOL .)
    ID              reduce using rule 80 (primitive -> BOOL .)


state 55

    (81) primitive -> BYTE .

    LSQBRACKET      reduce using rule 81 (primitive -> BYTE .)
    ID              reduce using rule 81 (primitive -> BYTE .)


state 56

    (82) primitive -> CHAR .

    LSQBRACKET      reduce using rule 82 (primitive -> CHAR .)
    ID              reduce using rule 82 (primitive -> CHAR .)


state 57

    (83) primitive -> SBYTE .

    LSQBRACKET      reduce using rule 83 (primitive -> SBYTE .)
    ID              reduce using rule 83 (primitive -> SBYTE .)


state 58

    (84) primitive -> DECIMAL .

    LSQBRACKET      reduce using rule 84 (primitive -> DECIMAL .)
    ID              reduce using rule 84 (primitive -> DECIMAL .)


state 59

    (85) primitive -> DOUBLE .

    LSQBRACKET      reduce using rule 85 (primitive -> DOUBLE .)
    ID              reduce using rule 85 (primitive -> DOUBLE .)


state 60

    (86) primitive -> LONG .

    LSQBRACKET      reduce using rule 86 (primitive -> LONG .)
    ID              reduce using rule 86 (primitive -> LONG .)


state 61

    (87) primitive -> SHORT .

    LSQBRACKET      reduce using rule 87 (primitive -> SHORT .)
    ID              reduce using rule 87 (primitive -> SHORT .)


state 62

    (88) primitive -> UINT .

    LSQBRACKET      reduce using rule 88 (primitive -> UINT .)
    ID              reduce using rule 88 (primitive -> UINT .)


state 63

    (89) data_structure -> array .

    ID              reduce using rule 89 (data_structure -> array .)


state 64

    (69) factor -> object_access .

    TIMES           reduce using rule 69 (factor -> object_access .)
    DIVIDE          reduce using rule 69 (factor -> object_access .)
    PLUS            reduce using rule 69 (factor -> object_access .)
    MINUS           reduce using rule 69 (factor -> object_access .)
    SEMICOLON       reduce using rule 69 (factor -> object_access .)
    RPAREN          reduce using rule 69 (factor -> object_access .)


state 65

    (71) factor -> index .

    TIMES           reduce using rule 71 (factor -> index .)
    DIVIDE          reduce using rule 71 (factor -> index .)
    PLUS            reduce using rule 71 (factor -> index .)
    MINUS           reduce using rule 71 (factor -> index .)
    SEMICOLON       reduce using rule 71 (factor -> index .)
    RPAREN          reduce using rule 71 (factor -> index .)


state 66

    (31) type -> FLOAT_TYPE .

    TIMES           reduce using rule 31 (type -> FLOAT_TYPE .)
    DIVIDE          reduce using rule 31 (type -> FLOAT_TYPE .)
    PLUS            reduce using rule 31 (type -> FLOAT_TYPE .)
    MINUS           reduce using rule 31 (type -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 31 (type -> FLOAT_TYPE .)
    RPAREN          reduce using rule 31 (type -> FLOAT_TYPE .)


state 67

    (32) type -> DOUBLE_TYPE .

    TIMES           reduce using rule 32 (type -> DOUBLE_TYPE .)
    DIVIDE          reduce using rule 32 (type -> DOUBLE_TYPE .)
    PLUS            reduce using rule 32 (type -> DOUBLE_TYPE .)
    MINUS           reduce using rule 32 (type -> DOUBLE_TYPE .)
    SEMICOLON       reduce using rule 32 (type -> DOUBLE_TYPE .)
    RPAREN          reduce using rule 32 (type -> DOUBLE_TYPE .)


state 68

    (33) type -> DECIMAL_TYPE .

    TIMES           reduce using rule 33 (type -> DECIMAL_TYPE .)
    DIVIDE          reduce using rule 33 (type -> DECIMAL_TYPE .)
    PLUS            reduce using rule 33 (type -> DECIMAL_TYPE .)
    MINUS           reduce using rule 33 (type -> DECIMAL_TYPE .)
    SEMICOLON       reduce using rule 33 (type -> DECIMAL_TYPE .)
    RPAREN          reduce using rule 33 (type -> DECIMAL_TYPE .)


state 69

    (34) type -> INTEGER_TYPE .

    TIMES           reduce using rule 34 (type -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 34 (type -> INTEGER_TYPE .)
    PLUS            reduce using rule 34 (type -> INTEGER_TYPE .)
    MINUS           reduce using rule 34 (type -> INTEGER_TYPE .)
    SEMICOLON       reduce using rule 34 (type -> INTEGER_TYPE .)
    RPAREN          reduce using rule 34 (type -> INTEGER_TYPE .)


state 70

    (8) class -> modifier STATIC CLASS CLASSOBJECT block .

    $end            reduce using rule 8 (class -> modifier STATIC CLASS CLASSOBJECT block .)


state 71

    (13) block -> LBRACKET body RBRACKET .

    $end            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    ELSE            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    SEMICOLON       reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 13 (block -> LBRACKET body RBRACKET .)


state 72

    (14) body -> lines SEMICOLON .
    (15) body -> lines SEMICOLON . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . function
    (17) lines -> . assignment
    (18) lines -> . expression
    (19) lines -> . declaration
    (20) lines -> . if
    (21) lines -> . loop
    (22) lines -> . return
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (53) assignment -> . ID EQUALS expression
    (54) assignment -> . data_type ID EQUALS expression
    (55) assignment -> . CLASSOBJECT ID
    (56) assignment -> . ID EQUALS ID
    (61) expression -> . expression PLUS term
    (62) expression -> . expression MINUS term
    (63) expression -> . term
    (60) declaration -> . data_type ID
    (35) if -> . IF LPAREN logical_expression RPAREN block
    (36) if -> . IF LPAREN logical_expression RPAREN block elseif
    (37) if -> . IF LPAREN logical_expression RPAREN block else
    (42) loop -> . while_loop
    (43) loop -> . loop_for
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (72) modifier -> . PUBLIC
    (73) modifier -> . PRIVATE
    (74) modifier -> . PROTECTED
    (75) modifier -> . INTERNAL
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (64) term -> . term TIMES factor
    (65) term -> . term DIVIDE factor
    (66) term -> . factor
    (45) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (44) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 14 (body -> lines SEMICOLON .)
    ID              shift and go to state 38
    CLASSOBJECT     shift and go to state 40
    IF              shift and go to state 42
    RETURN          shift and go to state 45
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    WHILE           shift and go to state 50
    FOR             shift and go to state 51
    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    LPAREN          shift and go to state 39
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69

    lines                          shift and go to state 28
    body                           shift and go to state 97
    function                       shift and go to state 29
    assignment                     shift and go to state 30
    expression                     shift and go to state 31
    declaration                    shift and go to state 32
    if                             shift and go to state 33
    loop                           shift and go to state 34
    return                         shift and go to state 35
    modifier                       shift and go to state 36
    data_type                      shift and go to state 37
    term                           shift and go to state 41
    while_loop                     shift and go to state 43
    loop_for                       shift and go to state 44
    type                           shift and go to state 46
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    factor                         shift and go to state 49
    array                          shift and go to state 63
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 73

    (61) expression -> expression PLUS . term
    (64) term -> . term TIMES factor
    (65) term -> . term DIVIDE factor
    (66) term -> . factor
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 84
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69
    CLASSOBJECT     shift and go to state 85

    term                           shift and go to state 98
    factor                         shift and go to state 49
    type                           shift and go to state 46
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 74

    (62) expression -> expression MINUS . term
    (64) term -> . term TIMES factor
    (65) term -> . term DIVIDE factor
    (66) term -> . factor
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 84
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69
    CLASSOBJECT     shift and go to state 85

    term                           shift and go to state 99
    factor                         shift and go to state 49
    type                           shift and go to state 46
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 75

    (23) function -> modifier data_type . ID LPAREN declarations RPAREN block

    ID              shift and go to state 100


state 76

    (24) function -> modifier VOID . ID LPAREN declarations RPAREN block

    ID              shift and go to state 101


state 77

    (25) function -> modifier STATIC . data_type ID LPAREN declarations RPAREN block
    (26) function -> modifier STATIC . VOID ID LPAREN declarations RPAREN block
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 103
    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    CLASSOBJECT     shift and go to state 78

    data_type                      shift and go to state 102
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 78

    (91) array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    LSQBRACKET      shift and go to state 87


state 79

    (54) assignment -> data_type ID . EQUALS expression
    (60) declaration -> data_type ID .

    EQUALS          shift and go to state 104
    SEMICOLON       reduce using rule 60 (declaration -> data_type ID .)


state 80

    (53) assignment -> ID EQUALS . expression
    (56) assignment -> ID EQUALS . ID
    (61) expression -> . expression PLUS term
    (62) expression -> . expression MINUS term
    (63) expression -> . term
    (64) term -> . term TIMES factor
    (65) term -> . term DIVIDE factor
    (66) term -> . factor
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 105
    LPAREN          shift and go to state 39
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69
    CLASSOBJECT     shift and go to state 85

    expression                     shift and go to state 106
    term                           shift and go to state 41
    factor                         shift and go to state 49
    type                           shift and go to state 46
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 81

    (9) object_access -> ID DOT . ID
    (11) object_access -> ID DOT . CLASSOBJECT

    ID              shift and go to state 107
    CLASSOBJECT     shift and go to state 108


state 82

    (92) index -> ID LSQBRACKET . INTEGER_TYPE RSQBRACKET
    (93) index -> ID LSQBRACKET . ID RSQBRACKET

    INTEGER_TYPE    shift and go to state 110
    ID              shift and go to state 109


state 83

    (68) factor -> LPAREN expression . RPAREN
    (61) expression -> expression . PLUS term
    (62) expression -> expression . MINUS term

    RPAREN          shift and go to state 111
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 84

    (70) factor -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (92) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> ID . LSQBRACKET ID RSQBRACKET

    TIMES           reduce using rule 70 (factor -> ID .)
    DIVIDE          reduce using rule 70 (factor -> ID .)
    RPAREN          reduce using rule 70 (factor -> ID .)
    PLUS            reduce using rule 70 (factor -> ID .)
    MINUS           reduce using rule 70 (factor -> ID .)
    SEMICOLON       reduce using rule 70 (factor -> ID .)
    DOT             shift and go to state 81
    LSQBRACKET      shift and go to state 82


state 85

    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID

    DOT             shift and go to state 88


state 86

    (55) assignment -> CLASSOBJECT ID .

    SEMICOLON       reduce using rule 55 (assignment -> CLASSOBJECT ID .)
    RPAREN          reduce using rule 55 (assignment -> CLASSOBJECT ID .)


state 87

    (91) array -> CLASSOBJECT LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 112


state 88

    (10) object_access -> CLASSOBJECT DOT . CLASSOBJECT
    (12) object_access -> CLASSOBJECT DOT . ID

    CLASSOBJECT     shift and go to state 113
    ID              shift and go to state 114


state 89

    (64) term -> term TIMES . factor
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 84
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69
    CLASSOBJECT     shift and go to state 85

    factor                         shift and go to state 115
    type                           shift and go to state 46
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 90

    (65) term -> term DIVIDE . factor
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 84
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69
    CLASSOBJECT     shift and go to state 85

    factor                         shift and go to state 116
    type                           shift and go to state 46
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 91

    (35) if -> IF LPAREN . logical_expression RPAREN block
    (36) if -> IF LPAREN . logical_expression RPAREN block elseif
    (37) if -> IF LPAREN . logical_expression RPAREN block else
    (46) logical_expression -> . logical_expression logical_operator logical_factor
    (47) logical_expression -> . logical_factor
    (48) logical_factor -> . TRUE
    (49) logical_factor -> . FALSE
    (50) logical_factor -> . ID
    (51) logical_factor -> . logical_expression

    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    ID              shift and go to state 121

    logical_expression             shift and go to state 117
    logical_factor                 shift and go to state 118

state 92

    (27) return -> RETURN ID .

    SEMICOLON       reduce using rule 27 (return -> RETURN ID .)


state 93

    (28) return -> RETURN type .

    SEMICOLON       reduce using rule 28 (return -> RETURN type .)


state 94

    (90) array -> primitive LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 122


state 95

    (45) while_loop -> WHILE LPAREN . logical_expression RPAREN block
    (46) logical_expression -> . logical_expression logical_operator logical_factor
    (47) logical_expression -> . logical_factor
    (48) logical_factor -> . TRUE
    (49) logical_factor -> . FALSE
    (50) logical_factor -> . ID
    (51) logical_factor -> . logical_expression

    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    ID              shift and go to state 121

    logical_expression             shift and go to state 123
    logical_factor                 shift and go to state 118

state 96

    (44) loop_for -> FOR LPAREN . assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (53) assignment -> . ID EQUALS expression
    (54) assignment -> . data_type ID EQUALS expression
    (55) assignment -> . CLASSOBJECT ID
    (56) assignment -> . ID EQUALS ID
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 125
    CLASSOBJECT     shift and go to state 127
    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62

    assignment                     shift and go to state 124
    data_type                      shift and go to state 126
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 97

    (15) body -> lines SEMICOLON body .

    RBRACKET        reduce using rule 15 (body -> lines SEMICOLON body .)


state 98

    (61) expression -> expression PLUS term .
    (64) term -> term . TIMES factor
    (65) term -> term . DIVIDE factor

    PLUS            reduce using rule 61 (expression -> expression PLUS term .)
    MINUS           reduce using rule 61 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 61 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 61 (expression -> expression PLUS term .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90


state 99

    (62) expression -> expression MINUS term .
    (64) term -> term . TIMES factor
    (65) term -> term . DIVIDE factor

    PLUS            reduce using rule 62 (expression -> expression MINUS term .)
    MINUS           reduce using rule 62 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 62 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 62 (expression -> expression MINUS term .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 90


state 100

    (23) function -> modifier data_type ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 128


state 101

    (24) function -> modifier VOID ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 129


state 102

    (25) function -> modifier STATIC data_type . ID LPAREN declarations RPAREN block

    ID              shift and go to state 130


state 103

    (26) function -> modifier STATIC VOID . ID LPAREN declarations RPAREN block

    ID              shift and go to state 131


state 104

    (54) assignment -> data_type ID EQUALS . expression
    (61) expression -> . expression PLUS term
    (62) expression -> . expression MINUS term
    (63) expression -> . term
    (64) term -> . term TIMES factor
    (65) term -> . term DIVIDE factor
    (66) term -> . factor
    (67) factor -> . type
    (68) factor -> . LPAREN expression RPAREN
    (69) factor -> . object_access
    (70) factor -> . ID
    (71) factor -> . index
    (31) type -> . FLOAT_TYPE
    (32) type -> . DOUBLE_TYPE
    (33) type -> . DECIMAL_TYPE
    (34) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (92) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 84
    FLOAT_TYPE      shift and go to state 66
    DOUBLE_TYPE     shift and go to state 67
    DECIMAL_TYPE    shift and go to state 68
    INTEGER_TYPE    shift and go to state 69
    CLASSOBJECT     shift and go to state 85

    expression                     shift and go to state 132
    term                           shift and go to state 41
    factor                         shift and go to state 49
    type                           shift and go to state 46
    object_access                  shift and go to state 64
    index                          shift and go to state 65

state 105

    (56) assignment -> ID EQUALS ID .
    (70) factor -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (92) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (93) index -> ID . LSQBRACKET ID RSQBRACKET

  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (assignment -> ID EQUALS ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 56 (assignment -> ID EQUALS ID .)
    SEMICOLON       reduce using rule 56 (assignment -> ID EQUALS ID .)
    RPAREN          reduce using rule 56 (assignment -> ID EQUALS ID .)
    TIMES           reduce using rule 70 (factor -> ID .)
    DIVIDE          reduce using rule 70 (factor -> ID .)
    PLUS            reduce using rule 70 (factor -> ID .)
    MINUS           reduce using rule 70 (factor -> ID .)
    DOT             shift and go to state 81
    LSQBRACKET      shift and go to state 82

  ! SEMICOLON       [ reduce using rule 70 (factor -> ID .) ]
  ! RPAREN          [ reduce using rule 70 (factor -> ID .) ]


state 106

    (53) assignment -> ID EQUALS expression .
    (61) expression -> expression . PLUS term
    (62) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 53 (assignment -> ID EQUALS expression .)
    RPAREN          reduce using rule 53 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 107

    (9) object_access -> ID DOT ID .

    TIMES           reduce using rule 9 (object_access -> ID DOT ID .)
    DIVIDE          reduce using rule 9 (object_access -> ID DOT ID .)
    PLUS            reduce using rule 9 (object_access -> ID DOT ID .)
    MINUS           reduce using rule 9 (object_access -> ID DOT ID .)
    SEMICOLON       reduce using rule 9 (object_access -> ID DOT ID .)
    RPAREN          reduce using rule 9 (object_access -> ID DOT ID .)


state 108

    (11) object_access -> ID DOT CLASSOBJECT .

    TIMES           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    DIVIDE          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    PLUS            reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    MINUS           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    RPAREN          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)


state 109

    (93) index -> ID LSQBRACKET ID . RSQBRACKET

    RSQBRACKET      shift and go to state 133


state 110

    (92) index -> ID LSQBRACKET INTEGER_TYPE . RSQBRACKET

    RSQBRACKET      shift and go to state 134


state 111

    (68) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 68 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 68 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 68 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 68 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 68 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 68 (factor -> LPAREN expression RPAREN .)


state 112

    (91) array -> CLASSOBJECT LSQBRACKET RSQBRACKET .

    ID              reduce using rule 91 (array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)


state 113

    (10) object_access -> CLASSOBJECT DOT CLASSOBJECT .

    TIMES           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    DIVIDE          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    PLUS            reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    MINUS           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    RPAREN          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)


state 114

    (12) object_access -> CLASSOBJECT DOT ID .

    TIMES           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    DIVIDE          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    PLUS            reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    MINUS           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    SEMICOLON       reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    RPAREN          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)


state 115

    (64) term -> term TIMES factor .

    TIMES           reduce using rule 64 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 64 (term -> term TIMES factor .)
    PLUS            reduce using rule 64 (term -> term TIMES factor .)
    MINUS           reduce using rule 64 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 64 (term -> term TIMES factor .)
    RPAREN          reduce using rule 64 (term -> term TIMES factor .)


state 116

    (65) term -> term DIVIDE factor .

    TIMES           reduce using rule 65 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 65 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 65 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 65 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 65 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 65 (term -> term DIVIDE factor .)


state 117

    (35) if -> IF LPAREN logical_expression . RPAREN block
    (36) if -> IF LPAREN logical_expression . RPAREN block elseif
    (37) if -> IF LPAREN logical_expression . RPAREN block else
    (46) logical_expression -> logical_expression . logical_operator logical_factor
    (51) logical_factor -> logical_expression .
    (94) logical_operator -> . OR
    (95) logical_operator -> . AND
    (96) logical_operator -> . NOT
    (97) logical_operator -> . GREATER_THAN
    (98) logical_operator -> . LESS_THAN
    (99) logical_operator -> . GREATER_EQUALS_THAN
    (100) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 135
    OR              shift and go to state 137
    AND             shift and go to state 138
    NOT             shift and go to state 139
    GREATER_THAN    shift and go to state 140
    LESS_THAN       shift and go to state 141
    GREATER_EQUALS_THAN shift and go to state 142
    LESS_EQUALS_THAN shift and go to state 143

  ! RPAREN          [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 136

state 118

    (47) logical_expression -> logical_factor .

    RPAREN          reduce using rule 47 (logical_expression -> logical_factor .)
    OR              reduce using rule 47 (logical_expression -> logical_factor .)
    AND             reduce using rule 47 (logical_expression -> logical_factor .)
    NOT             reduce using rule 47 (logical_expression -> logical_factor .)
    GREATER_THAN    reduce using rule 47 (logical_expression -> logical_factor .)
    LESS_THAN       reduce using rule 47 (logical_expression -> logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 47 (logical_expression -> logical_factor .)
    LESS_EQUALS_THAN reduce using rule 47 (logical_expression -> logical_factor .)
    SEMICOLON       reduce using rule 47 (logical_expression -> logical_factor .)


state 119

    (48) logical_factor -> TRUE .

    RPAREN          reduce using rule 48 (logical_factor -> TRUE .)
    OR              reduce using rule 48 (logical_factor -> TRUE .)
    AND             reduce using rule 48 (logical_factor -> TRUE .)
    NOT             reduce using rule 48 (logical_factor -> TRUE .)
    GREATER_THAN    reduce using rule 48 (logical_factor -> TRUE .)
    LESS_THAN       reduce using rule 48 (logical_factor -> TRUE .)
    GREATER_EQUALS_THAN reduce using rule 48 (logical_factor -> TRUE .)
    LESS_EQUALS_THAN reduce using rule 48 (logical_factor -> TRUE .)
    SEMICOLON       reduce using rule 48 (logical_factor -> TRUE .)


state 120

    (49) logical_factor -> FALSE .

    RPAREN          reduce using rule 49 (logical_factor -> FALSE .)
    OR              reduce using rule 49 (logical_factor -> FALSE .)
    AND             reduce using rule 49 (logical_factor -> FALSE .)
    NOT             reduce using rule 49 (logical_factor -> FALSE .)
    GREATER_THAN    reduce using rule 49 (logical_factor -> FALSE .)
    LESS_THAN       reduce using rule 49 (logical_factor -> FALSE .)
    GREATER_EQUALS_THAN reduce using rule 49 (logical_factor -> FALSE .)
    LESS_EQUALS_THAN reduce using rule 49 (logical_factor -> FALSE .)
    SEMICOLON       reduce using rule 49 (logical_factor -> FALSE .)


state 121

    (50) logical_factor -> ID .

    RPAREN          reduce using rule 50 (logical_factor -> ID .)
    OR              reduce using rule 50 (logical_factor -> ID .)
    AND             reduce using rule 50 (logical_factor -> ID .)
    NOT             reduce using rule 50 (logical_factor -> ID .)
    GREATER_THAN    reduce using rule 50 (logical_factor -> ID .)
    LESS_THAN       reduce using rule 50 (logical_factor -> ID .)
    GREATER_EQUALS_THAN reduce using rule 50 (logical_factor -> ID .)
    LESS_EQUALS_THAN reduce using rule 50 (logical_factor -> ID .)
    SEMICOLON       reduce using rule 50 (logical_factor -> ID .)


state 122

    (90) array -> primitive LSQBRACKET RSQBRACKET .

    ID              reduce using rule 90 (array -> primitive LSQBRACKET RSQBRACKET .)


state 123

    (45) while_loop -> WHILE LPAREN logical_expression . RPAREN block
    (46) logical_expression -> logical_expression . logical_operator logical_factor
    (51) logical_factor -> logical_expression .
    (94) logical_operator -> . OR
    (95) logical_operator -> . AND
    (96) logical_operator -> . NOT
    (97) logical_operator -> . GREATER_THAN
    (98) logical_operator -> . LESS_THAN
    (99) logical_operator -> . GREATER_EQUALS_THAN
    (100) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 144
    OR              shift and go to state 137
    AND             shift and go to state 138
    NOT             shift and go to state 139
    GREATER_THAN    shift and go to state 140
    LESS_THAN       shift and go to state 141
    GREATER_EQUALS_THAN shift and go to state 142
    LESS_EQUALS_THAN shift and go to state 143

  ! RPAREN          [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 136

state 124

    (44) loop_for -> FOR LPAREN assignment . SEMICOLON logical_expression SEMICOLON assignment RPAREN block

    SEMICOLON       shift and go to state 145


state 125

    (53) assignment -> ID . EQUALS expression
    (56) assignment -> ID . EQUALS ID

    EQUALS          shift and go to state 80


state 126

    (54) assignment -> data_type . ID EQUALS expression

    ID              shift and go to state 146


state 127

    (55) assignment -> CLASSOBJECT . ID
    (91) array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    ID              shift and go to state 86
    LSQBRACKET      shift and go to state 87


state 128

    (23) function -> modifier data_type ID LPAREN . declarations RPAREN block
    (57) declarations -> . declaration
    (58) declarations -> . declaration COMMA
    (59) declarations -> . declaration COMMA declarations
    (60) declaration -> . data_type ID
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    CLASSOBJECT     shift and go to state 78

    data_type                      shift and go to state 147
    declarations                   shift and go to state 148
    declaration                    shift and go to state 149
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 129

    (24) function -> modifier VOID ID LPAREN . declarations RPAREN block
    (57) declarations -> . declaration
    (58) declarations -> . declaration COMMA
    (59) declarations -> . declaration COMMA declarations
    (60) declaration -> . data_type ID
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    CLASSOBJECT     shift and go to state 78

    declarations                   shift and go to state 150
    declaration                    shift and go to state 149
    data_type                      shift and go to state 147
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 130

    (25) function -> modifier STATIC data_type ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 151


state 131

    (26) function -> modifier STATIC VOID ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 152


state 132

    (54) assignment -> data_type ID EQUALS expression .
    (61) expression -> expression . PLUS term
    (62) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 54 (assignment -> data_type ID EQUALS expression .)
    RPAREN          reduce using rule 54 (assignment -> data_type ID EQUALS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74


state 133

    (93) index -> ID LSQBRACKET ID RSQBRACKET .

    TIMES           reduce using rule 93 (index -> ID LSQBRACKET ID RSQBRACKET .)
    DIVIDE          reduce using rule 93 (index -> ID LSQBRACKET ID RSQBRACKET .)
    PLUS            reduce using rule 93 (index -> ID LSQBRACKET ID RSQBRACKET .)
    MINUS           reduce using rule 93 (index -> ID LSQBRACKET ID RSQBRACKET .)
    SEMICOLON       reduce using rule 93 (index -> ID LSQBRACKET ID RSQBRACKET .)
    RPAREN          reduce using rule 93 (index -> ID LSQBRACKET ID RSQBRACKET .)


state 134

    (92) index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .

    TIMES           reduce using rule 92 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    DIVIDE          reduce using rule 92 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    PLUS            reduce using rule 92 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    MINUS           reduce using rule 92 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    SEMICOLON       reduce using rule 92 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    RPAREN          reduce using rule 92 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)


state 135

    (35) if -> IF LPAREN logical_expression RPAREN . block
    (36) if -> IF LPAREN logical_expression RPAREN . block elseif
    (37) if -> IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 153

state 136

    (46) logical_expression -> logical_expression logical_operator . logical_factor
    (48) logical_factor -> . TRUE
    (49) logical_factor -> . FALSE
    (50) logical_factor -> . ID
    (51) logical_factor -> . logical_expression
    (46) logical_expression -> . logical_expression logical_operator logical_factor
    (47) logical_expression -> . logical_factor

    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    ID              shift and go to state 121

    logical_expression             shift and go to state 154
    logical_factor                 shift and go to state 155

state 137

    (94) logical_operator -> OR .

    TRUE            reduce using rule 94 (logical_operator -> OR .)
    FALSE           reduce using rule 94 (logical_operator -> OR .)
    ID              reduce using rule 94 (logical_operator -> OR .)


state 138

    (95) logical_operator -> AND .

    TRUE            reduce using rule 95 (logical_operator -> AND .)
    FALSE           reduce using rule 95 (logical_operator -> AND .)
    ID              reduce using rule 95 (logical_operator -> AND .)


state 139

    (96) logical_operator -> NOT .

    TRUE            reduce using rule 96 (logical_operator -> NOT .)
    FALSE           reduce using rule 96 (logical_operator -> NOT .)
    ID              reduce using rule 96 (logical_operator -> NOT .)


state 140

    (97) logical_operator -> GREATER_THAN .

    TRUE            reduce using rule 97 (logical_operator -> GREATER_THAN .)
    FALSE           reduce using rule 97 (logical_operator -> GREATER_THAN .)
    ID              reduce using rule 97 (logical_operator -> GREATER_THAN .)


state 141

    (98) logical_operator -> LESS_THAN .

    TRUE            reduce using rule 98 (logical_operator -> LESS_THAN .)
    FALSE           reduce using rule 98 (logical_operator -> LESS_THAN .)
    ID              reduce using rule 98 (logical_operator -> LESS_THAN .)


state 142

    (99) logical_operator -> GREATER_EQUALS_THAN .

    TRUE            reduce using rule 99 (logical_operator -> GREATER_EQUALS_THAN .)
    FALSE           reduce using rule 99 (logical_operator -> GREATER_EQUALS_THAN .)
    ID              reduce using rule 99 (logical_operator -> GREATER_EQUALS_THAN .)


state 143

    (100) logical_operator -> LESS_EQUALS_THAN .

    TRUE            reduce using rule 100 (logical_operator -> LESS_EQUALS_THAN .)
    FALSE           reduce using rule 100 (logical_operator -> LESS_EQUALS_THAN .)
    ID              reduce using rule 100 (logical_operator -> LESS_EQUALS_THAN .)


state 144

    (45) while_loop -> WHILE LPAREN logical_expression RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 156

state 145

    (44) loop_for -> FOR LPAREN assignment SEMICOLON . logical_expression SEMICOLON assignment RPAREN block
    (46) logical_expression -> . logical_expression logical_operator logical_factor
    (47) logical_expression -> . logical_factor
    (48) logical_factor -> . TRUE
    (49) logical_factor -> . FALSE
    (50) logical_factor -> . ID
    (51) logical_factor -> . logical_expression

    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    ID              shift and go to state 121

    logical_expression             shift and go to state 157
    logical_factor                 shift and go to state 118

state 146

    (54) assignment -> data_type ID . EQUALS expression

    EQUALS          shift and go to state 104


state 147

    (60) declaration -> data_type . ID

    ID              shift and go to state 158


state 148

    (23) function -> modifier data_type ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 159


state 149

    (57) declarations -> declaration .
    (58) declarations -> declaration . COMMA
    (59) declarations -> declaration . COMMA declarations

    RPAREN          reduce using rule 57 (declarations -> declaration .)
    COMMA           shift and go to state 160


state 150

    (24) function -> modifier VOID ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 161


state 151

    (25) function -> modifier STATIC data_type ID LPAREN . declarations RPAREN block
    (57) declarations -> . declaration
    (58) declarations -> . declaration COMMA
    (59) declarations -> . declaration COMMA declarations
    (60) declaration -> . data_type ID
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    CLASSOBJECT     shift and go to state 78

    data_type                      shift and go to state 147
    declarations                   shift and go to state 162
    declaration                    shift and go to state 149
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 152

    (26) function -> modifier STATIC VOID ID LPAREN . declarations RPAREN block
    (57) declarations -> . declaration
    (58) declarations -> . declaration COMMA
    (59) declarations -> . declaration COMMA declarations
    (60) declaration -> . data_type ID
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    CLASSOBJECT     shift and go to state 78

    declarations                   shift and go to state 163
    declaration                    shift and go to state 149
    data_type                      shift and go to state 147
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 153

    (35) if -> IF LPAREN logical_expression RPAREN block .
    (36) if -> IF LPAREN logical_expression RPAREN block . elseif
    (37) if -> IF LPAREN logical_expression RPAREN block . else
    (38) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (39) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (40) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (41) else -> . ELSE block

    SEMICOLON       reduce using rule 35 (if -> IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 166

    elseif                         shift and go to state 164
    else                           shift and go to state 165

state 154

    (51) logical_factor -> logical_expression .
    (46) logical_expression -> logical_expression . logical_operator logical_factor
    (94) logical_operator -> . OR
    (95) logical_operator -> . AND
    (96) logical_operator -> . NOT
    (97) logical_operator -> . GREATER_THAN
    (98) logical_operator -> . LESS_THAN
    (99) logical_operator -> . GREATER_EQUALS_THAN
    (100) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          reduce using rule 51 (logical_factor -> logical_expression .)
    SEMICOLON       reduce using rule 51 (logical_factor -> logical_expression .)
    OR              shift and go to state 137
    AND             shift and go to state 138
    NOT             shift and go to state 139
    GREATER_THAN    shift and go to state 140
    LESS_THAN       shift and go to state 141
    GREATER_EQUALS_THAN shift and go to state 142
    LESS_EQUALS_THAN shift and go to state 143

  ! OR              [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 136

state 155

    (46) logical_expression -> logical_expression logical_operator logical_factor .
    (47) logical_expression -> logical_factor .

  ! reduce/reduce conflict for RPAREN resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for OR resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for AND resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for NOT resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for GREATER_EQUALS_THAN resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for LESS_EQUALS_THAN resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    RPAREN          reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    OR              reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    AND             reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    NOT             reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_THAN    reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_THAN       reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_EQUALS_THAN reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)
    SEMICOLON       reduce using rule 46 (logical_expression -> logical_expression logical_operator logical_factor .)

  ! RPAREN          [ reduce using rule 47 (logical_expression -> logical_factor .) ]
  ! OR              [ reduce using rule 47 (logical_expression -> logical_factor .) ]
  ! AND             [ reduce using rule 47 (logical_expression -> logical_factor .) ]
  ! NOT             [ reduce using rule 47 (logical_expression -> logical_factor .) ]
  ! GREATER_THAN    [ reduce using rule 47 (logical_expression -> logical_factor .) ]
  ! LESS_THAN       [ reduce using rule 47 (logical_expression -> logical_factor .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 47 (logical_expression -> logical_factor .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 47 (logical_expression -> logical_factor .) ]
  ! SEMICOLON       [ reduce using rule 47 (logical_expression -> logical_factor .) ]


state 156

    (45) while_loop -> WHILE LPAREN logical_expression RPAREN block .

    SEMICOLON       reduce using rule 45 (while_loop -> WHILE LPAREN logical_expression RPAREN block .)


state 157

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression . SEMICOLON assignment RPAREN block
    (46) logical_expression -> logical_expression . logical_operator logical_factor
    (51) logical_factor -> logical_expression .
    (94) logical_operator -> . OR
    (95) logical_operator -> . AND
    (96) logical_operator -> . NOT
    (97) logical_operator -> . GREATER_THAN
    (98) logical_operator -> . LESS_THAN
    (99) logical_operator -> . GREATER_EQUALS_THAN
    (100) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    SEMICOLON       shift and go to state 167
    OR              shift and go to state 137
    AND             shift and go to state 138
    NOT             shift and go to state 139
    GREATER_THAN    shift and go to state 140
    LESS_THAN       shift and go to state 141
    GREATER_EQUALS_THAN shift and go to state 142
    LESS_EQUALS_THAN shift and go to state 143

  ! SEMICOLON       [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 136

state 158

    (60) declaration -> data_type ID .

    COMMA           reduce using rule 60 (declaration -> data_type ID .)
    RPAREN          reduce using rule 60 (declaration -> data_type ID .)


state 159

    (23) function -> modifier data_type ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 168

state 160

    (58) declarations -> declaration COMMA .
    (59) declarations -> declaration COMMA . declarations
    (57) declarations -> . declaration
    (58) declarations -> . declaration COMMA
    (59) declarations -> . declaration COMMA declarations
    (60) declaration -> . data_type ID
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    RPAREN          reduce using rule 58 (declarations -> declaration COMMA .)
    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62
    CLASSOBJECT     shift and go to state 78

    declaration                    shift and go to state 149
    declarations                   shift and go to state 169
    data_type                      shift and go to state 147
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 161

    (24) function -> modifier VOID ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 170

state 162

    (25) function -> modifier STATIC data_type ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 171


state 163

    (26) function -> modifier STATIC VOID ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 172


state 164

    (36) if -> IF LPAREN logical_expression RPAREN block elseif .

    SEMICOLON       reduce using rule 36 (if -> IF LPAREN logical_expression RPAREN block elseif .)


state 165

    (37) if -> IF LPAREN logical_expression RPAREN block else .

    SEMICOLON       reduce using rule 37 (if -> IF LPAREN logical_expression RPAREN block else .)


state 166

    (38) elseif -> ELSE . IF LPAREN logical_expression RPAREN block
    (39) elseif -> ELSE . IF LPAREN logical_expression RPAREN block elseif
    (40) elseif -> ELSE . IF LPAREN logical_expression RPAREN block else
    (41) else -> ELSE . block
    (13) block -> . LBRACKET body RBRACKET

    IF              shift and go to state 173
    LBRACKET        shift and go to state 25

    block                          shift and go to state 174

state 167

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON . assignment RPAREN block
    (53) assignment -> . ID EQUALS expression
    (54) assignment -> . data_type ID EQUALS expression
    (55) assignment -> . CLASSOBJECT ID
    (56) assignment -> . ID EQUALS ID
    (76) data_type -> . primitive
    (77) data_type -> . data_structure
    (78) primitive -> . INT
    (79) primitive -> . FLOAT
    (80) primitive -> . BOOL
    (81) primitive -> . BYTE
    (82) primitive -> . CHAR
    (83) primitive -> . SBYTE
    (84) primitive -> . DECIMAL
    (85) primitive -> . DOUBLE
    (86) primitive -> . LONG
    (87) primitive -> . SHORT
    (88) primitive -> . UINT
    (89) data_structure -> . array
    (90) array -> . primitive LSQBRACKET RSQBRACKET
    (91) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 125
    CLASSOBJECT     shift and go to state 127
    INT             shift and go to state 52
    FLOAT           shift and go to state 53
    BOOL            shift and go to state 54
    BYTE            shift and go to state 55
    CHAR            shift and go to state 56
    SBYTE           shift and go to state 57
    DECIMAL         shift and go to state 58
    DOUBLE          shift and go to state 59
    LONG            shift and go to state 60
    SHORT           shift and go to state 61
    UINT            shift and go to state 62

    assignment                     shift and go to state 175
    data_type                      shift and go to state 126
    primitive                      shift and go to state 47
    data_structure                 shift and go to state 48
    array                          shift and go to state 63

state 168

    (23) function -> modifier data_type ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 23 (function -> modifier data_type ID LPAREN declarations RPAREN block .)


state 169

    (59) declarations -> declaration COMMA declarations .

    RPAREN          reduce using rule 59 (declarations -> declaration COMMA declarations .)


state 170

    (24) function -> modifier VOID ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 24 (function -> modifier VOID ID LPAREN declarations RPAREN block .)


state 171

    (25) function -> modifier STATIC data_type ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 176

state 172

    (26) function -> modifier STATIC VOID ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 177

state 173

    (38) elseif -> ELSE IF . LPAREN logical_expression RPAREN block
    (39) elseif -> ELSE IF . LPAREN logical_expression RPAREN block elseif
    (40) elseif -> ELSE IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 178


state 174

    (41) else -> ELSE block .

    SEMICOLON       reduce using rule 41 (else -> ELSE block .)


state 175

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment . RPAREN block

    RPAREN          shift and go to state 179


state 176

    (25) function -> modifier STATIC data_type ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 25 (function -> modifier STATIC data_type ID LPAREN declarations RPAREN block .)


state 177

    (26) function -> modifier STATIC VOID ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 26 (function -> modifier STATIC VOID ID LPAREN declarations RPAREN block .)


state 178

    (38) elseif -> ELSE IF LPAREN . logical_expression RPAREN block
    (39) elseif -> ELSE IF LPAREN . logical_expression RPAREN block elseif
    (40) elseif -> ELSE IF LPAREN . logical_expression RPAREN block else
    (46) logical_expression -> . logical_expression logical_operator logical_factor
    (47) logical_expression -> . logical_factor
    (48) logical_factor -> . TRUE
    (49) logical_factor -> . FALSE
    (50) logical_factor -> . ID
    (51) logical_factor -> . logical_expression

    TRUE            shift and go to state 119
    FALSE           shift and go to state 120
    ID              shift and go to state 121

    logical_expression             shift and go to state 180
    logical_factor                 shift and go to state 118

state 179

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 181

state 180

    (38) elseif -> ELSE IF LPAREN logical_expression . RPAREN block
    (39) elseif -> ELSE IF LPAREN logical_expression . RPAREN block elseif
    (40) elseif -> ELSE IF LPAREN logical_expression . RPAREN block else
    (46) logical_expression -> logical_expression . logical_operator logical_factor
    (51) logical_factor -> logical_expression .
    (94) logical_operator -> . OR
    (95) logical_operator -> . AND
    (96) logical_operator -> . NOT
    (97) logical_operator -> . GREATER_THAN
    (98) logical_operator -> . LESS_THAN
    (99) logical_operator -> . GREATER_EQUALS_THAN
    (100) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 182
    OR              shift and go to state 137
    AND             shift and go to state 138
    NOT             shift and go to state 139
    GREATER_THAN    shift and go to state 140
    LESS_THAN       shift and go to state 141
    GREATER_EQUALS_THAN shift and go to state 142
    LESS_EQUALS_THAN shift and go to state 143

  ! RPAREN          [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 51 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 136

state 181

    (44) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .

    SEMICOLON       reduce using rule 44 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .)


state 182

    (38) elseif -> ELSE IF LPAREN logical_expression RPAREN . block
    (39) elseif -> ELSE IF LPAREN logical_expression RPAREN . block elseif
    (40) elseif -> ELSE IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 183

state 183

    (38) elseif -> ELSE IF LPAREN logical_expression RPAREN block .
    (39) elseif -> ELSE IF LPAREN logical_expression RPAREN block . elseif
    (40) elseif -> ELSE IF LPAREN logical_expression RPAREN block . else
    (38) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (39) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (40) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (41) else -> . ELSE block

    SEMICOLON       reduce using rule 38 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 166

    elseif                         shift and go to state 184
    else                           shift and go to state 185

state 184

    (39) elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .

    SEMICOLON       reduce using rule 39 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)


state 185

    (40) elseif -> ELSE IF LPAREN logical_expression RPAREN block else .

    SEMICOLON       reduce using rule 40 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 117 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for NOT in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 123 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 154 resolved as shift
WARNING: shift/reduce conflict for AND in state 154 resolved as shift
WARNING: shift/reduce conflict for NOT in state 154 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 154 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 154 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 154 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 154 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 157 resolved as shift
WARNING: shift/reduce conflict for OR in state 157 resolved as shift
WARNING: shift/reduce conflict for AND in state 157 resolved as shift
WARNING: shift/reduce conflict for NOT in state 157 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 157 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 157 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 157 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 157 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 180 resolved as shift
WARNING: shift/reduce conflict for OR in state 180 resolved as shift
WARNING: shift/reduce conflict for AND in state 180 resolved as shift
WARNING: shift/reduce conflict for NOT in state 180 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 180 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 180 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 180 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 180 resolved as shift
WARNING: reduce/reduce conflict in state 105 resolved using rule (assignment -> ID EQUALS ID)
WARNING: rejected rule (factor -> ID) in state 105
WARNING: reduce/reduce conflict in state 155 resolved using rule (logical_expression -> logical_expression logical_operator logical_factor)
WARNING: rejected rule (logical_expression -> logical_factor) in state 155
