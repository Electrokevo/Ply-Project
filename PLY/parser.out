Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    DIVIDE_EQUAL
    DO
    FILE
    FOR
    MINUS_EQUAL
    MODULE
    MODULE_EQUAL
    NEW
    NINT
    NUINT
    PLUS_EQUAL
    STRING
    THEN
    TIMES_EQUAL
    ULONG
    USHORT
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> usings namespace class
Rule 2     program -> namespace class
Rule 3     usings -> using usings
Rule 4     usings -> using
Rule 5     using -> USING CLASSOBJECT SEMICOLON
Rule 6     namespace -> NAMESPACE CLASSOBJECT SEMICOLON
Rule 7     class -> modifier CLASS CLASSOBJECT block
Rule 8     class -> modifier STATIC CLASS CLASSOBJECT block
Rule 9     object_access -> ID DOT ID
Rule 10    object_access -> CLASSOBJECT DOT CLASSOBJECT
Rule 11    object_access -> ID DOT CLASSOBJECT
Rule 12    object_access -> CLASSOBJECT DOT ID
Rule 13    block -> LBRACKET body RBRACKET
Rule 14    body -> lines SEMICOLON
Rule 15    body -> lines SEMICOLON body
Rule 16    body -> function
Rule 17    lines -> assignment
Rule 18    lines -> expression
Rule 19    lines -> declaration
Rule 20    lines -> if
Rule 21    lines -> loop
Rule 22    lines -> return
Rule 23    function -> modifier data_type ID LPAREN declarations RPAREN block
Rule 24    function -> modifier VOID ID LPAREN declarations RPAREN block
Rule 25    function -> modifier STATIC data_type ID LPAREN declarations RPAREN block
Rule 26    function -> modifier STATIC VOID ID LPAREN declarations RPAREN block
Rule 27    return -> RETURN ID
Rule 28    return -> RETURN type
Rule 29    type -> FLOAT_TYPE
Rule 30    type -> DOUBLE_TYPE
Rule 31    type -> DECIMAL_TYPE
Rule 32    type -> INTEGER_TYPE
Rule 33    if -> IF LPAREN logical_expression RPAREN block
Rule 34    if -> IF LPAREN logical_expression RPAREN block elseif
Rule 35    if -> IF LPAREN logical_expression RPAREN block else
Rule 36    elseif -> ELSE IF LPAREN logical_expression RPAREN block
Rule 37    elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif
Rule 38    elseif -> ELSE IF LPAREN logical_expression RPAREN block else
Rule 39    else -> ELSE block
Rule 40    loop -> while_loop
Rule 41    while_loop -> WHILE LPAREN logical_expression RPAREN block
Rule 42    logical_expression -> logical_expression logical_operator logical_factor
Rule 43    logical_expression -> logical_factor
Rule 44    logical_factor -> TRUE
Rule 45    logical_factor -> FALSE
Rule 46    logical_factor -> ID
Rule 47    logical_factor -> logical_expression
Rule 48    assignment -> ID EQUALS expression
Rule 49    assignment -> data_type ID EQUALS expression
Rule 50    assignment -> CLASSOBJECT ID
Rule 51    assignment -> ID EQUALS ID
Rule 52    declarations -> declaration
Rule 53    declarations -> declaration COMMA
Rule 54    declarations -> declaration COMMA declarations
Rule 55    declaration -> data_type ID
Rule 56    expression -> expression PLUS term
Rule 57    expression -> expression MINUS term
Rule 58    expression -> term
Rule 59    expression -> object_access
Rule 60    expression -> ID
Rule 61    expression -> index
Rule 62    expression -> type
Rule 63    term -> term TIMES factor
Rule 64    term -> term DIVIDE factor
Rule 65    term -> factor
Rule 66    factor -> INTEGER_TYPE
Rule 67    factor -> LPAREN expression RPAREN
Rule 68    modifier -> PUBLIC
Rule 69    modifier -> PRIVATE
Rule 70    modifier -> PROTECTED
Rule 71    modifier -> INTERNAL
Rule 72    data_type -> primitive
Rule 73    data_type -> data_structure
Rule 74    primitive -> INT
Rule 75    primitive -> FLOAT
Rule 76    primitive -> BOOL
Rule 77    primitive -> BYTE
Rule 78    primitive -> CHAR
Rule 79    primitive -> SBYTE
Rule 80    primitive -> DECIMAL
Rule 81    primitive -> DOUBLE
Rule 82    primitive -> LONG
Rule 83    primitive -> SHORT
Rule 84    primitive -> UINT
Rule 85    data_structure -> array
Rule 86    array -> primitive LSQBRACKET RSQBRACKET
Rule 87    array -> CLASSOBJECT LSQBRACKET RSQBRACKET
Rule 88    index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET
Rule 89    index -> ID LSQBRACKET ID RSQBRACKET
Rule 90    logical_operator -> OR
Rule 91    logical_operator -> AND
Rule 92    logical_operator -> NOT
Rule 93    logical_operator -> GREATER_THAN
Rule 94    logical_operator -> LESS_THAN
Rule 95    logical_operator -> GREATER_EQUALS_THAN
Rule 96    logical_operator -> LESS_EQUALS_THAN

Terminals, with rules where they appear

AND                  : 91
BOOL                 : 76
BYTE                 : 77
CHAR                 : 78
CHARACTER            : 
CLASS                : 7 8
CLASSOBJECT          : 5 6 7 8 10 10 11 12 50 87
COMMA                : 53 54
DECIMAL              : 80
DECIMAL_TYPE         : 31
DIVIDE               : 64
DIVIDE_EQUAL         : 
DO                   : 
DOT                  : 9 10 11 12
DOUBLE               : 81
DOUBLE_TYPE          : 30
ELSE                 : 36 37 38 39
EQUALS               : 48 49 51
FALSE                : 45
FILE                 : 
FLOAT                : 75
FLOAT_TYPE           : 29
FOR                  : 
GREATER_EQUALS_THAN  : 95
GREATER_THAN         : 93
ID                   : 9 9 11 12 23 24 25 26 27 46 48 49 50 51 51 55 60 88 89 89
IF                   : 33 34 35 36 37 38
INT                  : 74
INTEGER_TYPE         : 32 66 88
INTERNAL             : 71
LBRACKET             : 13
LESS_EQUALS_THAN     : 96
LESS_THAN            : 94
LONG                 : 82
LPAREN               : 23 24 25 26 33 34 35 36 37 38 41 67
LSQBRACKET           : 86 87 88 89
MINUS                : 57
MINUS_EQUAL          : 
MODULE               : 
MODULE_EQUAL         : 
NAMESPACE            : 6
NEW                  : 
NINT                 : 
NOT                  : 92
NUINT                : 
OR                   : 90
PLUS                 : 56
PLUS_EQUAL           : 
PRIVATE              : 69
PROTECTED            : 70
PUBLIC               : 68
RBRACKET             : 13
RETURN               : 27 28
RPAREN               : 23 24 25 26 33 34 35 36 37 38 41 67
RSQBRACKET           : 86 87 88 89
SBYTE                : 79
SEMICOLON            : 5 6 14 15
SHORT                : 83
STATIC               : 8 25 26
STRING               : 
THEN                 : 
TIMES                : 63
TIMES_EQUAL          : 
TRUE                 : 44
UINT                 : 84
ULONG                : 
USHORT               : 
USING                : 5
VAR                  : 
VOID                 : 24 26
WHILE                : 41
error                : 

Nonterminals, with rules where they appear

array                : 85
assignment           : 17
block                : 7 8 23 24 25 26 33 34 35 36 37 38 39 41
body                 : 13 15
class                : 1 2
data_structure       : 73
data_type            : 23 25 49 55
declaration          : 19 52 53 54
declarations         : 23 24 25 26 54
else                 : 35 38
elseif               : 34 37
expression           : 18 48 49 56 57 67
factor               : 63 64 65
function             : 16
if                   : 20
index                : 61
lines                : 14 15
logical_expression   : 33 34 35 36 37 38 41 42 47
logical_factor       : 42 43
logical_operator     : 42
loop                 : 21
modifier             : 7 8 23 24 25 26
namespace            : 1 2
object_access        : 59
primitive            : 72 86
program              : 0
return               : 22
term                 : 56 57 58 63 64
type                 : 28 62
using                : 3 4
usings               : 1 3
while_loop           : 40

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . usings namespace class
    (2) program -> . namespace class
    (3) usings -> . using usings
    (4) usings -> . using
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5
    USING           shift and go to state 6

    program                        shift and go to state 1
    usings                         shift and go to state 2
    namespace                      shift and go to state 3
    using                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> usings . namespace class
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5

    namespace                      shift and go to state 7

state 3

    (2) program -> namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
    (68) modifier -> . PUBLIC
    (69) modifier -> . PRIVATE
    (70) modifier -> . PROTECTED
    (71) modifier -> . INTERNAL

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 8
    modifier                       shift and go to state 9

state 4

    (3) usings -> using . usings
    (4) usings -> using .
    (3) usings -> . using usings
    (4) usings -> . using
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       reduce using rule 4 (usings -> using .)
    USING           shift and go to state 6

    using                          shift and go to state 4
    usings                         shift and go to state 14

state 5

    (6) namespace -> NAMESPACE . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 15


state 6

    (5) using -> USING . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 16


state 7

    (1) program -> usings namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
    (68) modifier -> . PUBLIC
    (69) modifier -> . PRIVATE
    (70) modifier -> . PROTECTED
    (71) modifier -> . INTERNAL

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 17
    modifier                       shift and go to state 9

state 8

    (2) program -> namespace class .

    $end            reduce using rule 2 (program -> namespace class .)


state 9

    (7) class -> modifier . CLASS CLASSOBJECT block
    (8) class -> modifier . STATIC CLASS CLASSOBJECT block

    CLASS           shift and go to state 18
    STATIC          shift and go to state 19


state 10

    (68) modifier -> PUBLIC .

    CLASS           reduce using rule 68 (modifier -> PUBLIC .)
    STATIC          reduce using rule 68 (modifier -> PUBLIC .)
    VOID            reduce using rule 68 (modifier -> PUBLIC .)
    INT             reduce using rule 68 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 68 (modifier -> PUBLIC .)
    BOOL            reduce using rule 68 (modifier -> PUBLIC .)
    BYTE            reduce using rule 68 (modifier -> PUBLIC .)
    CHAR            reduce using rule 68 (modifier -> PUBLIC .)
    SBYTE           reduce using rule 68 (modifier -> PUBLIC .)
    DECIMAL         reduce using rule 68 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 68 (modifier -> PUBLIC .)
    LONG            reduce using rule 68 (modifier -> PUBLIC .)
    SHORT           reduce using rule 68 (modifier -> PUBLIC .)
    UINT            reduce using rule 68 (modifier -> PUBLIC .)
    CLASSOBJECT     reduce using rule 68 (modifier -> PUBLIC .)


state 11

    (69) modifier -> PRIVATE .

    CLASS           reduce using rule 69 (modifier -> PRIVATE .)
    STATIC          reduce using rule 69 (modifier -> PRIVATE .)
    VOID            reduce using rule 69 (modifier -> PRIVATE .)
    INT             reduce using rule 69 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 69 (modifier -> PRIVATE .)
    BOOL            reduce using rule 69 (modifier -> PRIVATE .)
    BYTE            reduce using rule 69 (modifier -> PRIVATE .)
    CHAR            reduce using rule 69 (modifier -> PRIVATE .)
    SBYTE           reduce using rule 69 (modifier -> PRIVATE .)
    DECIMAL         reduce using rule 69 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 69 (modifier -> PRIVATE .)
    LONG            reduce using rule 69 (modifier -> PRIVATE .)
    SHORT           reduce using rule 69 (modifier -> PRIVATE .)
    UINT            reduce using rule 69 (modifier -> PRIVATE .)
    CLASSOBJECT     reduce using rule 69 (modifier -> PRIVATE .)


state 12

    (70) modifier -> PROTECTED .

    CLASS           reduce using rule 70 (modifier -> PROTECTED .)
    STATIC          reduce using rule 70 (modifier -> PROTECTED .)
    VOID            reduce using rule 70 (modifier -> PROTECTED .)
    INT             reduce using rule 70 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 70 (modifier -> PROTECTED .)
    BOOL            reduce using rule 70 (modifier -> PROTECTED .)
    BYTE            reduce using rule 70 (modifier -> PROTECTED .)
    CHAR            reduce using rule 70 (modifier -> PROTECTED .)
    SBYTE           reduce using rule 70 (modifier -> PROTECTED .)
    DECIMAL         reduce using rule 70 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 70 (modifier -> PROTECTED .)
    LONG            reduce using rule 70 (modifier -> PROTECTED .)
    SHORT           reduce using rule 70 (modifier -> PROTECTED .)
    UINT            reduce using rule 70 (modifier -> PROTECTED .)
    CLASSOBJECT     reduce using rule 70 (modifier -> PROTECTED .)


state 13

    (71) modifier -> INTERNAL .

    CLASS           reduce using rule 71 (modifier -> INTERNAL .)
    STATIC          reduce using rule 71 (modifier -> INTERNAL .)
    VOID            reduce using rule 71 (modifier -> INTERNAL .)
    INT             reduce using rule 71 (modifier -> INTERNAL .)
    FLOAT           reduce using rule 71 (modifier -> INTERNAL .)
    BOOL            reduce using rule 71 (modifier -> INTERNAL .)
    BYTE            reduce using rule 71 (modifier -> INTERNAL .)
    CHAR            reduce using rule 71 (modifier -> INTERNAL .)
    SBYTE           reduce using rule 71 (modifier -> INTERNAL .)
    DECIMAL         reduce using rule 71 (modifier -> INTERNAL .)
    DOUBLE          reduce using rule 71 (modifier -> INTERNAL .)
    LONG            reduce using rule 71 (modifier -> INTERNAL .)
    SHORT           reduce using rule 71 (modifier -> INTERNAL .)
    UINT            reduce using rule 71 (modifier -> INTERNAL .)
    CLASSOBJECT     reduce using rule 71 (modifier -> INTERNAL .)


state 14

    (3) usings -> using usings .

    NAMESPACE       reduce using rule 3 (usings -> using usings .)


state 15

    (6) namespace -> NAMESPACE CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 20


state 16

    (5) using -> USING CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 21


state 17

    (1) program -> usings namespace class .

    $end            reduce using rule 1 (program -> usings namespace class .)


state 18

    (7) class -> modifier CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 22


state 19

    (8) class -> modifier STATIC . CLASS CLASSOBJECT block

    CLASS           shift and go to state 23


state 20

    (6) namespace -> NAMESPACE CLASSOBJECT SEMICOLON .

    PUBLIC          reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PRIVATE         reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PROTECTED       reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    INTERNAL        reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)


state 21

    (5) using -> USING CLASSOBJECT SEMICOLON .

    USING           reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)
    NAMESPACE       reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)


state 22

    (7) class -> modifier CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 24

state 23

    (8) class -> modifier STATIC CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 26


state 24

    (7) class -> modifier CLASS CLASSOBJECT block .

    $end            reduce using rule 7 (class -> modifier CLASS CLASSOBJECT block .)


state 25

    (13) block -> LBRACKET . body RBRACKET
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . function
    (17) lines -> . assignment
    (18) lines -> . expression
    (19) lines -> . declaration
    (20) lines -> . if
    (21) lines -> . loop
    (22) lines -> . return
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (48) assignment -> . ID EQUALS expression
    (49) assignment -> . data_type ID EQUALS expression
    (50) assignment -> . CLASSOBJECT ID
    (51) assignment -> . ID EQUALS ID
    (56) expression -> . expression PLUS term
    (57) expression -> . expression MINUS term
    (58) expression -> . term
    (59) expression -> . object_access
    (60) expression -> . ID
    (61) expression -> . index
    (62) expression -> . type
    (55) declaration -> . data_type ID
    (33) if -> . IF LPAREN logical_expression RPAREN block
    (34) if -> . IF LPAREN logical_expression RPAREN block elseif
    (35) if -> . IF LPAREN logical_expression RPAREN block else
    (40) loop -> . while_loop
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (68) modifier -> . PUBLIC
    (69) modifier -> . PRIVATE
    (70) modifier -> . PROTECTED
    (71) modifier -> . INTERNAL
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (63) term -> . term TIMES factor
    (64) term -> . term DIVIDE factor
    (65) term -> . factor
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (89) index -> . ID LSQBRACKET ID RSQBRACKET
    (29) type -> . FLOAT_TYPE
    (30) type -> . DOUBLE_TYPE
    (31) type -> . DECIMAL_TYPE
    (32) type -> . INTEGER_TYPE
    (41) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 38
    CLASSOBJECT     shift and go to state 40
    IF              shift and go to state 45
    RETURN          shift and go to state 47
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    FLOAT_TYPE      shift and go to state 52
    DOUBLE_TYPE     shift and go to state 53
    DECIMAL_TYPE    shift and go to state 54
    INTEGER_TYPE    shift and go to state 51
    WHILE           shift and go to state 55
    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    LPAREN          shift and go to state 39

    body                           shift and go to state 27
    lines                          shift and go to state 28
    function                       shift and go to state 29
    assignment                     shift and go to state 30
    expression                     shift and go to state 31
    declaration                    shift and go to state 32
    if                             shift and go to state 33
    loop                           shift and go to state 34
    return                         shift and go to state 35
    modifier                       shift and go to state 36
    data_type                      shift and go to state 37
    term                           shift and go to state 41
    object_access                  shift and go to state 42
    index                          shift and go to state 43
    type                           shift and go to state 44
    while_loop                     shift and go to state 46
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    factor                         shift and go to state 50
    array                          shift and go to state 67

state 26

    (8) class -> modifier STATIC CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 68

state 27

    (13) block -> LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 69


state 28

    (14) body -> lines . SEMICOLON
    (15) body -> lines . SEMICOLON body

    SEMICOLON       shift and go to state 70


state 29

    (16) body -> function .

    RBRACKET        reduce using rule 16 (body -> function .)


state 30

    (17) lines -> assignment .

    SEMICOLON       reduce using rule 17 (lines -> assignment .)


state 31

    (18) lines -> expression .
    (56) expression -> expression . PLUS term
    (57) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 18 (lines -> expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 32

    (19) lines -> declaration .

    SEMICOLON       reduce using rule 19 (lines -> declaration .)


state 33

    (20) lines -> if .

    SEMICOLON       reduce using rule 20 (lines -> if .)


state 34

    (21) lines -> loop .

    SEMICOLON       reduce using rule 21 (lines -> loop .)


state 35

    (22) lines -> return .

    SEMICOLON       reduce using rule 22 (lines -> return .)


state 36

    (23) function -> modifier . data_type ID LPAREN declarations RPAREN block
    (24) function -> modifier . VOID ID LPAREN declarations RPAREN block
    (25) function -> modifier . STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> modifier . STATIC VOID ID LPAREN declarations RPAREN block
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 74
    STATIC          shift and go to state 75
    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    CLASSOBJECT     shift and go to state 76

    data_type                      shift and go to state 73
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    array                          shift and go to state 67

state 37

    (49) assignment -> data_type . ID EQUALS expression
    (55) declaration -> data_type . ID

    ID              shift and go to state 77


state 38

    (48) assignment -> ID . EQUALS expression
    (51) assignment -> ID . EQUALS ID
    (60) expression -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (88) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (89) index -> ID . LSQBRACKET ID RSQBRACKET

    EQUALS          shift and go to state 78
    PLUS            reduce using rule 60 (expression -> ID .)
    MINUS           reduce using rule 60 (expression -> ID .)
    SEMICOLON       reduce using rule 60 (expression -> ID .)
    DOT             shift and go to state 79
    LSQBRACKET      shift and go to state 80


state 39

    (67) factor -> LPAREN . expression RPAREN
    (56) expression -> . expression PLUS term
    (57) expression -> . expression MINUS term
    (58) expression -> . term
    (59) expression -> . object_access
    (60) expression -> . ID
    (61) expression -> . index
    (62) expression -> . type
    (63) term -> . term TIMES factor
    (64) term -> . term DIVIDE factor
    (65) term -> . factor
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (89) index -> . ID LSQBRACKET ID RSQBRACKET
    (29) type -> . FLOAT_TYPE
    (30) type -> . DOUBLE_TYPE
    (31) type -> . DECIMAL_TYPE
    (32) type -> . INTEGER_TYPE
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 82
    CLASSOBJECT     shift and go to state 83
    FLOAT_TYPE      shift and go to state 52
    DOUBLE_TYPE     shift and go to state 53
    DECIMAL_TYPE    shift and go to state 54
    INTEGER_TYPE    shift and go to state 51
    LPAREN          shift and go to state 39

    expression                     shift and go to state 81
    term                           shift and go to state 41
    object_access                  shift and go to state 42
    index                          shift and go to state 43
    type                           shift and go to state 44
    factor                         shift and go to state 50

state 40

    (50) assignment -> CLASSOBJECT . ID
    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID
    (87) array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    ID              shift and go to state 84
    DOT             shift and go to state 85
    LSQBRACKET      shift and go to state 86


state 41

    (58) expression -> term .
    (63) term -> term . TIMES factor
    (64) term -> term . DIVIDE factor

    PLUS            reduce using rule 58 (expression -> term .)
    MINUS           reduce using rule 58 (expression -> term .)
    SEMICOLON       reduce using rule 58 (expression -> term .)
    RPAREN          reduce using rule 58 (expression -> term .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88


state 42

    (59) expression -> object_access .

    PLUS            reduce using rule 59 (expression -> object_access .)
    MINUS           reduce using rule 59 (expression -> object_access .)
    SEMICOLON       reduce using rule 59 (expression -> object_access .)
    RPAREN          reduce using rule 59 (expression -> object_access .)


state 43

    (61) expression -> index .

    PLUS            reduce using rule 61 (expression -> index .)
    MINUS           reduce using rule 61 (expression -> index .)
    SEMICOLON       reduce using rule 61 (expression -> index .)
    RPAREN          reduce using rule 61 (expression -> index .)


state 44

    (62) expression -> type .

    PLUS            reduce using rule 62 (expression -> type .)
    MINUS           reduce using rule 62 (expression -> type .)
    SEMICOLON       reduce using rule 62 (expression -> type .)
    RPAREN          reduce using rule 62 (expression -> type .)


state 45

    (33) if -> IF . LPAREN logical_expression RPAREN block
    (34) if -> IF . LPAREN logical_expression RPAREN block elseif
    (35) if -> IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 89


state 46

    (40) loop -> while_loop .

    SEMICOLON       reduce using rule 40 (loop -> while_loop .)


state 47

    (27) return -> RETURN . ID
    (28) return -> RETURN . type
    (29) type -> . FLOAT_TYPE
    (30) type -> . DOUBLE_TYPE
    (31) type -> . DECIMAL_TYPE
    (32) type -> . INTEGER_TYPE

    ID              shift and go to state 90
    FLOAT_TYPE      shift and go to state 52
    DOUBLE_TYPE     shift and go to state 53
    DECIMAL_TYPE    shift and go to state 54
    INTEGER_TYPE    shift and go to state 92

    type                           shift and go to state 91

state 48

    (72) data_type -> primitive .
    (86) array -> primitive . LSQBRACKET RSQBRACKET

    ID              reduce using rule 72 (data_type -> primitive .)
    LSQBRACKET      shift and go to state 93


state 49

    (73) data_type -> data_structure .

    ID              reduce using rule 73 (data_type -> data_structure .)


state 50

    (65) term -> factor .

    TIMES           reduce using rule 65 (term -> factor .)
    DIVIDE          reduce using rule 65 (term -> factor .)
    PLUS            reduce using rule 65 (term -> factor .)
    MINUS           reduce using rule 65 (term -> factor .)
    SEMICOLON       reduce using rule 65 (term -> factor .)
    RPAREN          reduce using rule 65 (term -> factor .)


state 51

    (32) type -> INTEGER_TYPE .
    (66) factor -> INTEGER_TYPE .

  ! reduce/reduce conflict for PLUS resolved using rule 32 (type -> INTEGER_TYPE .)
  ! reduce/reduce conflict for MINUS resolved using rule 32 (type -> INTEGER_TYPE .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 32 (type -> INTEGER_TYPE .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (type -> INTEGER_TYPE .)
    PLUS            reduce using rule 32 (type -> INTEGER_TYPE .)
    MINUS           reduce using rule 32 (type -> INTEGER_TYPE .)
    SEMICOLON       reduce using rule 32 (type -> INTEGER_TYPE .)
    RPAREN          reduce using rule 32 (type -> INTEGER_TYPE .)
    TIMES           reduce using rule 66 (factor -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 66 (factor -> INTEGER_TYPE .)

  ! PLUS            [ reduce using rule 66 (factor -> INTEGER_TYPE .) ]
  ! MINUS           [ reduce using rule 66 (factor -> INTEGER_TYPE .) ]
  ! SEMICOLON       [ reduce using rule 66 (factor -> INTEGER_TYPE .) ]
  ! RPAREN          [ reduce using rule 66 (factor -> INTEGER_TYPE .) ]


state 52

    (29) type -> FLOAT_TYPE .

    PLUS            reduce using rule 29 (type -> FLOAT_TYPE .)
    MINUS           reduce using rule 29 (type -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 29 (type -> FLOAT_TYPE .)
    RPAREN          reduce using rule 29 (type -> FLOAT_TYPE .)


state 53

    (30) type -> DOUBLE_TYPE .

    PLUS            reduce using rule 30 (type -> DOUBLE_TYPE .)
    MINUS           reduce using rule 30 (type -> DOUBLE_TYPE .)
    SEMICOLON       reduce using rule 30 (type -> DOUBLE_TYPE .)
    RPAREN          reduce using rule 30 (type -> DOUBLE_TYPE .)


state 54

    (31) type -> DECIMAL_TYPE .

    PLUS            reduce using rule 31 (type -> DECIMAL_TYPE .)
    MINUS           reduce using rule 31 (type -> DECIMAL_TYPE .)
    SEMICOLON       reduce using rule 31 (type -> DECIMAL_TYPE .)
    RPAREN          reduce using rule 31 (type -> DECIMAL_TYPE .)


state 55

    (41) while_loop -> WHILE . LPAREN logical_expression RPAREN block

    LPAREN          shift and go to state 94


state 56

    (74) primitive -> INT .

    LSQBRACKET      reduce using rule 74 (primitive -> INT .)
    ID              reduce using rule 74 (primitive -> INT .)


state 57

    (75) primitive -> FLOAT .

    LSQBRACKET      reduce using rule 75 (primitive -> FLOAT .)
    ID              reduce using rule 75 (primitive -> FLOAT .)


state 58

    (76) primitive -> BOOL .

    LSQBRACKET      reduce using rule 76 (primitive -> BOOL .)
    ID              reduce using rule 76 (primitive -> BOOL .)


state 59

    (77) primitive -> BYTE .

    LSQBRACKET      reduce using rule 77 (primitive -> BYTE .)
    ID              reduce using rule 77 (primitive -> BYTE .)


state 60

    (78) primitive -> CHAR .

    LSQBRACKET      reduce using rule 78 (primitive -> CHAR .)
    ID              reduce using rule 78 (primitive -> CHAR .)


state 61

    (79) primitive -> SBYTE .

    LSQBRACKET      reduce using rule 79 (primitive -> SBYTE .)
    ID              reduce using rule 79 (primitive -> SBYTE .)


state 62

    (80) primitive -> DECIMAL .

    LSQBRACKET      reduce using rule 80 (primitive -> DECIMAL .)
    ID              reduce using rule 80 (primitive -> DECIMAL .)


state 63

    (81) primitive -> DOUBLE .

    LSQBRACKET      reduce using rule 81 (primitive -> DOUBLE .)
    ID              reduce using rule 81 (primitive -> DOUBLE .)


state 64

    (82) primitive -> LONG .

    LSQBRACKET      reduce using rule 82 (primitive -> LONG .)
    ID              reduce using rule 82 (primitive -> LONG .)


state 65

    (83) primitive -> SHORT .

    LSQBRACKET      reduce using rule 83 (primitive -> SHORT .)
    ID              reduce using rule 83 (primitive -> SHORT .)


state 66

    (84) primitive -> UINT .

    LSQBRACKET      reduce using rule 84 (primitive -> UINT .)
    ID              reduce using rule 84 (primitive -> UINT .)


state 67

    (85) data_structure -> array .

    ID              reduce using rule 85 (data_structure -> array .)


state 68

    (8) class -> modifier STATIC CLASS CLASSOBJECT block .

    $end            reduce using rule 8 (class -> modifier STATIC CLASS CLASSOBJECT block .)


state 69

    (13) block -> LBRACKET body RBRACKET .

    $end            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    ELSE            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    SEMICOLON       reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 13 (block -> LBRACKET body RBRACKET .)


state 70

    (14) body -> lines SEMICOLON .
    (15) body -> lines SEMICOLON . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . function
    (17) lines -> . assignment
    (18) lines -> . expression
    (19) lines -> . declaration
    (20) lines -> . if
    (21) lines -> . loop
    (22) lines -> . return
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (48) assignment -> . ID EQUALS expression
    (49) assignment -> . data_type ID EQUALS expression
    (50) assignment -> . CLASSOBJECT ID
    (51) assignment -> . ID EQUALS ID
    (56) expression -> . expression PLUS term
    (57) expression -> . expression MINUS term
    (58) expression -> . term
    (59) expression -> . object_access
    (60) expression -> . ID
    (61) expression -> . index
    (62) expression -> . type
    (55) declaration -> . data_type ID
    (33) if -> . IF LPAREN logical_expression RPAREN block
    (34) if -> . IF LPAREN logical_expression RPAREN block elseif
    (35) if -> . IF LPAREN logical_expression RPAREN block else
    (40) loop -> . while_loop
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (68) modifier -> . PUBLIC
    (69) modifier -> . PRIVATE
    (70) modifier -> . PROTECTED
    (71) modifier -> . INTERNAL
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (63) term -> . term TIMES factor
    (64) term -> . term DIVIDE factor
    (65) term -> . factor
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (89) index -> . ID LSQBRACKET ID RSQBRACKET
    (29) type -> . FLOAT_TYPE
    (30) type -> . DOUBLE_TYPE
    (31) type -> . DECIMAL_TYPE
    (32) type -> . INTEGER_TYPE
    (41) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    RBRACKET        reduce using rule 14 (body -> lines SEMICOLON .)
    ID              shift and go to state 38
    CLASSOBJECT     shift and go to state 40
    IF              shift and go to state 45
    RETURN          shift and go to state 47
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    FLOAT_TYPE      shift and go to state 52
    DOUBLE_TYPE     shift and go to state 53
    DECIMAL_TYPE    shift and go to state 54
    INTEGER_TYPE    shift and go to state 51
    WHILE           shift and go to state 55
    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    LPAREN          shift and go to state 39

    lines                          shift and go to state 28
    body                           shift and go to state 95
    function                       shift and go to state 29
    assignment                     shift and go to state 30
    expression                     shift and go to state 31
    declaration                    shift and go to state 32
    if                             shift and go to state 33
    loop                           shift and go to state 34
    return                         shift and go to state 35
    modifier                       shift and go to state 36
    data_type                      shift and go to state 37
    term                           shift and go to state 41
    object_access                  shift and go to state 42
    index                          shift and go to state 43
    type                           shift and go to state 44
    while_loop                     shift and go to state 46
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    factor                         shift and go to state 50
    array                          shift and go to state 67

state 71

    (56) expression -> expression PLUS . term
    (63) term -> . term TIMES factor
    (64) term -> . term DIVIDE factor
    (65) term -> . factor
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 97
    LPAREN          shift and go to state 39

    term                           shift and go to state 96
    factor                         shift and go to state 50

state 72

    (57) expression -> expression MINUS . term
    (63) term -> . term TIMES factor
    (64) term -> . term DIVIDE factor
    (65) term -> . factor
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 97
    LPAREN          shift and go to state 39

    term                           shift and go to state 98
    factor                         shift and go to state 50

state 73

    (23) function -> modifier data_type . ID LPAREN declarations RPAREN block

    ID              shift and go to state 99


state 74

    (24) function -> modifier VOID . ID LPAREN declarations RPAREN block

    ID              shift and go to state 100


state 75

    (25) function -> modifier STATIC . data_type ID LPAREN declarations RPAREN block
    (26) function -> modifier STATIC . VOID ID LPAREN declarations RPAREN block
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 102
    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    CLASSOBJECT     shift and go to state 76

    data_type                      shift and go to state 101
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    array                          shift and go to state 67

state 76

    (87) array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    LSQBRACKET      shift and go to state 86


state 77

    (49) assignment -> data_type ID . EQUALS expression
    (55) declaration -> data_type ID .

    EQUALS          shift and go to state 103
    SEMICOLON       reduce using rule 55 (declaration -> data_type ID .)


state 78

    (48) assignment -> ID EQUALS . expression
    (51) assignment -> ID EQUALS . ID
    (56) expression -> . expression PLUS term
    (57) expression -> . expression MINUS term
    (58) expression -> . term
    (59) expression -> . object_access
    (60) expression -> . ID
    (61) expression -> . index
    (62) expression -> . type
    (63) term -> . term TIMES factor
    (64) term -> . term DIVIDE factor
    (65) term -> . factor
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (89) index -> . ID LSQBRACKET ID RSQBRACKET
    (29) type -> . FLOAT_TYPE
    (30) type -> . DOUBLE_TYPE
    (31) type -> . DECIMAL_TYPE
    (32) type -> . INTEGER_TYPE
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 104
    CLASSOBJECT     shift and go to state 83
    FLOAT_TYPE      shift and go to state 52
    DOUBLE_TYPE     shift and go to state 53
    DECIMAL_TYPE    shift and go to state 54
    INTEGER_TYPE    shift and go to state 51
    LPAREN          shift and go to state 39

    expression                     shift and go to state 105
    term                           shift and go to state 41
    object_access                  shift and go to state 42
    index                          shift and go to state 43
    type                           shift and go to state 44
    factor                         shift and go to state 50

state 79

    (9) object_access -> ID DOT . ID
    (11) object_access -> ID DOT . CLASSOBJECT

    ID              shift and go to state 106
    CLASSOBJECT     shift and go to state 107


state 80

    (88) index -> ID LSQBRACKET . INTEGER_TYPE RSQBRACKET
    (89) index -> ID LSQBRACKET . ID RSQBRACKET

    INTEGER_TYPE    shift and go to state 109
    ID              shift and go to state 108


state 81

    (67) factor -> LPAREN expression . RPAREN
    (56) expression -> expression . PLUS term
    (57) expression -> expression . MINUS term

    RPAREN          shift and go to state 110
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 82

    (60) expression -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (88) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (89) index -> ID . LSQBRACKET ID RSQBRACKET

    RPAREN          reduce using rule 60 (expression -> ID .)
    PLUS            reduce using rule 60 (expression -> ID .)
    MINUS           reduce using rule 60 (expression -> ID .)
    SEMICOLON       reduce using rule 60 (expression -> ID .)
    DOT             shift and go to state 79
    LSQBRACKET      shift and go to state 80


state 83

    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID

    DOT             shift and go to state 85


state 84

    (50) assignment -> CLASSOBJECT ID .

    SEMICOLON       reduce using rule 50 (assignment -> CLASSOBJECT ID .)


state 85

    (10) object_access -> CLASSOBJECT DOT . CLASSOBJECT
    (12) object_access -> CLASSOBJECT DOT . ID

    CLASSOBJECT     shift and go to state 111
    ID              shift and go to state 112


state 86

    (87) array -> CLASSOBJECT LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 113


state 87

    (63) term -> term TIMES . factor
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 97
    LPAREN          shift and go to state 39

    factor                         shift and go to state 114

state 88

    (64) term -> term DIVIDE . factor
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN

    INTEGER_TYPE    shift and go to state 97
    LPAREN          shift and go to state 39

    factor                         shift and go to state 115

state 89

    (33) if -> IF LPAREN . logical_expression RPAREN block
    (34) if -> IF LPAREN . logical_expression RPAREN block elseif
    (35) if -> IF LPAREN . logical_expression RPAREN block else
    (42) logical_expression -> . logical_expression logical_operator logical_factor
    (43) logical_expression -> . logical_factor
    (44) logical_factor -> . TRUE
    (45) logical_factor -> . FALSE
    (46) logical_factor -> . ID
    (47) logical_factor -> . logical_expression

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120

    logical_expression             shift and go to state 116
    logical_factor                 shift and go to state 117

state 90

    (27) return -> RETURN ID .

    SEMICOLON       reduce using rule 27 (return -> RETURN ID .)


state 91

    (28) return -> RETURN type .

    SEMICOLON       reduce using rule 28 (return -> RETURN type .)


state 92

    (32) type -> INTEGER_TYPE .

    SEMICOLON       reduce using rule 32 (type -> INTEGER_TYPE .)


state 93

    (86) array -> primitive LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 121


state 94

    (41) while_loop -> WHILE LPAREN . logical_expression RPAREN block
    (42) logical_expression -> . logical_expression logical_operator logical_factor
    (43) logical_expression -> . logical_factor
    (44) logical_factor -> . TRUE
    (45) logical_factor -> . FALSE
    (46) logical_factor -> . ID
    (47) logical_factor -> . logical_expression

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120

    logical_expression             shift and go to state 122
    logical_factor                 shift and go to state 117

state 95

    (15) body -> lines SEMICOLON body .

    RBRACKET        reduce using rule 15 (body -> lines SEMICOLON body .)


state 96

    (56) expression -> expression PLUS term .
    (63) term -> term . TIMES factor
    (64) term -> term . DIVIDE factor

    PLUS            reduce using rule 56 (expression -> expression PLUS term .)
    MINUS           reduce using rule 56 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 56 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 56 (expression -> expression PLUS term .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88


state 97

    (66) factor -> INTEGER_TYPE .

    TIMES           reduce using rule 66 (factor -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 66 (factor -> INTEGER_TYPE .)
    PLUS            reduce using rule 66 (factor -> INTEGER_TYPE .)
    MINUS           reduce using rule 66 (factor -> INTEGER_TYPE .)
    SEMICOLON       reduce using rule 66 (factor -> INTEGER_TYPE .)
    RPAREN          reduce using rule 66 (factor -> INTEGER_TYPE .)


state 98

    (57) expression -> expression MINUS term .
    (63) term -> term . TIMES factor
    (64) term -> term . DIVIDE factor

    PLUS            reduce using rule 57 (expression -> expression MINUS term .)
    MINUS           reduce using rule 57 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 57 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 57 (expression -> expression MINUS term .)
    TIMES           shift and go to state 87
    DIVIDE          shift and go to state 88


state 99

    (23) function -> modifier data_type ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 123


state 100

    (24) function -> modifier VOID ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 124


state 101

    (25) function -> modifier STATIC data_type . ID LPAREN declarations RPAREN block

    ID              shift and go to state 125


state 102

    (26) function -> modifier STATIC VOID . ID LPAREN declarations RPAREN block

    ID              shift and go to state 126


state 103

    (49) assignment -> data_type ID EQUALS . expression
    (56) expression -> . expression PLUS term
    (57) expression -> . expression MINUS term
    (58) expression -> . term
    (59) expression -> . object_access
    (60) expression -> . ID
    (61) expression -> . index
    (62) expression -> . type
    (63) term -> . term TIMES factor
    (64) term -> . term DIVIDE factor
    (65) term -> . factor
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (88) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (89) index -> . ID LSQBRACKET ID RSQBRACKET
    (29) type -> . FLOAT_TYPE
    (30) type -> . DOUBLE_TYPE
    (31) type -> . DECIMAL_TYPE
    (32) type -> . INTEGER_TYPE
    (66) factor -> . INTEGER_TYPE
    (67) factor -> . LPAREN expression RPAREN

    ID              shift and go to state 82
    CLASSOBJECT     shift and go to state 83
    FLOAT_TYPE      shift and go to state 52
    DOUBLE_TYPE     shift and go to state 53
    DECIMAL_TYPE    shift and go to state 54
    INTEGER_TYPE    shift and go to state 51
    LPAREN          shift and go to state 39

    expression                     shift and go to state 127
    term                           shift and go to state 41
    object_access                  shift and go to state 42
    index                          shift and go to state 43
    type                           shift and go to state 44
    factor                         shift and go to state 50

state 104

    (51) assignment -> ID EQUALS ID .
    (60) expression -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (88) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (89) index -> ID . LSQBRACKET ID RSQBRACKET

  ! reduce/reduce conflict for SEMICOLON resolved using rule 51 (assignment -> ID EQUALS ID .)
    SEMICOLON       reduce using rule 51 (assignment -> ID EQUALS ID .)
    PLUS            reduce using rule 60 (expression -> ID .)
    MINUS           reduce using rule 60 (expression -> ID .)
    DOT             shift and go to state 79
    LSQBRACKET      shift and go to state 80

  ! SEMICOLON       [ reduce using rule 60 (expression -> ID .) ]


state 105

    (48) assignment -> ID EQUALS expression .
    (56) expression -> expression . PLUS term
    (57) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 48 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 106

    (9) object_access -> ID DOT ID .

    PLUS            reduce using rule 9 (object_access -> ID DOT ID .)
    MINUS           reduce using rule 9 (object_access -> ID DOT ID .)
    SEMICOLON       reduce using rule 9 (object_access -> ID DOT ID .)
    RPAREN          reduce using rule 9 (object_access -> ID DOT ID .)


state 107

    (11) object_access -> ID DOT CLASSOBJECT .

    PLUS            reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    MINUS           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    RPAREN          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)


state 108

    (89) index -> ID LSQBRACKET ID . RSQBRACKET

    RSQBRACKET      shift and go to state 128


state 109

    (88) index -> ID LSQBRACKET INTEGER_TYPE . RSQBRACKET

    RSQBRACKET      shift and go to state 129


state 110

    (67) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 67 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (factor -> LPAREN expression RPAREN .)


state 111

    (10) object_access -> CLASSOBJECT DOT CLASSOBJECT .

    PLUS            reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    MINUS           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    RPAREN          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)


state 112

    (12) object_access -> CLASSOBJECT DOT ID .

    PLUS            reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    MINUS           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    SEMICOLON       reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    RPAREN          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)


state 113

    (87) array -> CLASSOBJECT LSQBRACKET RSQBRACKET .

    ID              reduce using rule 87 (array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)


state 114

    (63) term -> term TIMES factor .

    TIMES           reduce using rule 63 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 63 (term -> term TIMES factor .)
    PLUS            reduce using rule 63 (term -> term TIMES factor .)
    MINUS           reduce using rule 63 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 63 (term -> term TIMES factor .)
    RPAREN          reduce using rule 63 (term -> term TIMES factor .)


state 115

    (64) term -> term DIVIDE factor .

    TIMES           reduce using rule 64 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 64 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 64 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 64 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 64 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 64 (term -> term DIVIDE factor .)


state 116

    (33) if -> IF LPAREN logical_expression . RPAREN block
    (34) if -> IF LPAREN logical_expression . RPAREN block elseif
    (35) if -> IF LPAREN logical_expression . RPAREN block else
    (42) logical_expression -> logical_expression . logical_operator logical_factor
    (47) logical_factor -> logical_expression .
    (90) logical_operator -> . OR
    (91) logical_operator -> . AND
    (92) logical_operator -> . NOT
    (93) logical_operator -> . GREATER_THAN
    (94) logical_operator -> . LESS_THAN
    (95) logical_operator -> . GREATER_EQUALS_THAN
    (96) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 130
    OR              shift and go to state 132
    AND             shift and go to state 133
    NOT             shift and go to state 134
    GREATER_THAN    shift and go to state 135
    LESS_THAN       shift and go to state 136
    GREATER_EQUALS_THAN shift and go to state 137
    LESS_EQUALS_THAN shift and go to state 138

  ! RPAREN          [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 47 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 131

state 117

    (43) logical_expression -> logical_factor .

    RPAREN          reduce using rule 43 (logical_expression -> logical_factor .)
    OR              reduce using rule 43 (logical_expression -> logical_factor .)
    AND             reduce using rule 43 (logical_expression -> logical_factor .)
    NOT             reduce using rule 43 (logical_expression -> logical_factor .)
    GREATER_THAN    reduce using rule 43 (logical_expression -> logical_factor .)
    LESS_THAN       reduce using rule 43 (logical_expression -> logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 43 (logical_expression -> logical_factor .)
    LESS_EQUALS_THAN reduce using rule 43 (logical_expression -> logical_factor .)


state 118

    (44) logical_factor -> TRUE .

    RPAREN          reduce using rule 44 (logical_factor -> TRUE .)
    OR              reduce using rule 44 (logical_factor -> TRUE .)
    AND             reduce using rule 44 (logical_factor -> TRUE .)
    NOT             reduce using rule 44 (logical_factor -> TRUE .)
    GREATER_THAN    reduce using rule 44 (logical_factor -> TRUE .)
    LESS_THAN       reduce using rule 44 (logical_factor -> TRUE .)
    GREATER_EQUALS_THAN reduce using rule 44 (logical_factor -> TRUE .)
    LESS_EQUALS_THAN reduce using rule 44 (logical_factor -> TRUE .)


state 119

    (45) logical_factor -> FALSE .

    RPAREN          reduce using rule 45 (logical_factor -> FALSE .)
    OR              reduce using rule 45 (logical_factor -> FALSE .)
    AND             reduce using rule 45 (logical_factor -> FALSE .)
    NOT             reduce using rule 45 (logical_factor -> FALSE .)
    GREATER_THAN    reduce using rule 45 (logical_factor -> FALSE .)
    LESS_THAN       reduce using rule 45 (logical_factor -> FALSE .)
    GREATER_EQUALS_THAN reduce using rule 45 (logical_factor -> FALSE .)
    LESS_EQUALS_THAN reduce using rule 45 (logical_factor -> FALSE .)


state 120

    (46) logical_factor -> ID .

    RPAREN          reduce using rule 46 (logical_factor -> ID .)
    OR              reduce using rule 46 (logical_factor -> ID .)
    AND             reduce using rule 46 (logical_factor -> ID .)
    NOT             reduce using rule 46 (logical_factor -> ID .)
    GREATER_THAN    reduce using rule 46 (logical_factor -> ID .)
    LESS_THAN       reduce using rule 46 (logical_factor -> ID .)
    GREATER_EQUALS_THAN reduce using rule 46 (logical_factor -> ID .)
    LESS_EQUALS_THAN reduce using rule 46 (logical_factor -> ID .)


state 121

    (86) array -> primitive LSQBRACKET RSQBRACKET .

    ID              reduce using rule 86 (array -> primitive LSQBRACKET RSQBRACKET .)


state 122

    (41) while_loop -> WHILE LPAREN logical_expression . RPAREN block
    (42) logical_expression -> logical_expression . logical_operator logical_factor
    (47) logical_factor -> logical_expression .
    (90) logical_operator -> . OR
    (91) logical_operator -> . AND
    (92) logical_operator -> . NOT
    (93) logical_operator -> . GREATER_THAN
    (94) logical_operator -> . LESS_THAN
    (95) logical_operator -> . GREATER_EQUALS_THAN
    (96) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 139
    OR              shift and go to state 132
    AND             shift and go to state 133
    NOT             shift and go to state 134
    GREATER_THAN    shift and go to state 135
    LESS_THAN       shift and go to state 136
    GREATER_EQUALS_THAN shift and go to state 137
    LESS_EQUALS_THAN shift and go to state 138

  ! RPAREN          [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 47 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 131

state 123

    (23) function -> modifier data_type ID LPAREN . declarations RPAREN block
    (52) declarations -> . declaration
    (53) declarations -> . declaration COMMA
    (54) declarations -> . declaration COMMA declarations
    (55) declaration -> . data_type ID
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    CLASSOBJECT     shift and go to state 76

    data_type                      shift and go to state 140
    declarations                   shift and go to state 141
    declaration                    shift and go to state 142
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    array                          shift and go to state 67

state 124

    (24) function -> modifier VOID ID LPAREN . declarations RPAREN block
    (52) declarations -> . declaration
    (53) declarations -> . declaration COMMA
    (54) declarations -> . declaration COMMA declarations
    (55) declaration -> . data_type ID
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    CLASSOBJECT     shift and go to state 76

    declarations                   shift and go to state 143
    declaration                    shift and go to state 142
    data_type                      shift and go to state 140
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    array                          shift and go to state 67

state 125

    (25) function -> modifier STATIC data_type ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 144


state 126

    (26) function -> modifier STATIC VOID ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 145


state 127

    (49) assignment -> data_type ID EQUALS expression .
    (56) expression -> expression . PLUS term
    (57) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 49 (assignment -> data_type ID EQUALS expression .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72


state 128

    (89) index -> ID LSQBRACKET ID RSQBRACKET .

    PLUS            reduce using rule 89 (index -> ID LSQBRACKET ID RSQBRACKET .)
    MINUS           reduce using rule 89 (index -> ID LSQBRACKET ID RSQBRACKET .)
    SEMICOLON       reduce using rule 89 (index -> ID LSQBRACKET ID RSQBRACKET .)
    RPAREN          reduce using rule 89 (index -> ID LSQBRACKET ID RSQBRACKET .)


state 129

    (88) index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .

    PLUS            reduce using rule 88 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    MINUS           reduce using rule 88 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    SEMICOLON       reduce using rule 88 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    RPAREN          reduce using rule 88 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)


state 130

    (33) if -> IF LPAREN logical_expression RPAREN . block
    (34) if -> IF LPAREN logical_expression RPAREN . block elseif
    (35) if -> IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 146

state 131

    (42) logical_expression -> logical_expression logical_operator . logical_factor
    (44) logical_factor -> . TRUE
    (45) logical_factor -> . FALSE
    (46) logical_factor -> . ID
    (47) logical_factor -> . logical_expression
    (42) logical_expression -> . logical_expression logical_operator logical_factor
    (43) logical_expression -> . logical_factor

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120

    logical_expression             shift and go to state 147
    logical_factor                 shift and go to state 148

state 132

    (90) logical_operator -> OR .

    TRUE            reduce using rule 90 (logical_operator -> OR .)
    FALSE           reduce using rule 90 (logical_operator -> OR .)
    ID              reduce using rule 90 (logical_operator -> OR .)


state 133

    (91) logical_operator -> AND .

    TRUE            reduce using rule 91 (logical_operator -> AND .)
    FALSE           reduce using rule 91 (logical_operator -> AND .)
    ID              reduce using rule 91 (logical_operator -> AND .)


state 134

    (92) logical_operator -> NOT .

    TRUE            reduce using rule 92 (logical_operator -> NOT .)
    FALSE           reduce using rule 92 (logical_operator -> NOT .)
    ID              reduce using rule 92 (logical_operator -> NOT .)


state 135

    (93) logical_operator -> GREATER_THAN .

    TRUE            reduce using rule 93 (logical_operator -> GREATER_THAN .)
    FALSE           reduce using rule 93 (logical_operator -> GREATER_THAN .)
    ID              reduce using rule 93 (logical_operator -> GREATER_THAN .)


state 136

    (94) logical_operator -> LESS_THAN .

    TRUE            reduce using rule 94 (logical_operator -> LESS_THAN .)
    FALSE           reduce using rule 94 (logical_operator -> LESS_THAN .)
    ID              reduce using rule 94 (logical_operator -> LESS_THAN .)


state 137

    (95) logical_operator -> GREATER_EQUALS_THAN .

    TRUE            reduce using rule 95 (logical_operator -> GREATER_EQUALS_THAN .)
    FALSE           reduce using rule 95 (logical_operator -> GREATER_EQUALS_THAN .)
    ID              reduce using rule 95 (logical_operator -> GREATER_EQUALS_THAN .)


state 138

    (96) logical_operator -> LESS_EQUALS_THAN .

    TRUE            reduce using rule 96 (logical_operator -> LESS_EQUALS_THAN .)
    FALSE           reduce using rule 96 (logical_operator -> LESS_EQUALS_THAN .)
    ID              reduce using rule 96 (logical_operator -> LESS_EQUALS_THAN .)


state 139

    (41) while_loop -> WHILE LPAREN logical_expression RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 149

state 140

    (55) declaration -> data_type . ID

    ID              shift and go to state 150


state 141

    (23) function -> modifier data_type ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 151


state 142

    (52) declarations -> declaration .
    (53) declarations -> declaration . COMMA
    (54) declarations -> declaration . COMMA declarations

    RPAREN          reduce using rule 52 (declarations -> declaration .)
    COMMA           shift and go to state 152


state 143

    (24) function -> modifier VOID ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 153


state 144

    (25) function -> modifier STATIC data_type ID LPAREN . declarations RPAREN block
    (52) declarations -> . declaration
    (53) declarations -> . declaration COMMA
    (54) declarations -> . declaration COMMA declarations
    (55) declaration -> . data_type ID
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    CLASSOBJECT     shift and go to state 76

    data_type                      shift and go to state 140
    declarations                   shift and go to state 154
    declaration                    shift and go to state 142
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    array                          shift and go to state 67

state 145

    (26) function -> modifier STATIC VOID ID LPAREN . declarations RPAREN block
    (52) declarations -> . declaration
    (53) declarations -> . declaration COMMA
    (54) declarations -> . declaration COMMA declarations
    (55) declaration -> . data_type ID
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    CLASSOBJECT     shift and go to state 76

    declarations                   shift and go to state 155
    declaration                    shift and go to state 142
    data_type                      shift and go to state 140
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    array                          shift and go to state 67

state 146

    (33) if -> IF LPAREN logical_expression RPAREN block .
    (34) if -> IF LPAREN logical_expression RPAREN block . elseif
    (35) if -> IF LPAREN logical_expression RPAREN block . else
    (36) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (37) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (38) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (39) else -> . ELSE block

    SEMICOLON       reduce using rule 33 (if -> IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 158

    elseif                         shift and go to state 156
    else                           shift and go to state 157

state 147

    (47) logical_factor -> logical_expression .
    (42) logical_expression -> logical_expression . logical_operator logical_factor
    (90) logical_operator -> . OR
    (91) logical_operator -> . AND
    (92) logical_operator -> . NOT
    (93) logical_operator -> . GREATER_THAN
    (94) logical_operator -> . LESS_THAN
    (95) logical_operator -> . GREATER_EQUALS_THAN
    (96) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          reduce using rule 47 (logical_factor -> logical_expression .)
    OR              shift and go to state 132
    AND             shift and go to state 133
    NOT             shift and go to state 134
    GREATER_THAN    shift and go to state 135
    LESS_THAN       shift and go to state 136
    GREATER_EQUALS_THAN shift and go to state 137
    LESS_EQUALS_THAN shift and go to state 138

  ! OR              [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 47 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 131

state 148

    (42) logical_expression -> logical_expression logical_operator logical_factor .
    (43) logical_expression -> logical_factor .

  ! reduce/reduce conflict for RPAREN resolved using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for OR resolved using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for AND resolved using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for NOT resolved using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for GREATER_EQUALS_THAN resolved using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for LESS_EQUALS_THAN resolved using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
    RPAREN          reduce using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
    OR              reduce using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
    AND             reduce using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
    NOT             reduce using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_THAN    reduce using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_THAN       reduce using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_EQUALS_THAN reduce using rule 42 (logical_expression -> logical_expression logical_operator logical_factor .)

  ! RPAREN          [ reduce using rule 43 (logical_expression -> logical_factor .) ]
  ! OR              [ reduce using rule 43 (logical_expression -> logical_factor .) ]
  ! AND             [ reduce using rule 43 (logical_expression -> logical_factor .) ]
  ! NOT             [ reduce using rule 43 (logical_expression -> logical_factor .) ]
  ! GREATER_THAN    [ reduce using rule 43 (logical_expression -> logical_factor .) ]
  ! LESS_THAN       [ reduce using rule 43 (logical_expression -> logical_factor .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 43 (logical_expression -> logical_factor .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 43 (logical_expression -> logical_factor .) ]


state 149

    (41) while_loop -> WHILE LPAREN logical_expression RPAREN block .

    SEMICOLON       reduce using rule 41 (while_loop -> WHILE LPAREN logical_expression RPAREN block .)


state 150

    (55) declaration -> data_type ID .

    COMMA           reduce using rule 55 (declaration -> data_type ID .)
    RPAREN          reduce using rule 55 (declaration -> data_type ID .)


state 151

    (23) function -> modifier data_type ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 159

state 152

    (53) declarations -> declaration COMMA .
    (54) declarations -> declaration COMMA . declarations
    (52) declarations -> . declaration
    (53) declarations -> . declaration COMMA
    (54) declarations -> . declaration COMMA declarations
    (55) declaration -> . data_type ID
    (72) data_type -> . primitive
    (73) data_type -> . data_structure
    (74) primitive -> . INT
    (75) primitive -> . FLOAT
    (76) primitive -> . BOOL
    (77) primitive -> . BYTE
    (78) primitive -> . CHAR
    (79) primitive -> . SBYTE
    (80) primitive -> . DECIMAL
    (81) primitive -> . DOUBLE
    (82) primitive -> . LONG
    (83) primitive -> . SHORT
    (84) primitive -> . UINT
    (85) data_structure -> . array
    (86) array -> . primitive LSQBRACKET RSQBRACKET
    (87) array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    RPAREN          reduce using rule 53 (declarations -> declaration COMMA .)
    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    BOOL            shift and go to state 58
    BYTE            shift and go to state 59
    CHAR            shift and go to state 60
    SBYTE           shift and go to state 61
    DECIMAL         shift and go to state 62
    DOUBLE          shift and go to state 63
    LONG            shift and go to state 64
    SHORT           shift and go to state 65
    UINT            shift and go to state 66
    CLASSOBJECT     shift and go to state 76

    declaration                    shift and go to state 142
    declarations                   shift and go to state 160
    data_type                      shift and go to state 140
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    array                          shift and go to state 67

state 153

    (24) function -> modifier VOID ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 161

state 154

    (25) function -> modifier STATIC data_type ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 162


state 155

    (26) function -> modifier STATIC VOID ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 163


state 156

    (34) if -> IF LPAREN logical_expression RPAREN block elseif .

    SEMICOLON       reduce using rule 34 (if -> IF LPAREN logical_expression RPAREN block elseif .)


state 157

    (35) if -> IF LPAREN logical_expression RPAREN block else .

    SEMICOLON       reduce using rule 35 (if -> IF LPAREN logical_expression RPAREN block else .)


state 158

    (36) elseif -> ELSE . IF LPAREN logical_expression RPAREN block
    (37) elseif -> ELSE . IF LPAREN logical_expression RPAREN block elseif
    (38) elseif -> ELSE . IF LPAREN logical_expression RPAREN block else
    (39) else -> ELSE . block
    (13) block -> . LBRACKET body RBRACKET

    IF              shift and go to state 164
    LBRACKET        shift and go to state 25

    block                          shift and go to state 165

state 159

    (23) function -> modifier data_type ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 23 (function -> modifier data_type ID LPAREN declarations RPAREN block .)


state 160

    (54) declarations -> declaration COMMA declarations .

    RPAREN          reduce using rule 54 (declarations -> declaration COMMA declarations .)


state 161

    (24) function -> modifier VOID ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 24 (function -> modifier VOID ID LPAREN declarations RPAREN block .)


state 162

    (25) function -> modifier STATIC data_type ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 166

state 163

    (26) function -> modifier STATIC VOID ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 167

state 164

    (36) elseif -> ELSE IF . LPAREN logical_expression RPAREN block
    (37) elseif -> ELSE IF . LPAREN logical_expression RPAREN block elseif
    (38) elseif -> ELSE IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 168


state 165

    (39) else -> ELSE block .

    SEMICOLON       reduce using rule 39 (else -> ELSE block .)


state 166

    (25) function -> modifier STATIC data_type ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 25 (function -> modifier STATIC data_type ID LPAREN declarations RPAREN block .)


state 167

    (26) function -> modifier STATIC VOID ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 26 (function -> modifier STATIC VOID ID LPAREN declarations RPAREN block .)


state 168

    (36) elseif -> ELSE IF LPAREN . logical_expression RPAREN block
    (37) elseif -> ELSE IF LPAREN . logical_expression RPAREN block elseif
    (38) elseif -> ELSE IF LPAREN . logical_expression RPAREN block else
    (42) logical_expression -> . logical_expression logical_operator logical_factor
    (43) logical_expression -> . logical_factor
    (44) logical_factor -> . TRUE
    (45) logical_factor -> . FALSE
    (46) logical_factor -> . ID
    (47) logical_factor -> . logical_expression

    TRUE            shift and go to state 118
    FALSE           shift and go to state 119
    ID              shift and go to state 120

    logical_expression             shift and go to state 169
    logical_factor                 shift and go to state 117

state 169

    (36) elseif -> ELSE IF LPAREN logical_expression . RPAREN block
    (37) elseif -> ELSE IF LPAREN logical_expression . RPAREN block elseif
    (38) elseif -> ELSE IF LPAREN logical_expression . RPAREN block else
    (42) logical_expression -> logical_expression . logical_operator logical_factor
    (47) logical_factor -> logical_expression .
    (90) logical_operator -> . OR
    (91) logical_operator -> . AND
    (92) logical_operator -> . NOT
    (93) logical_operator -> . GREATER_THAN
    (94) logical_operator -> . LESS_THAN
    (95) logical_operator -> . GREATER_EQUALS_THAN
    (96) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 170
    OR              shift and go to state 132
    AND             shift and go to state 133
    NOT             shift and go to state 134
    GREATER_THAN    shift and go to state 135
    LESS_THAN       shift and go to state 136
    GREATER_EQUALS_THAN shift and go to state 137
    LESS_EQUALS_THAN shift and go to state 138

  ! RPAREN          [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 47 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 47 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 131

state 170

    (36) elseif -> ELSE IF LPAREN logical_expression RPAREN . block
    (37) elseif -> ELSE IF LPAREN logical_expression RPAREN . block elseif
    (38) elseif -> ELSE IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 171

state 171

    (36) elseif -> ELSE IF LPAREN logical_expression RPAREN block .
    (37) elseif -> ELSE IF LPAREN logical_expression RPAREN block . elseif
    (38) elseif -> ELSE IF LPAREN logical_expression RPAREN block . else
    (36) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (37) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (38) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (39) else -> . ELSE block

    SEMICOLON       reduce using rule 36 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 158

    elseif                         shift and go to state 172
    else                           shift and go to state 173

state 172

    (37) elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .

    SEMICOLON       reduce using rule 37 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)


state 173

    (38) elseif -> ELSE IF LPAREN logical_expression RPAREN block else .

    SEMICOLON       reduce using rule 38 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for NOT in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 116 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for NOT in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 122 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 147 resolved as shift
WARNING: shift/reduce conflict for AND in state 147 resolved as shift
WARNING: shift/reduce conflict for NOT in state 147 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 147 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 147 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 147 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 147 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 169 resolved as shift
WARNING: shift/reduce conflict for OR in state 169 resolved as shift
WARNING: shift/reduce conflict for AND in state 169 resolved as shift
WARNING: shift/reduce conflict for NOT in state 169 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 169 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 169 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 169 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 169 resolved as shift
WARNING: reduce/reduce conflict in state 51 resolved using rule (type -> INTEGER_TYPE)
WARNING: rejected rule (factor -> INTEGER_TYPE) in state 51
WARNING: reduce/reduce conflict in state 104 resolved using rule (assignment -> ID EQUALS ID)
WARNING: rejected rule (expression -> ID) in state 104
WARNING: reduce/reduce conflict in state 148 resolved using rule (logical_expression -> logical_expression logical_operator logical_factor)
WARNING: rejected rule (logical_expression -> logical_factor) in state 148
