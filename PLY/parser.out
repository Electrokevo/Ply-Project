Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    CHARACTER
    DIVIDE_EQUAL
    DO
    FILE
    IN
    MINUS_EQUAL
    MODULE
    MODULE_EQUAL
    NEW
    NINT
    NUINT
    PLUS_EQUAL
    STRING
    THEN
    TIMES_EQUAL
    ULONG
    USHORT
    VAR

Grammar

Rule 0     S' -> program
Rule 1     program -> usings namespace class
Rule 2     program -> namespace class
Rule 3     usings -> using usings
Rule 4     usings -> using
Rule 5     using -> USING CLASSOBJECT SEMICOLON
Rule 6     namespace -> NAMESPACE CLASSOBJECT SEMICOLON
Rule 7     class -> modifier CLASS CLASSOBJECT block
Rule 8     class -> modifier STATIC CLASS CLASSOBJECT block
Rule 9     object_access -> ID DOT ID
Rule 10    object_access -> CLASSOBJECT DOT CLASSOBJECT
Rule 11    object_access -> ID DOT CLASSOBJECT
Rule 12    object_access -> CLASSOBJECT DOT ID
Rule 13    block -> LBRACKET body RBRACKET
Rule 14    body -> lines SEMICOLON
Rule 15    body -> lines SEMICOLON body
Rule 16    body -> function
Rule 17    lines -> assignment
Rule 18    lines -> expression
Rule 19    lines -> declaration
Rule 20    lines -> if
Rule 21    lines -> loop
Rule 22    lines -> return
Rule 23    function -> modifier data_type ID LPAREN declarations RPAREN block
Rule 24    function -> modifier VOID ID LPAREN declarations RPAREN block
Rule 25    function -> modifier STATIC data_type ID LPAREN declarations RPAREN block
Rule 26    function -> modifier STATIC VOID ID LPAREN declarations RPAREN block
Rule 27    return -> RETURN ID
Rule 28    return -> RETURN type
Rule 29    lambda_function -> LPAREN ID RPAREN ARROW expression
Rule 30    lambda_function -> LPAREN ID RPAREN ARROW block
Rule 31    expression -> object_access LPAREN expression RPAREN
Rule 32    expression -> object_access LPAREN RPAREN
Rule 33    type -> FLOAT_TYPE
Rule 34    type -> DOUBLE_TYPE
Rule 35    type -> DECIMAL_TYPE
Rule 36    type -> INTEGER_TYPE
Rule 37    if -> IF LPAREN logical_expression RPAREN block
Rule 38    if -> IF LPAREN logical_expression RPAREN block elseif
Rule 39    if -> IF LPAREN logical_expression RPAREN block else
Rule 40    elseif -> ELSE IF LPAREN logical_expression RPAREN block
Rule 41    elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif
Rule 42    elseif -> ELSE IF LPAREN logical_expression RPAREN block else
Rule 43    else -> ELSE block
Rule 44    loop -> while_loop
Rule 45    loop -> loop_for
Rule 46    loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
Rule 47    while_loop -> WHILE LPAREN logical_expression RPAREN block
Rule 48    logical_expression -> logical_expression logical_operator logical_factor
Rule 49    logical_expression -> logical_factor
Rule 50    logical_factor -> TRUE
Rule 51    logical_factor -> FALSE
Rule 52    logical_factor -> ID
Rule 53    logical_factor -> logical_expression
Rule 54    data_structure -> data_structure_list
Rule 55    data_structure -> data_structure_array
Rule 56    data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
Rule 57    data_structure_array -> primitive LSQBRACKET RSQBRACKET
Rule 58    data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET
Rule 59    assignment -> ID EQUALS expression
Rule 60    assignment -> data_type ID EQUALS expression
Rule 61    assignment -> CLASSOBJECT ID
Rule 62    assignment -> ID EQUALS ID
Rule 63    declarations -> declaration
Rule 64    declarations -> declaration COMMA
Rule 65    declarations -> declaration COMMA declarations
Rule 66    declaration -> data_type ID
Rule 67    expression -> expression PLUS term
Rule 68    expression -> expression MINUS term
Rule 69    expression -> term
Rule 70    term -> term TIMES factor
Rule 71    term -> term DIVIDE factor
Rule 72    term -> factor
Rule 73    factor -> type
Rule 74    factor -> LPAREN expression RPAREN
Rule 75    factor -> object_access
Rule 76    factor -> ID
Rule 77    factor -> index
Rule 78    modifier -> PUBLIC
Rule 79    modifier -> PRIVATE
Rule 80    modifier -> PROTECTED
Rule 81    modifier -> INTERNAL
Rule 82    data_type -> primitive
Rule 83    data_type -> data_structure
Rule 84    primitive -> INT
Rule 85    primitive -> FLOAT
Rule 86    primitive -> BOOL
Rule 87    primitive -> BYTE
Rule 88    primitive -> CHAR
Rule 89    primitive -> SBYTE
Rule 90    primitive -> DECIMAL
Rule 91    primitive -> DOUBLE
Rule 92    primitive -> LONG
Rule 93    primitive -> SHORT
Rule 94    primitive -> UINT
Rule 95    index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET
Rule 96    index -> ID LSQBRACKET ID RSQBRACKET
Rule 97    logical_operator -> OR
Rule 98    logical_operator -> AND
Rule 99    logical_operator -> NOT
Rule 100   logical_operator -> GREATER_THAN
Rule 101   logical_operator -> LESS_THAN
Rule 102   logical_operator -> GREATER_EQUALS_THAN
Rule 103   logical_operator -> LESS_EQUALS_THAN

Terminals, with rules where they appear

AND                  : 98
ARROW                : 29 30
BOOL                 : 86
BYTE                 : 87
CHAR                 : 88
CHARACTER            : 
CLASS                : 7 8
CLASSOBJECT          : 5 6 7 8 10 10 11 12 58 61
COMMA                : 64 65
DECIMAL              : 90
DECIMAL_TYPE         : 35
DIVIDE               : 71
DIVIDE_EQUAL         : 
DO                   : 
DOT                  : 9 10 11 12
DOUBLE               : 91
DOUBLE_TYPE          : 34
ELSE                 : 40 41 42 43
EQUALS               : 59 60 62
FALSE                : 51
FILE                 : 
FLOAT                : 85
FLOAT_TYPE           : 33
FOR                  : 46
GREATER_EQUALS_THAN  : 102
GREATER_THAN         : 56 100
ID                   : 9 9 11 12 23 24 25 26 27 29 30 52 56 59 60 61 62 62 66 76 95 96 96
IF                   : 37 38 39 40 41 42
IN                   : 
INT                  : 84
INTEGER_TYPE         : 36 95
INTERNAL             : 81
LBRACKET             : 13
LESS_EQUALS_THAN     : 103
LESS_THAN            : 56 101
LIST                 : 56
LONG                 : 92
LPAREN               : 23 24 25 26 29 30 31 32 37 38 39 40 41 42 46 47 74
LSQBRACKET           : 56 57 58 95 96
MINUS                : 68
MINUS_EQUAL          : 
MODULE               : 
MODULE_EQUAL         : 
NAMESPACE            : 6
NEW                  : 
NINT                 : 
NOT                  : 99
NUINT                : 
OR                   : 97
PLUS                 : 67
PLUS_EQUAL           : 
PRIVATE              : 79
PROTECTED            : 80
PUBLIC               : 78
RBRACKET             : 13
RETURN               : 27 28
RPAREN               : 23 24 25 26 29 30 31 32 37 38 39 40 41 42 46 47 74
RSQBRACKET           : 56 57 58 95 96
SBYTE                : 89
SEMICOLON            : 5 6 14 15 46 46
SHORT                : 93
STATIC               : 8 25 26
STRING               : 
THEN                 : 
TIMES                : 70
TIMES_EQUAL          : 
TRUE                 : 50
UINT                 : 94
ULONG                : 
USHORT               : 
USING                : 5
VAR                  : 
VOID                 : 24 26
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

assignment           : 17 46 46
block                : 7 8 23 24 25 26 30 37 38 39 40 41 42 43 46 47
body                 : 13 15
class                : 1 2
data_structure       : 83
data_structure_array : 55
data_structure_list  : 54
data_type            : 23 25 56 60 66
declaration          : 19 63 64 65
declarations         : 23 24 25 26 65
else                 : 39 42
elseif               : 38 41
expression           : 18 29 31 59 60 67 68 74
factor               : 70 71 72
function             : 16
if                   : 20
index                : 77
lambda_function      : 
lines                : 14 15
logical_expression   : 37 38 39 40 41 42 46 47 48 53
logical_factor       : 48 49
logical_operator     : 48
loop                 : 21
loop_for             : 45
modifier             : 7 8 23 24 25 26
namespace            : 1 2
object_access        : 31 32 75
primitive            : 57 82
program              : 0
return               : 22
term                 : 67 68 69 70 71
type                 : 28 56 73
using                : 3 4
usings               : 1 3
while_loop           : 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . usings namespace class
    (2) program -> . namespace class
    (3) usings -> . using usings
    (4) usings -> . using
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5
    USING           shift and go to state 6

    program                        shift and go to state 1
    usings                         shift and go to state 2
    namespace                      shift and go to state 3
    using                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> usings . namespace class
    (6) namespace -> . NAMESPACE CLASSOBJECT SEMICOLON

    NAMESPACE       shift and go to state 5

    namespace                      shift and go to state 7

state 3

    (2) program -> namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
    (78) modifier -> . PUBLIC
    (79) modifier -> . PRIVATE
    (80) modifier -> . PROTECTED
    (81) modifier -> . INTERNAL

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 8
    modifier                       shift and go to state 9

state 4

    (3) usings -> using . usings
    (4) usings -> using .
    (3) usings -> . using usings
    (4) usings -> . using
    (5) using -> . USING CLASSOBJECT SEMICOLON

    NAMESPACE       reduce using rule 4 (usings -> using .)
    USING           shift and go to state 6

    using                          shift and go to state 4
    usings                         shift and go to state 14

state 5

    (6) namespace -> NAMESPACE . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 15


state 6

    (5) using -> USING . CLASSOBJECT SEMICOLON

    CLASSOBJECT     shift and go to state 16


state 7

    (1) program -> usings namespace . class
    (7) class -> . modifier CLASS CLASSOBJECT block
    (8) class -> . modifier STATIC CLASS CLASSOBJECT block
    (78) modifier -> . PUBLIC
    (79) modifier -> . PRIVATE
    (80) modifier -> . PROTECTED
    (81) modifier -> . INTERNAL

    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13

    class                          shift and go to state 17
    modifier                       shift and go to state 9

state 8

    (2) program -> namespace class .

    $end            reduce using rule 2 (program -> namespace class .)


state 9

    (7) class -> modifier . CLASS CLASSOBJECT block
    (8) class -> modifier . STATIC CLASS CLASSOBJECT block

    CLASS           shift and go to state 18
    STATIC          shift and go to state 19


state 10

    (78) modifier -> PUBLIC .

    CLASS           reduce using rule 78 (modifier -> PUBLIC .)
    STATIC          reduce using rule 78 (modifier -> PUBLIC .)
    VOID            reduce using rule 78 (modifier -> PUBLIC .)
    INT             reduce using rule 78 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 78 (modifier -> PUBLIC .)
    BOOL            reduce using rule 78 (modifier -> PUBLIC .)
    BYTE            reduce using rule 78 (modifier -> PUBLIC .)
    CHAR            reduce using rule 78 (modifier -> PUBLIC .)
    SBYTE           reduce using rule 78 (modifier -> PUBLIC .)
    DECIMAL         reduce using rule 78 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 78 (modifier -> PUBLIC .)
    LONG            reduce using rule 78 (modifier -> PUBLIC .)
    SHORT           reduce using rule 78 (modifier -> PUBLIC .)
    UINT            reduce using rule 78 (modifier -> PUBLIC .)
    LIST            reduce using rule 78 (modifier -> PUBLIC .)
    CLASSOBJECT     reduce using rule 78 (modifier -> PUBLIC .)


state 11

    (79) modifier -> PRIVATE .

    CLASS           reduce using rule 79 (modifier -> PRIVATE .)
    STATIC          reduce using rule 79 (modifier -> PRIVATE .)
    VOID            reduce using rule 79 (modifier -> PRIVATE .)
    INT             reduce using rule 79 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 79 (modifier -> PRIVATE .)
    BOOL            reduce using rule 79 (modifier -> PRIVATE .)
    BYTE            reduce using rule 79 (modifier -> PRIVATE .)
    CHAR            reduce using rule 79 (modifier -> PRIVATE .)
    SBYTE           reduce using rule 79 (modifier -> PRIVATE .)
    DECIMAL         reduce using rule 79 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 79 (modifier -> PRIVATE .)
    LONG            reduce using rule 79 (modifier -> PRIVATE .)
    SHORT           reduce using rule 79 (modifier -> PRIVATE .)
    UINT            reduce using rule 79 (modifier -> PRIVATE .)
    LIST            reduce using rule 79 (modifier -> PRIVATE .)
    CLASSOBJECT     reduce using rule 79 (modifier -> PRIVATE .)


state 12

    (80) modifier -> PROTECTED .

    CLASS           reduce using rule 80 (modifier -> PROTECTED .)
    STATIC          reduce using rule 80 (modifier -> PROTECTED .)
    VOID            reduce using rule 80 (modifier -> PROTECTED .)
    INT             reduce using rule 80 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 80 (modifier -> PROTECTED .)
    BOOL            reduce using rule 80 (modifier -> PROTECTED .)
    BYTE            reduce using rule 80 (modifier -> PROTECTED .)
    CHAR            reduce using rule 80 (modifier -> PROTECTED .)
    SBYTE           reduce using rule 80 (modifier -> PROTECTED .)
    DECIMAL         reduce using rule 80 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 80 (modifier -> PROTECTED .)
    LONG            reduce using rule 80 (modifier -> PROTECTED .)
    SHORT           reduce using rule 80 (modifier -> PROTECTED .)
    UINT            reduce using rule 80 (modifier -> PROTECTED .)
    LIST            reduce using rule 80 (modifier -> PROTECTED .)
    CLASSOBJECT     reduce using rule 80 (modifier -> PROTECTED .)


state 13

    (81) modifier -> INTERNAL .

    CLASS           reduce using rule 81 (modifier -> INTERNAL .)
    STATIC          reduce using rule 81 (modifier -> INTERNAL .)
    VOID            reduce using rule 81 (modifier -> INTERNAL .)
    INT             reduce using rule 81 (modifier -> INTERNAL .)
    FLOAT           reduce using rule 81 (modifier -> INTERNAL .)
    BOOL            reduce using rule 81 (modifier -> INTERNAL .)
    BYTE            reduce using rule 81 (modifier -> INTERNAL .)
    CHAR            reduce using rule 81 (modifier -> INTERNAL .)
    SBYTE           reduce using rule 81 (modifier -> INTERNAL .)
    DECIMAL         reduce using rule 81 (modifier -> INTERNAL .)
    DOUBLE          reduce using rule 81 (modifier -> INTERNAL .)
    LONG            reduce using rule 81 (modifier -> INTERNAL .)
    SHORT           reduce using rule 81 (modifier -> INTERNAL .)
    UINT            reduce using rule 81 (modifier -> INTERNAL .)
    LIST            reduce using rule 81 (modifier -> INTERNAL .)
    CLASSOBJECT     reduce using rule 81 (modifier -> INTERNAL .)


state 14

    (3) usings -> using usings .

    NAMESPACE       reduce using rule 3 (usings -> using usings .)


state 15

    (6) namespace -> NAMESPACE CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 20


state 16

    (5) using -> USING CLASSOBJECT . SEMICOLON

    SEMICOLON       shift and go to state 21


state 17

    (1) program -> usings namespace class .

    $end            reduce using rule 1 (program -> usings namespace class .)


state 18

    (7) class -> modifier CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 22


state 19

    (8) class -> modifier STATIC . CLASS CLASSOBJECT block

    CLASS           shift and go to state 23


state 20

    (6) namespace -> NAMESPACE CLASSOBJECT SEMICOLON .

    PUBLIC          reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PRIVATE         reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    PROTECTED       reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)
    INTERNAL        reduce using rule 6 (namespace -> NAMESPACE CLASSOBJECT SEMICOLON .)


state 21

    (5) using -> USING CLASSOBJECT SEMICOLON .

    USING           reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)
    NAMESPACE       reduce using rule 5 (using -> USING CLASSOBJECT SEMICOLON .)


state 22

    (7) class -> modifier CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 24

state 23

    (8) class -> modifier STATIC CLASS . CLASSOBJECT block

    CLASSOBJECT     shift and go to state 26


state 24

    (7) class -> modifier CLASS CLASSOBJECT block .

    $end            reduce using rule 7 (class -> modifier CLASS CLASSOBJECT block .)


state 25

    (13) block -> LBRACKET . body RBRACKET
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . function
    (17) lines -> . assignment
    (18) lines -> . expression
    (19) lines -> . declaration
    (20) lines -> . if
    (21) lines -> . loop
    (22) lines -> . return
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (59) assignment -> . ID EQUALS expression
    (60) assignment -> . data_type ID EQUALS expression
    (61) assignment -> . CLASSOBJECT ID
    (62) assignment -> . ID EQUALS ID
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (67) expression -> . expression PLUS term
    (68) expression -> . expression MINUS term
    (69) expression -> . term
    (66) declaration -> . data_type ID
    (37) if -> . IF LPAREN logical_expression RPAREN block
    (38) if -> . IF LPAREN logical_expression RPAREN block elseif
    (39) if -> . IF LPAREN logical_expression RPAREN block else
    (44) loop -> . while_loop
    (45) loop -> . loop_for
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (78) modifier -> . PUBLIC
    (79) modifier -> . PRIVATE
    (80) modifier -> . PROTECTED
    (81) modifier -> . INTERNAL
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . factor
    (47) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (46) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 38
    CLASSOBJECT     shift and go to state 40
    IF              shift and go to state 43
    RETURN          shift and go to state 46
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LPAREN          shift and go to state 39
    LIST            shift and go to state 67
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71

    body                           shift and go to state 27
    lines                          shift and go to state 28
    function                       shift and go to state 29
    assignment                     shift and go to state 30
    expression                     shift and go to state 31
    declaration                    shift and go to state 32
    if                             shift and go to state 33
    loop                           shift and go to state 34
    return                         shift and go to state 35
    modifier                       shift and go to state 36
    data_type                      shift and go to state 37
    object_access                  shift and go to state 41
    term                           shift and go to state 42
    while_loop                     shift and go to state 44
    loop_for                       shift and go to state 45
    type                           shift and go to state 47
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    factor                         shift and go to state 50
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65
    index                          shift and go to state 66

state 26

    (8) class -> modifier STATIC CLASS CLASSOBJECT . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 72

state 27

    (13) block -> LBRACKET body . RBRACKET

    RBRACKET        shift and go to state 73


state 28

    (14) body -> lines . SEMICOLON
    (15) body -> lines . SEMICOLON body

    SEMICOLON       shift and go to state 74


state 29

    (16) body -> function .

    RBRACKET        reduce using rule 16 (body -> function .)


state 30

    (17) lines -> assignment .

    SEMICOLON       reduce using rule 17 (lines -> assignment .)


state 31

    (18) lines -> expression .
    (67) expression -> expression . PLUS term
    (68) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 18 (lines -> expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 32

    (19) lines -> declaration .

    SEMICOLON       reduce using rule 19 (lines -> declaration .)


state 33

    (20) lines -> if .

    SEMICOLON       reduce using rule 20 (lines -> if .)


state 34

    (21) lines -> loop .

    SEMICOLON       reduce using rule 21 (lines -> loop .)


state 35

    (22) lines -> return .

    SEMICOLON       reduce using rule 22 (lines -> return .)


state 36

    (23) function -> modifier . data_type ID LPAREN declarations RPAREN block
    (24) function -> modifier . VOID ID LPAREN declarations RPAREN block
    (25) function -> modifier . STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> modifier . STATIC VOID ID LPAREN declarations RPAREN block
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 78
    STATIC          shift and go to state 79
    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67
    CLASSOBJECT     shift and go to state 80

    data_type                      shift and go to state 77
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 37

    (60) assignment -> data_type . ID EQUALS expression
    (66) declaration -> data_type . ID

    ID              shift and go to state 81


state 38

    (59) assignment -> ID . EQUALS expression
    (62) assignment -> ID . EQUALS ID
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (76) factor -> ID .
    (95) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> ID . LSQBRACKET ID RSQBRACKET

    EQUALS          shift and go to state 82
    DOT             shift and go to state 83
    TIMES           reduce using rule 76 (factor -> ID .)
    DIVIDE          reduce using rule 76 (factor -> ID .)
    PLUS            reduce using rule 76 (factor -> ID .)
    MINUS           reduce using rule 76 (factor -> ID .)
    SEMICOLON       reduce using rule 76 (factor -> ID .)
    LSQBRACKET      shift and go to state 84


state 39

    (74) factor -> LPAREN . expression RPAREN
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (67) expression -> . expression PLUS term
    (68) expression -> . expression MINUS term
    (69) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . factor
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 86
    CLASSOBJECT     shift and go to state 87
    LPAREN          shift and go to state 39
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71

    expression                     shift and go to state 85
    object_access                  shift and go to state 41
    term                           shift and go to state 42
    factor                         shift and go to state 50
    type                           shift and go to state 47
    index                          shift and go to state 66

state 40

    (61) assignment -> CLASSOBJECT . ID
    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID
    (58) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    ID              shift and go to state 88
    DOT             shift and go to state 89
    LSQBRACKET      shift and go to state 90


state 41

    (31) expression -> object_access . LPAREN expression RPAREN
    (32) expression -> object_access . LPAREN RPAREN
    (75) factor -> object_access .

    LPAREN          shift and go to state 91
    TIMES           reduce using rule 75 (factor -> object_access .)
    DIVIDE          reduce using rule 75 (factor -> object_access .)
    PLUS            reduce using rule 75 (factor -> object_access .)
    MINUS           reduce using rule 75 (factor -> object_access .)
    SEMICOLON       reduce using rule 75 (factor -> object_access .)
    RPAREN          reduce using rule 75 (factor -> object_access .)


state 42

    (69) expression -> term .
    (70) term -> term . TIMES factor
    (71) term -> term . DIVIDE factor

    PLUS            reduce using rule 69 (expression -> term .)
    MINUS           reduce using rule 69 (expression -> term .)
    SEMICOLON       reduce using rule 69 (expression -> term .)
    RPAREN          reduce using rule 69 (expression -> term .)
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93


state 43

    (37) if -> IF . LPAREN logical_expression RPAREN block
    (38) if -> IF . LPAREN logical_expression RPAREN block elseif
    (39) if -> IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 94


state 44

    (44) loop -> while_loop .

    SEMICOLON       reduce using rule 44 (loop -> while_loop .)


state 45

    (45) loop -> loop_for .

    SEMICOLON       reduce using rule 45 (loop -> loop_for .)


state 46

    (27) return -> RETURN . ID
    (28) return -> RETURN . type
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE

    ID              shift and go to state 95
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71

    type                           shift and go to state 96

state 47

    (73) factor -> type .

    TIMES           reduce using rule 73 (factor -> type .)
    DIVIDE          reduce using rule 73 (factor -> type .)
    PLUS            reduce using rule 73 (factor -> type .)
    MINUS           reduce using rule 73 (factor -> type .)
    SEMICOLON       reduce using rule 73 (factor -> type .)
    RPAREN          reduce using rule 73 (factor -> type .)


state 48

    (82) data_type -> primitive .
    (57) data_structure_array -> primitive . LSQBRACKET RSQBRACKET

    ID              reduce using rule 82 (data_type -> primitive .)
    GREATER_THAN    reduce using rule 82 (data_type -> primitive .)
    LSQBRACKET      shift and go to state 97


state 49

    (83) data_type -> data_structure .

    ID              reduce using rule 83 (data_type -> data_structure .)
    GREATER_THAN    reduce using rule 83 (data_type -> data_structure .)


state 50

    (72) term -> factor .

    TIMES           reduce using rule 72 (term -> factor .)
    DIVIDE          reduce using rule 72 (term -> factor .)
    PLUS            reduce using rule 72 (term -> factor .)
    MINUS           reduce using rule 72 (term -> factor .)
    SEMICOLON       reduce using rule 72 (term -> factor .)
    RPAREN          reduce using rule 72 (term -> factor .)


state 51

    (47) while_loop -> WHILE . LPAREN logical_expression RPAREN block

    LPAREN          shift and go to state 98


state 52

    (46) loop_for -> FOR . LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block

    LPAREN          shift and go to state 99


state 53

    (84) primitive -> INT .

    LSQBRACKET      reduce using rule 84 (primitive -> INT .)
    ID              reduce using rule 84 (primitive -> INT .)
    GREATER_THAN    reduce using rule 84 (primitive -> INT .)


state 54

    (85) primitive -> FLOAT .

    LSQBRACKET      reduce using rule 85 (primitive -> FLOAT .)
    ID              reduce using rule 85 (primitive -> FLOAT .)
    GREATER_THAN    reduce using rule 85 (primitive -> FLOAT .)


state 55

    (86) primitive -> BOOL .

    LSQBRACKET      reduce using rule 86 (primitive -> BOOL .)
    ID              reduce using rule 86 (primitive -> BOOL .)
    GREATER_THAN    reduce using rule 86 (primitive -> BOOL .)


state 56

    (87) primitive -> BYTE .

    LSQBRACKET      reduce using rule 87 (primitive -> BYTE .)
    ID              reduce using rule 87 (primitive -> BYTE .)
    GREATER_THAN    reduce using rule 87 (primitive -> BYTE .)


state 57

    (88) primitive -> CHAR .

    LSQBRACKET      reduce using rule 88 (primitive -> CHAR .)
    ID              reduce using rule 88 (primitive -> CHAR .)
    GREATER_THAN    reduce using rule 88 (primitive -> CHAR .)


state 58

    (89) primitive -> SBYTE .

    LSQBRACKET      reduce using rule 89 (primitive -> SBYTE .)
    ID              reduce using rule 89 (primitive -> SBYTE .)
    GREATER_THAN    reduce using rule 89 (primitive -> SBYTE .)


state 59

    (90) primitive -> DECIMAL .

    LSQBRACKET      reduce using rule 90 (primitive -> DECIMAL .)
    ID              reduce using rule 90 (primitive -> DECIMAL .)
    GREATER_THAN    reduce using rule 90 (primitive -> DECIMAL .)


state 60

    (91) primitive -> DOUBLE .

    LSQBRACKET      reduce using rule 91 (primitive -> DOUBLE .)
    ID              reduce using rule 91 (primitive -> DOUBLE .)
    GREATER_THAN    reduce using rule 91 (primitive -> DOUBLE .)


state 61

    (92) primitive -> LONG .

    LSQBRACKET      reduce using rule 92 (primitive -> LONG .)
    ID              reduce using rule 92 (primitive -> LONG .)
    GREATER_THAN    reduce using rule 92 (primitive -> LONG .)


state 62

    (93) primitive -> SHORT .

    LSQBRACKET      reduce using rule 93 (primitive -> SHORT .)
    ID              reduce using rule 93 (primitive -> SHORT .)
    GREATER_THAN    reduce using rule 93 (primitive -> SHORT .)


state 63

    (94) primitive -> UINT .

    LSQBRACKET      reduce using rule 94 (primitive -> UINT .)
    ID              reduce using rule 94 (primitive -> UINT .)
    GREATER_THAN    reduce using rule 94 (primitive -> UINT .)


state 64

    (54) data_structure -> data_structure_list .

    ID              reduce using rule 54 (data_structure -> data_structure_list .)
    GREATER_THAN    reduce using rule 54 (data_structure -> data_structure_list .)


state 65

    (55) data_structure -> data_structure_array .

    ID              reduce using rule 55 (data_structure -> data_structure_array .)
    GREATER_THAN    reduce using rule 55 (data_structure -> data_structure_array .)


state 66

    (77) factor -> index .

    TIMES           reduce using rule 77 (factor -> index .)
    DIVIDE          reduce using rule 77 (factor -> index .)
    PLUS            reduce using rule 77 (factor -> index .)
    MINUS           reduce using rule 77 (factor -> index .)
    SEMICOLON       reduce using rule 77 (factor -> index .)
    RPAREN          reduce using rule 77 (factor -> index .)


state 67

    (56) data_structure_list -> LIST . LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET

    LESS_THAN       shift and go to state 100


state 68

    (33) type -> FLOAT_TYPE .

    TIMES           reduce using rule 33 (type -> FLOAT_TYPE .)
    DIVIDE          reduce using rule 33 (type -> FLOAT_TYPE .)
    PLUS            reduce using rule 33 (type -> FLOAT_TYPE .)
    MINUS           reduce using rule 33 (type -> FLOAT_TYPE .)
    SEMICOLON       reduce using rule 33 (type -> FLOAT_TYPE .)
    RPAREN          reduce using rule 33 (type -> FLOAT_TYPE .)
    RSQBRACKET      reduce using rule 33 (type -> FLOAT_TYPE .)


state 69

    (34) type -> DOUBLE_TYPE .

    TIMES           reduce using rule 34 (type -> DOUBLE_TYPE .)
    DIVIDE          reduce using rule 34 (type -> DOUBLE_TYPE .)
    PLUS            reduce using rule 34 (type -> DOUBLE_TYPE .)
    MINUS           reduce using rule 34 (type -> DOUBLE_TYPE .)
    SEMICOLON       reduce using rule 34 (type -> DOUBLE_TYPE .)
    RPAREN          reduce using rule 34 (type -> DOUBLE_TYPE .)
    RSQBRACKET      reduce using rule 34 (type -> DOUBLE_TYPE .)


state 70

    (35) type -> DECIMAL_TYPE .

    TIMES           reduce using rule 35 (type -> DECIMAL_TYPE .)
    DIVIDE          reduce using rule 35 (type -> DECIMAL_TYPE .)
    PLUS            reduce using rule 35 (type -> DECIMAL_TYPE .)
    MINUS           reduce using rule 35 (type -> DECIMAL_TYPE .)
    SEMICOLON       reduce using rule 35 (type -> DECIMAL_TYPE .)
    RPAREN          reduce using rule 35 (type -> DECIMAL_TYPE .)
    RSQBRACKET      reduce using rule 35 (type -> DECIMAL_TYPE .)


state 71

    (36) type -> INTEGER_TYPE .

    TIMES           reduce using rule 36 (type -> INTEGER_TYPE .)
    DIVIDE          reduce using rule 36 (type -> INTEGER_TYPE .)
    PLUS            reduce using rule 36 (type -> INTEGER_TYPE .)
    MINUS           reduce using rule 36 (type -> INTEGER_TYPE .)
    SEMICOLON       reduce using rule 36 (type -> INTEGER_TYPE .)
    RPAREN          reduce using rule 36 (type -> INTEGER_TYPE .)
    RSQBRACKET      reduce using rule 36 (type -> INTEGER_TYPE .)


state 72

    (8) class -> modifier STATIC CLASS CLASSOBJECT block .

    $end            reduce using rule 8 (class -> modifier STATIC CLASS CLASSOBJECT block .)


state 73

    (13) block -> LBRACKET body RBRACKET .

    $end            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    ELSE            reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    SEMICOLON       reduce using rule 13 (block -> LBRACKET body RBRACKET .)
    RBRACKET        reduce using rule 13 (block -> LBRACKET body RBRACKET .)


state 74

    (14) body -> lines SEMICOLON .
    (15) body -> lines SEMICOLON . body
    (14) body -> . lines SEMICOLON
    (15) body -> . lines SEMICOLON body
    (16) body -> . function
    (17) lines -> . assignment
    (18) lines -> . expression
    (19) lines -> . declaration
    (20) lines -> . if
    (21) lines -> . loop
    (22) lines -> . return
    (23) function -> . modifier data_type ID LPAREN declarations RPAREN block
    (24) function -> . modifier VOID ID LPAREN declarations RPAREN block
    (25) function -> . modifier STATIC data_type ID LPAREN declarations RPAREN block
    (26) function -> . modifier STATIC VOID ID LPAREN declarations RPAREN block
    (59) assignment -> . ID EQUALS expression
    (60) assignment -> . data_type ID EQUALS expression
    (61) assignment -> . CLASSOBJECT ID
    (62) assignment -> . ID EQUALS ID
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (67) expression -> . expression PLUS term
    (68) expression -> . expression MINUS term
    (69) expression -> . term
    (66) declaration -> . data_type ID
    (37) if -> . IF LPAREN logical_expression RPAREN block
    (38) if -> . IF LPAREN logical_expression RPAREN block elseif
    (39) if -> . IF LPAREN logical_expression RPAREN block else
    (44) loop -> . while_loop
    (45) loop -> . loop_for
    (27) return -> . RETURN ID
    (28) return -> . RETURN type
    (78) modifier -> . PUBLIC
    (79) modifier -> . PRIVATE
    (80) modifier -> . PROTECTED
    (81) modifier -> . INTERNAL
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . factor
    (47) while_loop -> . WHILE LPAREN logical_expression RPAREN block
    (46) loop_for -> . FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    RBRACKET        reduce using rule 14 (body -> lines SEMICOLON .)
    ID              shift and go to state 38
    CLASSOBJECT     shift and go to state 40
    IF              shift and go to state 43
    RETURN          shift and go to state 46
    PUBLIC          shift and go to state 10
    PRIVATE         shift and go to state 11
    PROTECTED       shift and go to state 12
    INTERNAL        shift and go to state 13
    WHILE           shift and go to state 51
    FOR             shift and go to state 52
    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LPAREN          shift and go to state 39
    LIST            shift and go to state 67
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71

    lines                          shift and go to state 28
    body                           shift and go to state 101
    function                       shift and go to state 29
    assignment                     shift and go to state 30
    expression                     shift and go to state 31
    declaration                    shift and go to state 32
    if                             shift and go to state 33
    loop                           shift and go to state 34
    return                         shift and go to state 35
    modifier                       shift and go to state 36
    data_type                      shift and go to state 37
    object_access                  shift and go to state 41
    term                           shift and go to state 42
    while_loop                     shift and go to state 44
    loop_for                       shift and go to state 45
    type                           shift and go to state 47
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    factor                         shift and go to state 50
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65
    index                          shift and go to state 66

state 75

    (67) expression -> expression PLUS . term
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . factor
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 104
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71
    CLASSOBJECT     shift and go to state 87

    term                           shift and go to state 102
    factor                         shift and go to state 50
    type                           shift and go to state 47
    object_access                  shift and go to state 103
    index                          shift and go to state 66

state 76

    (68) expression -> expression MINUS . term
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . factor
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 104
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71
    CLASSOBJECT     shift and go to state 87

    term                           shift and go to state 105
    factor                         shift and go to state 50
    type                           shift and go to state 47
    object_access                  shift and go to state 103
    index                          shift and go to state 66

state 77

    (23) function -> modifier data_type . ID LPAREN declarations RPAREN block

    ID              shift and go to state 106


state 78

    (24) function -> modifier VOID . ID LPAREN declarations RPAREN block

    ID              shift and go to state 107


state 79

    (25) function -> modifier STATIC . data_type ID LPAREN declarations RPAREN block
    (26) function -> modifier STATIC . VOID ID LPAREN declarations RPAREN block
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    VOID            shift and go to state 109
    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67
    CLASSOBJECT     shift and go to state 80

    data_type                      shift and go to state 108
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 80

    (58) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    LSQBRACKET      shift and go to state 90


state 81

    (60) assignment -> data_type ID . EQUALS expression
    (66) declaration -> data_type ID .

    EQUALS          shift and go to state 110
    SEMICOLON       reduce using rule 66 (declaration -> data_type ID .)


state 82

    (59) assignment -> ID EQUALS . expression
    (62) assignment -> ID EQUALS . ID
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (67) expression -> . expression PLUS term
    (68) expression -> . expression MINUS term
    (69) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . factor
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 111
    CLASSOBJECT     shift and go to state 87
    LPAREN          shift and go to state 39
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71

    expression                     shift and go to state 112
    object_access                  shift and go to state 41
    term                           shift and go to state 42
    factor                         shift and go to state 50
    type                           shift and go to state 47
    index                          shift and go to state 66

state 83

    (9) object_access -> ID DOT . ID
    (11) object_access -> ID DOT . CLASSOBJECT

    ID              shift and go to state 113
    CLASSOBJECT     shift and go to state 114


state 84

    (95) index -> ID LSQBRACKET . INTEGER_TYPE RSQBRACKET
    (96) index -> ID LSQBRACKET . ID RSQBRACKET

    INTEGER_TYPE    shift and go to state 116
    ID              shift and go to state 115


state 85

    (74) factor -> LPAREN expression . RPAREN
    (67) expression -> expression . PLUS term
    (68) expression -> expression . MINUS term

    RPAREN          shift and go to state 117
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 86

    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (76) factor -> ID .
    (95) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> ID . LSQBRACKET ID RSQBRACKET

    DOT             shift and go to state 83
    TIMES           reduce using rule 76 (factor -> ID .)
    DIVIDE          reduce using rule 76 (factor -> ID .)
    RPAREN          reduce using rule 76 (factor -> ID .)
    PLUS            reduce using rule 76 (factor -> ID .)
    MINUS           reduce using rule 76 (factor -> ID .)
    SEMICOLON       reduce using rule 76 (factor -> ID .)
    LSQBRACKET      shift and go to state 84


state 87

    (10) object_access -> CLASSOBJECT . DOT CLASSOBJECT
    (12) object_access -> CLASSOBJECT . DOT ID

    DOT             shift and go to state 89


state 88

    (61) assignment -> CLASSOBJECT ID .

    SEMICOLON       reduce using rule 61 (assignment -> CLASSOBJECT ID .)
    RPAREN          reduce using rule 61 (assignment -> CLASSOBJECT ID .)


state 89

    (10) object_access -> CLASSOBJECT DOT . CLASSOBJECT
    (12) object_access -> CLASSOBJECT DOT . ID

    CLASSOBJECT     shift and go to state 118
    ID              shift and go to state 119


state 90

    (58) data_structure_array -> CLASSOBJECT LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 120


state 91

    (31) expression -> object_access LPAREN . expression RPAREN
    (32) expression -> object_access LPAREN . RPAREN
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (67) expression -> . expression PLUS term
    (68) expression -> . expression MINUS term
    (69) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . factor
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    RPAREN          shift and go to state 122
    ID              shift and go to state 86
    CLASSOBJECT     shift and go to state 87
    LPAREN          shift and go to state 39
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71

    object_access                  shift and go to state 41
    expression                     shift and go to state 121
    term                           shift and go to state 42
    factor                         shift and go to state 50
    type                           shift and go to state 47
    index                          shift and go to state 66

state 92

    (70) term -> term TIMES . factor
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 104
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71
    CLASSOBJECT     shift and go to state 87

    factor                         shift and go to state 123
    type                           shift and go to state 47
    object_access                  shift and go to state 103
    index                          shift and go to state 66

state 93

    (71) term -> term DIVIDE . factor
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    LPAREN          shift and go to state 39
    ID              shift and go to state 104
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71
    CLASSOBJECT     shift and go to state 87

    factor                         shift and go to state 124
    type                           shift and go to state 47
    object_access                  shift and go to state 103
    index                          shift and go to state 66

state 94

    (37) if -> IF LPAREN . logical_expression RPAREN block
    (38) if -> IF LPAREN . logical_expression RPAREN block elseif
    (39) if -> IF LPAREN . logical_expression RPAREN block else
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . logical_expression

    TRUE            shift and go to state 127
    FALSE           shift and go to state 128
    ID              shift and go to state 129

    logical_expression             shift and go to state 125
    logical_factor                 shift and go to state 126

state 95

    (27) return -> RETURN ID .

    SEMICOLON       reduce using rule 27 (return -> RETURN ID .)


state 96

    (28) return -> RETURN type .

    SEMICOLON       reduce using rule 28 (return -> RETURN type .)


state 97

    (57) data_structure_array -> primitive LSQBRACKET . RSQBRACKET

    RSQBRACKET      shift and go to state 130


state 98

    (47) while_loop -> WHILE LPAREN . logical_expression RPAREN block
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . logical_expression

    TRUE            shift and go to state 127
    FALSE           shift and go to state 128
    ID              shift and go to state 129

    logical_expression             shift and go to state 131
    logical_factor                 shift and go to state 126

state 99

    (46) loop_for -> FOR LPAREN . assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block
    (59) assignment -> . ID EQUALS expression
    (60) assignment -> . data_type ID EQUALS expression
    (61) assignment -> . CLASSOBJECT ID
    (62) assignment -> . ID EQUALS ID
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 133
    CLASSOBJECT     shift and go to state 135
    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67

    assignment                     shift and go to state 132
    data_type                      shift and go to state 134
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 100

    (56) data_structure_list -> LIST LESS_THAN . data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67
    CLASSOBJECT     shift and go to state 80

    data_type                      shift and go to state 136
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 101

    (15) body -> lines SEMICOLON body .

    RBRACKET        reduce using rule 15 (body -> lines SEMICOLON body .)


state 102

    (67) expression -> expression PLUS term .
    (70) term -> term . TIMES factor
    (71) term -> term . DIVIDE factor

    PLUS            reduce using rule 67 (expression -> expression PLUS term .)
    MINUS           reduce using rule 67 (expression -> expression PLUS term .)
    SEMICOLON       reduce using rule 67 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 67 (expression -> expression PLUS term .)
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93


state 103

    (75) factor -> object_access .

    TIMES           reduce using rule 75 (factor -> object_access .)
    DIVIDE          reduce using rule 75 (factor -> object_access .)
    PLUS            reduce using rule 75 (factor -> object_access .)
    MINUS           reduce using rule 75 (factor -> object_access .)
    SEMICOLON       reduce using rule 75 (factor -> object_access .)
    RPAREN          reduce using rule 75 (factor -> object_access .)


state 104

    (76) factor -> ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (95) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> ID . LSQBRACKET ID RSQBRACKET

    TIMES           reduce using rule 76 (factor -> ID .)
    DIVIDE          reduce using rule 76 (factor -> ID .)
    PLUS            reduce using rule 76 (factor -> ID .)
    MINUS           reduce using rule 76 (factor -> ID .)
    SEMICOLON       reduce using rule 76 (factor -> ID .)
    RPAREN          reduce using rule 76 (factor -> ID .)
    DOT             shift and go to state 83
    LSQBRACKET      shift and go to state 84


state 105

    (68) expression -> expression MINUS term .
    (70) term -> term . TIMES factor
    (71) term -> term . DIVIDE factor

    PLUS            reduce using rule 68 (expression -> expression MINUS term .)
    MINUS           reduce using rule 68 (expression -> expression MINUS term .)
    SEMICOLON       reduce using rule 68 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 68 (expression -> expression MINUS term .)
    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93


state 106

    (23) function -> modifier data_type ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 137


state 107

    (24) function -> modifier VOID ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 138


state 108

    (25) function -> modifier STATIC data_type . ID LPAREN declarations RPAREN block

    ID              shift and go to state 139


state 109

    (26) function -> modifier STATIC VOID . ID LPAREN declarations RPAREN block

    ID              shift and go to state 140


state 110

    (60) assignment -> data_type ID EQUALS . expression
    (31) expression -> . object_access LPAREN expression RPAREN
    (32) expression -> . object_access LPAREN RPAREN
    (67) expression -> . expression PLUS term
    (68) expression -> . expression MINUS term
    (69) expression -> . term
    (9) object_access -> . ID DOT ID
    (10) object_access -> . CLASSOBJECT DOT CLASSOBJECT
    (11) object_access -> . ID DOT CLASSOBJECT
    (12) object_access -> . CLASSOBJECT DOT ID
    (70) term -> . term TIMES factor
    (71) term -> . term DIVIDE factor
    (72) term -> . factor
    (73) factor -> . type
    (74) factor -> . LPAREN expression RPAREN
    (75) factor -> . object_access
    (76) factor -> . ID
    (77) factor -> . index
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE
    (95) index -> . ID LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> . ID LSQBRACKET ID RSQBRACKET

    ID              shift and go to state 86
    CLASSOBJECT     shift and go to state 87
    LPAREN          shift and go to state 39
    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71

    expression                     shift and go to state 141
    object_access                  shift and go to state 41
    term                           shift and go to state 42
    factor                         shift and go to state 50
    type                           shift and go to state 47
    index                          shift and go to state 66

state 111

    (62) assignment -> ID EQUALS ID .
    (9) object_access -> ID . DOT ID
    (11) object_access -> ID . DOT CLASSOBJECT
    (76) factor -> ID .
    (95) index -> ID . LSQBRACKET INTEGER_TYPE RSQBRACKET
    (96) index -> ID . LSQBRACKET ID RSQBRACKET

  ! reduce/reduce conflict for SEMICOLON resolved using rule 62 (assignment -> ID EQUALS ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 62 (assignment -> ID EQUALS ID .)
    SEMICOLON       reduce using rule 62 (assignment -> ID EQUALS ID .)
    RPAREN          reduce using rule 62 (assignment -> ID EQUALS ID .)
    DOT             shift and go to state 83
    TIMES           reduce using rule 76 (factor -> ID .)
    DIVIDE          reduce using rule 76 (factor -> ID .)
    PLUS            reduce using rule 76 (factor -> ID .)
    MINUS           reduce using rule 76 (factor -> ID .)
    LSQBRACKET      shift and go to state 84

  ! SEMICOLON       [ reduce using rule 76 (factor -> ID .) ]
  ! RPAREN          [ reduce using rule 76 (factor -> ID .) ]


state 112

    (59) assignment -> ID EQUALS expression .
    (67) expression -> expression . PLUS term
    (68) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 59 (assignment -> ID EQUALS expression .)
    RPAREN          reduce using rule 59 (assignment -> ID EQUALS expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 113

    (9) object_access -> ID DOT ID .

    LPAREN          reduce using rule 9 (object_access -> ID DOT ID .)
    TIMES           reduce using rule 9 (object_access -> ID DOT ID .)
    DIVIDE          reduce using rule 9 (object_access -> ID DOT ID .)
    PLUS            reduce using rule 9 (object_access -> ID DOT ID .)
    MINUS           reduce using rule 9 (object_access -> ID DOT ID .)
    SEMICOLON       reduce using rule 9 (object_access -> ID DOT ID .)
    RPAREN          reduce using rule 9 (object_access -> ID DOT ID .)


state 114

    (11) object_access -> ID DOT CLASSOBJECT .

    LPAREN          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    TIMES           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    DIVIDE          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    PLUS            reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    MINUS           reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)
    RPAREN          reduce using rule 11 (object_access -> ID DOT CLASSOBJECT .)


state 115

    (96) index -> ID LSQBRACKET ID . RSQBRACKET

    RSQBRACKET      shift and go to state 142


state 116

    (95) index -> ID LSQBRACKET INTEGER_TYPE . RSQBRACKET

    RSQBRACKET      shift and go to state 143


state 117

    (74) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 74 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 74 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 74 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 74 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 74 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 74 (factor -> LPAREN expression RPAREN .)


state 118

    (10) object_access -> CLASSOBJECT DOT CLASSOBJECT .

    LPAREN          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    TIMES           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    DIVIDE          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    PLUS            reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    MINUS           reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    SEMICOLON       reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)
    RPAREN          reduce using rule 10 (object_access -> CLASSOBJECT DOT CLASSOBJECT .)


state 119

    (12) object_access -> CLASSOBJECT DOT ID .

    LPAREN          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    TIMES           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    DIVIDE          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    PLUS            reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    MINUS           reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    SEMICOLON       reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)
    RPAREN          reduce using rule 12 (object_access -> CLASSOBJECT DOT ID .)


state 120

    (58) data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .

    ID              reduce using rule 58 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)
    GREATER_THAN    reduce using rule 58 (data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET .)


state 121

    (31) expression -> object_access LPAREN expression . RPAREN
    (67) expression -> expression . PLUS term
    (68) expression -> expression . MINUS term

    RPAREN          shift and go to state 144
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 122

    (32) expression -> object_access LPAREN RPAREN .

    PLUS            reduce using rule 32 (expression -> object_access LPAREN RPAREN .)
    MINUS           reduce using rule 32 (expression -> object_access LPAREN RPAREN .)
    SEMICOLON       reduce using rule 32 (expression -> object_access LPAREN RPAREN .)
    RPAREN          reduce using rule 32 (expression -> object_access LPAREN RPAREN .)


state 123

    (70) term -> term TIMES factor .

    TIMES           reduce using rule 70 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 70 (term -> term TIMES factor .)
    PLUS            reduce using rule 70 (term -> term TIMES factor .)
    MINUS           reduce using rule 70 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 70 (term -> term TIMES factor .)
    RPAREN          reduce using rule 70 (term -> term TIMES factor .)


state 124

    (71) term -> term DIVIDE factor .

    TIMES           reduce using rule 71 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 71 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 71 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 71 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 71 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 71 (term -> term DIVIDE factor .)


state 125

    (37) if -> IF LPAREN logical_expression . RPAREN block
    (38) if -> IF LPAREN logical_expression . RPAREN block elseif
    (39) if -> IF LPAREN logical_expression . RPAREN block else
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (53) logical_factor -> logical_expression .
    (97) logical_operator -> . OR
    (98) logical_operator -> . AND
    (99) logical_operator -> . NOT
    (100) logical_operator -> . GREATER_THAN
    (101) logical_operator -> . LESS_THAN
    (102) logical_operator -> . GREATER_EQUALS_THAN
    (103) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 145
    OR              shift and go to state 147
    AND             shift and go to state 148
    NOT             shift and go to state 149
    GREATER_THAN    shift and go to state 150
    LESS_THAN       shift and go to state 151
    GREATER_EQUALS_THAN shift and go to state 152
    LESS_EQUALS_THAN shift and go to state 153

  ! RPAREN          [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 146

state 126

    (49) logical_expression -> logical_factor .

    RPAREN          reduce using rule 49 (logical_expression -> logical_factor .)
    OR              reduce using rule 49 (logical_expression -> logical_factor .)
    AND             reduce using rule 49 (logical_expression -> logical_factor .)
    NOT             reduce using rule 49 (logical_expression -> logical_factor .)
    GREATER_THAN    reduce using rule 49 (logical_expression -> logical_factor .)
    LESS_THAN       reduce using rule 49 (logical_expression -> logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 49 (logical_expression -> logical_factor .)
    LESS_EQUALS_THAN reduce using rule 49 (logical_expression -> logical_factor .)
    SEMICOLON       reduce using rule 49 (logical_expression -> logical_factor .)


state 127

    (50) logical_factor -> TRUE .

    RPAREN          reduce using rule 50 (logical_factor -> TRUE .)
    OR              reduce using rule 50 (logical_factor -> TRUE .)
    AND             reduce using rule 50 (logical_factor -> TRUE .)
    NOT             reduce using rule 50 (logical_factor -> TRUE .)
    GREATER_THAN    reduce using rule 50 (logical_factor -> TRUE .)
    LESS_THAN       reduce using rule 50 (logical_factor -> TRUE .)
    GREATER_EQUALS_THAN reduce using rule 50 (logical_factor -> TRUE .)
    LESS_EQUALS_THAN reduce using rule 50 (logical_factor -> TRUE .)
    SEMICOLON       reduce using rule 50 (logical_factor -> TRUE .)


state 128

    (51) logical_factor -> FALSE .

    RPAREN          reduce using rule 51 (logical_factor -> FALSE .)
    OR              reduce using rule 51 (logical_factor -> FALSE .)
    AND             reduce using rule 51 (logical_factor -> FALSE .)
    NOT             reduce using rule 51 (logical_factor -> FALSE .)
    GREATER_THAN    reduce using rule 51 (logical_factor -> FALSE .)
    LESS_THAN       reduce using rule 51 (logical_factor -> FALSE .)
    GREATER_EQUALS_THAN reduce using rule 51 (logical_factor -> FALSE .)
    LESS_EQUALS_THAN reduce using rule 51 (logical_factor -> FALSE .)
    SEMICOLON       reduce using rule 51 (logical_factor -> FALSE .)


state 129

    (52) logical_factor -> ID .

    RPAREN          reduce using rule 52 (logical_factor -> ID .)
    OR              reduce using rule 52 (logical_factor -> ID .)
    AND             reduce using rule 52 (logical_factor -> ID .)
    NOT             reduce using rule 52 (logical_factor -> ID .)
    GREATER_THAN    reduce using rule 52 (logical_factor -> ID .)
    LESS_THAN       reduce using rule 52 (logical_factor -> ID .)
    GREATER_EQUALS_THAN reduce using rule 52 (logical_factor -> ID .)
    LESS_EQUALS_THAN reduce using rule 52 (logical_factor -> ID .)
    SEMICOLON       reduce using rule 52 (logical_factor -> ID .)


state 130

    (57) data_structure_array -> primitive LSQBRACKET RSQBRACKET .

    ID              reduce using rule 57 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)
    GREATER_THAN    reduce using rule 57 (data_structure_array -> primitive LSQBRACKET RSQBRACKET .)


state 131

    (47) while_loop -> WHILE LPAREN logical_expression . RPAREN block
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (53) logical_factor -> logical_expression .
    (97) logical_operator -> . OR
    (98) logical_operator -> . AND
    (99) logical_operator -> . NOT
    (100) logical_operator -> . GREATER_THAN
    (101) logical_operator -> . LESS_THAN
    (102) logical_operator -> . GREATER_EQUALS_THAN
    (103) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 154
    OR              shift and go to state 147
    AND             shift and go to state 148
    NOT             shift and go to state 149
    GREATER_THAN    shift and go to state 150
    LESS_THAN       shift and go to state 151
    GREATER_EQUALS_THAN shift and go to state 152
    LESS_EQUALS_THAN shift and go to state 153

  ! RPAREN          [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 146

state 132

    (46) loop_for -> FOR LPAREN assignment . SEMICOLON logical_expression SEMICOLON assignment RPAREN block

    SEMICOLON       shift and go to state 155


state 133

    (59) assignment -> ID . EQUALS expression
    (62) assignment -> ID . EQUALS ID

    EQUALS          shift and go to state 82


state 134

    (60) assignment -> data_type . ID EQUALS expression

    ID              shift and go to state 156


state 135

    (61) assignment -> CLASSOBJECT . ID
    (58) data_structure_array -> CLASSOBJECT . LSQBRACKET RSQBRACKET

    ID              shift and go to state 88
    LSQBRACKET      shift and go to state 90


state 136

    (56) data_structure_list -> LIST LESS_THAN data_type . GREATER_THAN ID LSQBRACKET type RSQBRACKET

    GREATER_THAN    shift and go to state 157


state 137

    (23) function -> modifier data_type ID LPAREN . declarations RPAREN block
    (63) declarations -> . declaration
    (64) declarations -> . declaration COMMA
    (65) declarations -> . declaration COMMA declarations
    (66) declaration -> . data_type ID
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67
    CLASSOBJECT     shift and go to state 80

    data_type                      shift and go to state 158
    declarations                   shift and go to state 159
    declaration                    shift and go to state 160
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 138

    (24) function -> modifier VOID ID LPAREN . declarations RPAREN block
    (63) declarations -> . declaration
    (64) declarations -> . declaration COMMA
    (65) declarations -> . declaration COMMA declarations
    (66) declaration -> . data_type ID
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67
    CLASSOBJECT     shift and go to state 80

    declarations                   shift and go to state 161
    declaration                    shift and go to state 160
    data_type                      shift and go to state 158
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 139

    (25) function -> modifier STATIC data_type ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 162


state 140

    (26) function -> modifier STATIC VOID ID . LPAREN declarations RPAREN block

    LPAREN          shift and go to state 163


state 141

    (60) assignment -> data_type ID EQUALS expression .
    (67) expression -> expression . PLUS term
    (68) expression -> expression . MINUS term

    SEMICOLON       reduce using rule 60 (assignment -> data_type ID EQUALS expression .)
    RPAREN          reduce using rule 60 (assignment -> data_type ID EQUALS expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76


state 142

    (96) index -> ID LSQBRACKET ID RSQBRACKET .

    TIMES           reduce using rule 96 (index -> ID LSQBRACKET ID RSQBRACKET .)
    DIVIDE          reduce using rule 96 (index -> ID LSQBRACKET ID RSQBRACKET .)
    PLUS            reduce using rule 96 (index -> ID LSQBRACKET ID RSQBRACKET .)
    MINUS           reduce using rule 96 (index -> ID LSQBRACKET ID RSQBRACKET .)
    SEMICOLON       reduce using rule 96 (index -> ID LSQBRACKET ID RSQBRACKET .)
    RPAREN          reduce using rule 96 (index -> ID LSQBRACKET ID RSQBRACKET .)


state 143

    (95) index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .

    TIMES           reduce using rule 95 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    DIVIDE          reduce using rule 95 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    PLUS            reduce using rule 95 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    MINUS           reduce using rule 95 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    SEMICOLON       reduce using rule 95 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)
    RPAREN          reduce using rule 95 (index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET .)


state 144

    (31) expression -> object_access LPAREN expression RPAREN .

    PLUS            reduce using rule 31 (expression -> object_access LPAREN expression RPAREN .)
    MINUS           reduce using rule 31 (expression -> object_access LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 31 (expression -> object_access LPAREN expression RPAREN .)
    RPAREN          reduce using rule 31 (expression -> object_access LPAREN expression RPAREN .)


state 145

    (37) if -> IF LPAREN logical_expression RPAREN . block
    (38) if -> IF LPAREN logical_expression RPAREN . block elseif
    (39) if -> IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 164

state 146

    (48) logical_expression -> logical_expression logical_operator . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . logical_expression
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor

    TRUE            shift and go to state 127
    FALSE           shift and go to state 128
    ID              shift and go to state 129

    logical_expression             shift and go to state 165
    logical_factor                 shift and go to state 166

state 147

    (97) logical_operator -> OR .

    TRUE            reduce using rule 97 (logical_operator -> OR .)
    FALSE           reduce using rule 97 (logical_operator -> OR .)
    ID              reduce using rule 97 (logical_operator -> OR .)


state 148

    (98) logical_operator -> AND .

    TRUE            reduce using rule 98 (logical_operator -> AND .)
    FALSE           reduce using rule 98 (logical_operator -> AND .)
    ID              reduce using rule 98 (logical_operator -> AND .)


state 149

    (99) logical_operator -> NOT .

    TRUE            reduce using rule 99 (logical_operator -> NOT .)
    FALSE           reduce using rule 99 (logical_operator -> NOT .)
    ID              reduce using rule 99 (logical_operator -> NOT .)


state 150

    (100) logical_operator -> GREATER_THAN .

    TRUE            reduce using rule 100 (logical_operator -> GREATER_THAN .)
    FALSE           reduce using rule 100 (logical_operator -> GREATER_THAN .)
    ID              reduce using rule 100 (logical_operator -> GREATER_THAN .)


state 151

    (101) logical_operator -> LESS_THAN .

    TRUE            reduce using rule 101 (logical_operator -> LESS_THAN .)
    FALSE           reduce using rule 101 (logical_operator -> LESS_THAN .)
    ID              reduce using rule 101 (logical_operator -> LESS_THAN .)


state 152

    (102) logical_operator -> GREATER_EQUALS_THAN .

    TRUE            reduce using rule 102 (logical_operator -> GREATER_EQUALS_THAN .)
    FALSE           reduce using rule 102 (logical_operator -> GREATER_EQUALS_THAN .)
    ID              reduce using rule 102 (logical_operator -> GREATER_EQUALS_THAN .)


state 153

    (103) logical_operator -> LESS_EQUALS_THAN .

    TRUE            reduce using rule 103 (logical_operator -> LESS_EQUALS_THAN .)
    FALSE           reduce using rule 103 (logical_operator -> LESS_EQUALS_THAN .)
    ID              reduce using rule 103 (logical_operator -> LESS_EQUALS_THAN .)


state 154

    (47) while_loop -> WHILE LPAREN logical_expression RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 167

state 155

    (46) loop_for -> FOR LPAREN assignment SEMICOLON . logical_expression SEMICOLON assignment RPAREN block
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . logical_expression

    TRUE            shift and go to state 127
    FALSE           shift and go to state 128
    ID              shift and go to state 129

    logical_expression             shift and go to state 168
    logical_factor                 shift and go to state 126

state 156

    (60) assignment -> data_type ID . EQUALS expression

    EQUALS          shift and go to state 110


state 157

    (56) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN . ID LSQBRACKET type RSQBRACKET

    ID              shift and go to state 169


state 158

    (66) declaration -> data_type . ID

    ID              shift and go to state 170


state 159

    (23) function -> modifier data_type ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 171


state 160

    (63) declarations -> declaration .
    (64) declarations -> declaration . COMMA
    (65) declarations -> declaration . COMMA declarations

    RPAREN          reduce using rule 63 (declarations -> declaration .)
    COMMA           shift and go to state 172


state 161

    (24) function -> modifier VOID ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 173


state 162

    (25) function -> modifier STATIC data_type ID LPAREN . declarations RPAREN block
    (63) declarations -> . declaration
    (64) declarations -> . declaration COMMA
    (65) declarations -> . declaration COMMA declarations
    (66) declaration -> . data_type ID
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67
    CLASSOBJECT     shift and go to state 80

    data_type                      shift and go to state 158
    declarations                   shift and go to state 174
    declaration                    shift and go to state 160
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 163

    (26) function -> modifier STATIC VOID ID LPAREN . declarations RPAREN block
    (63) declarations -> . declaration
    (64) declarations -> . declaration COMMA
    (65) declarations -> . declaration COMMA declarations
    (66) declaration -> . data_type ID
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67
    CLASSOBJECT     shift and go to state 80

    declarations                   shift and go to state 175
    declaration                    shift and go to state 160
    data_type                      shift and go to state 158
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 164

    (37) if -> IF LPAREN logical_expression RPAREN block .
    (38) if -> IF LPAREN logical_expression RPAREN block . elseif
    (39) if -> IF LPAREN logical_expression RPAREN block . else
    (40) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (41) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (42) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (43) else -> . ELSE block

    SEMICOLON       reduce using rule 37 (if -> IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 178

    elseif                         shift and go to state 176
    else                           shift and go to state 177

state 165

    (53) logical_factor -> logical_expression .
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (97) logical_operator -> . OR
    (98) logical_operator -> . AND
    (99) logical_operator -> . NOT
    (100) logical_operator -> . GREATER_THAN
    (101) logical_operator -> . LESS_THAN
    (102) logical_operator -> . GREATER_EQUALS_THAN
    (103) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          reduce using rule 53 (logical_factor -> logical_expression .)
    SEMICOLON       reduce using rule 53 (logical_factor -> logical_expression .)
    OR              shift and go to state 147
    AND             shift and go to state 148
    NOT             shift and go to state 149
    GREATER_THAN    shift and go to state 150
    LESS_THAN       shift and go to state 151
    GREATER_EQUALS_THAN shift and go to state 152
    LESS_EQUALS_THAN shift and go to state 153

  ! OR              [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 146

state 166

    (48) logical_expression -> logical_expression logical_operator logical_factor .
    (49) logical_expression -> logical_factor .

  ! reduce/reduce conflict for RPAREN resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for OR resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for AND resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for NOT resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for GREATER_THAN resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for LESS_THAN resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for GREATER_EQUALS_THAN resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for LESS_EQUALS_THAN resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    RPAREN          reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    OR              reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    AND             reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    NOT             reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_THAN    reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_THAN       reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    GREATER_EQUALS_THAN reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    LESS_EQUALS_THAN reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)
    SEMICOLON       reduce using rule 48 (logical_expression -> logical_expression logical_operator logical_factor .)

  ! RPAREN          [ reduce using rule 49 (logical_expression -> logical_factor .) ]
  ! OR              [ reduce using rule 49 (logical_expression -> logical_factor .) ]
  ! AND             [ reduce using rule 49 (logical_expression -> logical_factor .) ]
  ! NOT             [ reduce using rule 49 (logical_expression -> logical_factor .) ]
  ! GREATER_THAN    [ reduce using rule 49 (logical_expression -> logical_factor .) ]
  ! LESS_THAN       [ reduce using rule 49 (logical_expression -> logical_factor .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 49 (logical_expression -> logical_factor .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 49 (logical_expression -> logical_factor .) ]
  ! SEMICOLON       [ reduce using rule 49 (logical_expression -> logical_factor .) ]


state 167

    (47) while_loop -> WHILE LPAREN logical_expression RPAREN block .

    SEMICOLON       reduce using rule 47 (while_loop -> WHILE LPAREN logical_expression RPAREN block .)


state 168

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression . SEMICOLON assignment RPAREN block
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (53) logical_factor -> logical_expression .
    (97) logical_operator -> . OR
    (98) logical_operator -> . AND
    (99) logical_operator -> . NOT
    (100) logical_operator -> . GREATER_THAN
    (101) logical_operator -> . LESS_THAN
    (102) logical_operator -> . GREATER_EQUALS_THAN
    (103) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    SEMICOLON       shift and go to state 179
    OR              shift and go to state 147
    AND             shift and go to state 148
    NOT             shift and go to state 149
    GREATER_THAN    shift and go to state 150
    LESS_THAN       shift and go to state 151
    GREATER_EQUALS_THAN shift and go to state 152
    LESS_EQUALS_THAN shift and go to state 153

  ! SEMICOLON       [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 146

state 169

    (56) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID . LSQBRACKET type RSQBRACKET

    LSQBRACKET      shift and go to state 180


state 170

    (66) declaration -> data_type ID .

    COMMA           reduce using rule 66 (declaration -> data_type ID .)
    RPAREN          reduce using rule 66 (declaration -> data_type ID .)


state 171

    (23) function -> modifier data_type ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 181

state 172

    (64) declarations -> declaration COMMA .
    (65) declarations -> declaration COMMA . declarations
    (63) declarations -> . declaration
    (64) declarations -> . declaration COMMA
    (65) declarations -> . declaration COMMA declarations
    (66) declaration -> . data_type ID
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    RPAREN          reduce using rule 64 (declarations -> declaration COMMA .)
    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67
    CLASSOBJECT     shift and go to state 80

    declaration                    shift and go to state 160
    declarations                   shift and go to state 182
    data_type                      shift and go to state 158
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 173

    (24) function -> modifier VOID ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 183

state 174

    (25) function -> modifier STATIC data_type ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 184


state 175

    (26) function -> modifier STATIC VOID ID LPAREN declarations . RPAREN block

    RPAREN          shift and go to state 185


state 176

    (38) if -> IF LPAREN logical_expression RPAREN block elseif .

    SEMICOLON       reduce using rule 38 (if -> IF LPAREN logical_expression RPAREN block elseif .)


state 177

    (39) if -> IF LPAREN logical_expression RPAREN block else .

    SEMICOLON       reduce using rule 39 (if -> IF LPAREN logical_expression RPAREN block else .)


state 178

    (40) elseif -> ELSE . IF LPAREN logical_expression RPAREN block
    (41) elseif -> ELSE . IF LPAREN logical_expression RPAREN block elseif
    (42) elseif -> ELSE . IF LPAREN logical_expression RPAREN block else
    (43) else -> ELSE . block
    (13) block -> . LBRACKET body RBRACKET

    IF              shift and go to state 186
    LBRACKET        shift and go to state 25

    block                          shift and go to state 187

state 179

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON . assignment RPAREN block
    (59) assignment -> . ID EQUALS expression
    (60) assignment -> . data_type ID EQUALS expression
    (61) assignment -> . CLASSOBJECT ID
    (62) assignment -> . ID EQUALS ID
    (82) data_type -> . primitive
    (83) data_type -> . data_structure
    (84) primitive -> . INT
    (85) primitive -> . FLOAT
    (86) primitive -> . BOOL
    (87) primitive -> . BYTE
    (88) primitive -> . CHAR
    (89) primitive -> . SBYTE
    (90) primitive -> . DECIMAL
    (91) primitive -> . DOUBLE
    (92) primitive -> . LONG
    (93) primitive -> . SHORT
    (94) primitive -> . UINT
    (54) data_structure -> . data_structure_list
    (55) data_structure -> . data_structure_array
    (56) data_structure_list -> . LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET
    (57) data_structure_array -> . primitive LSQBRACKET RSQBRACKET
    (58) data_structure_array -> . CLASSOBJECT LSQBRACKET RSQBRACKET

    ID              shift and go to state 133
    CLASSOBJECT     shift and go to state 135
    INT             shift and go to state 53
    FLOAT           shift and go to state 54
    BOOL            shift and go to state 55
    BYTE            shift and go to state 56
    CHAR            shift and go to state 57
    SBYTE           shift and go to state 58
    DECIMAL         shift and go to state 59
    DOUBLE          shift and go to state 60
    LONG            shift and go to state 61
    SHORT           shift and go to state 62
    UINT            shift and go to state 63
    LIST            shift and go to state 67

    assignment                     shift and go to state 188
    data_type                      shift and go to state 134
    primitive                      shift and go to state 48
    data_structure                 shift and go to state 49
    data_structure_list            shift and go to state 64
    data_structure_array           shift and go to state 65

state 180

    (56) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET . type RSQBRACKET
    (33) type -> . FLOAT_TYPE
    (34) type -> . DOUBLE_TYPE
    (35) type -> . DECIMAL_TYPE
    (36) type -> . INTEGER_TYPE

    FLOAT_TYPE      shift and go to state 68
    DOUBLE_TYPE     shift and go to state 69
    DECIMAL_TYPE    shift and go to state 70
    INTEGER_TYPE    shift and go to state 71

    type                           shift and go to state 189

state 181

    (23) function -> modifier data_type ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 23 (function -> modifier data_type ID LPAREN declarations RPAREN block .)


state 182

    (65) declarations -> declaration COMMA declarations .

    RPAREN          reduce using rule 65 (declarations -> declaration COMMA declarations .)


state 183

    (24) function -> modifier VOID ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 24 (function -> modifier VOID ID LPAREN declarations RPAREN block .)


state 184

    (25) function -> modifier STATIC data_type ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 190

state 185

    (26) function -> modifier STATIC VOID ID LPAREN declarations RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 191

state 186

    (40) elseif -> ELSE IF . LPAREN logical_expression RPAREN block
    (41) elseif -> ELSE IF . LPAREN logical_expression RPAREN block elseif
    (42) elseif -> ELSE IF . LPAREN logical_expression RPAREN block else

    LPAREN          shift and go to state 192


state 187

    (43) else -> ELSE block .

    SEMICOLON       reduce using rule 43 (else -> ELSE block .)


state 188

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment . RPAREN block

    RPAREN          shift and go to state 193


state 189

    (56) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type . RSQBRACKET

    RSQBRACKET      shift and go to state 194


state 190

    (25) function -> modifier STATIC data_type ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 25 (function -> modifier STATIC data_type ID LPAREN declarations RPAREN block .)


state 191

    (26) function -> modifier STATIC VOID ID LPAREN declarations RPAREN block .

    RBRACKET        reduce using rule 26 (function -> modifier STATIC VOID ID LPAREN declarations RPAREN block .)


state 192

    (40) elseif -> ELSE IF LPAREN . logical_expression RPAREN block
    (41) elseif -> ELSE IF LPAREN . logical_expression RPAREN block elseif
    (42) elseif -> ELSE IF LPAREN . logical_expression RPAREN block else
    (48) logical_expression -> . logical_expression logical_operator logical_factor
    (49) logical_expression -> . logical_factor
    (50) logical_factor -> . TRUE
    (51) logical_factor -> . FALSE
    (52) logical_factor -> . ID
    (53) logical_factor -> . logical_expression

    TRUE            shift and go to state 127
    FALSE           shift and go to state 128
    ID              shift and go to state 129

    logical_expression             shift and go to state 195
    logical_factor                 shift and go to state 126

state 193

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN . block
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 196

state 194

    (56) data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .

    ID              reduce using rule 56 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)
    GREATER_THAN    reduce using rule 56 (data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET .)


state 195

    (40) elseif -> ELSE IF LPAREN logical_expression . RPAREN block
    (41) elseif -> ELSE IF LPAREN logical_expression . RPAREN block elseif
    (42) elseif -> ELSE IF LPAREN logical_expression . RPAREN block else
    (48) logical_expression -> logical_expression . logical_operator logical_factor
    (53) logical_factor -> logical_expression .
    (97) logical_operator -> . OR
    (98) logical_operator -> . AND
    (99) logical_operator -> . NOT
    (100) logical_operator -> . GREATER_THAN
    (101) logical_operator -> . LESS_THAN
    (102) logical_operator -> . GREATER_EQUALS_THAN
    (103) logical_operator -> . LESS_EQUALS_THAN

  ! shift/reduce conflict for RPAREN resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for GREATER_THAN resolved as shift
  ! shift/reduce conflict for LESS_THAN resolved as shift
  ! shift/reduce conflict for GREATER_EQUALS_THAN resolved as shift
  ! shift/reduce conflict for LESS_EQUALS_THAN resolved as shift
    RPAREN          shift and go to state 197
    OR              shift and go to state 147
    AND             shift and go to state 148
    NOT             shift and go to state 149
    GREATER_THAN    shift and go to state 150
    LESS_THAN       shift and go to state 151
    GREATER_EQUALS_THAN shift and go to state 152
    LESS_EQUALS_THAN shift and go to state 153

  ! RPAREN          [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! OR              [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! AND             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! NOT             [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_THAN    [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_THAN       [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! GREATER_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]
  ! LESS_EQUALS_THAN [ reduce using rule 53 (logical_factor -> logical_expression .) ]

    logical_operator               shift and go to state 146

state 196

    (46) loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .

    SEMICOLON       reduce using rule 46 (loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block .)


state 197

    (40) elseif -> ELSE IF LPAREN logical_expression RPAREN . block
    (41) elseif -> ELSE IF LPAREN logical_expression RPAREN . block elseif
    (42) elseif -> ELSE IF LPAREN logical_expression RPAREN . block else
    (13) block -> . LBRACKET body RBRACKET

    LBRACKET        shift and go to state 25

    block                          shift and go to state 198

state 198

    (40) elseif -> ELSE IF LPAREN logical_expression RPAREN block .
    (41) elseif -> ELSE IF LPAREN logical_expression RPAREN block . elseif
    (42) elseif -> ELSE IF LPAREN logical_expression RPAREN block . else
    (40) elseif -> . ELSE IF LPAREN logical_expression RPAREN block
    (41) elseif -> . ELSE IF LPAREN logical_expression RPAREN block elseif
    (42) elseif -> . ELSE IF LPAREN logical_expression RPAREN block else
    (43) else -> . ELSE block

    SEMICOLON       reduce using rule 40 (elseif -> ELSE IF LPAREN logical_expression RPAREN block .)
    ELSE            shift and go to state 178

    elseif                         shift and go to state 199
    else                           shift and go to state 200

state 199

    (41) elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .

    SEMICOLON       reduce using rule 41 (elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif .)


state 200

    (42) elseif -> ELSE IF LPAREN logical_expression RPAREN block else .

    SEMICOLON       reduce using rule 42 (elseif -> ELSE IF LPAREN logical_expression RPAREN block else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for NOT in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 125 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 125 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 131 resolved as shift
WARNING: shift/reduce conflict for OR in state 131 resolved as shift
WARNING: shift/reduce conflict for AND in state 131 resolved as shift
WARNING: shift/reduce conflict for NOT in state 131 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 131 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 131 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 131 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 131 resolved as shift
WARNING: shift/reduce conflict for OR in state 165 resolved as shift
WARNING: shift/reduce conflict for AND in state 165 resolved as shift
WARNING: shift/reduce conflict for NOT in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 165 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 165 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 165 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 165 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 168 resolved as shift
WARNING: shift/reduce conflict for OR in state 168 resolved as shift
WARNING: shift/reduce conflict for AND in state 168 resolved as shift
WARNING: shift/reduce conflict for NOT in state 168 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 168 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 168 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 168 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 168 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 195 resolved as shift
WARNING: shift/reduce conflict for OR in state 195 resolved as shift
WARNING: shift/reduce conflict for AND in state 195 resolved as shift
WARNING: shift/reduce conflict for NOT in state 195 resolved as shift
WARNING: shift/reduce conflict for GREATER_THAN in state 195 resolved as shift
WARNING: shift/reduce conflict for LESS_THAN in state 195 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUALS_THAN in state 195 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUALS_THAN in state 195 resolved as shift
WARNING: reduce/reduce conflict in state 111 resolved using rule (assignment -> ID EQUALS ID)
WARNING: rejected rule (factor -> ID) in state 111
WARNING: reduce/reduce conflict in state 166 resolved using rule (logical_expression -> logical_expression logical_operator logical_factor)
WARNING: rejected rule (logical_expression -> logical_factor) in state 166
