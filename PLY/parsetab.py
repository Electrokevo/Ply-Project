
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALS FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NEW NINT NOT NUINT OR PLUS PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STRING THEN TIMES TIMES_EQUAL UINT ULONG USHORT USING VAR VOID WHILEassignment : ID EQUALS expression SEMICOLONexpression : expression PLUS termexpression : expression MINUS termexpression : termterm : term TIMES factorterm : term DIVIDE factorterm : factorfactor : INTEGER_TYPE\n               | FLOAT_TYPE\n               | DOUBLE_TYPE\n               | DECIMAL_TYPEfactor : LPAREN expression RPAREN'
    
_lr_action_items = {'ID':([0,],[2,]),'$end':([1,12,],[0,-1,]),'EQUALS':([2,],[3,]),'INTEGER_TYPE':([3,11,13,14,15,16,],[7,7,7,7,7,7,]),'FLOAT_TYPE':([3,11,13,14,15,16,],[8,8,8,8,8,8,]),'DOUBLE_TYPE':([3,11,13,14,15,16,],[9,9,9,9,9,9,]),'DECIMAL_TYPE':([3,11,13,14,15,16,],[10,10,10,10,10,10,]),'LPAREN':([3,11,13,14,15,16,],[11,11,11,11,11,11,]),'SEMICOLON':([4,5,6,7,8,9,10,18,19,20,21,22,],[12,-4,-7,-8,-9,-10,-11,-2,-3,-5,-6,-12,]),'PLUS':([4,5,6,7,8,9,10,17,18,19,20,21,22,],[13,-4,-7,-8,-9,-10,-11,13,-2,-3,-5,-6,-12,]),'MINUS':([4,5,6,7,8,9,10,17,18,19,20,21,22,],[14,-4,-7,-8,-9,-10,-11,14,-2,-3,-5,-6,-12,]),'RPAREN':([5,6,7,8,9,10,17,18,19,20,21,22,],[-4,-7,-8,-9,-10,-11,22,-2,-3,-5,-6,-12,]),'TIMES':([5,6,7,8,9,10,18,19,20,21,22,],[15,-7,-8,-9,-10,-11,15,15,-5,-6,-12,]),'DIVIDE':([5,6,7,8,9,10,18,19,20,21,22,],[16,-7,-8,-9,-10,-11,16,16,-5,-6,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([0,],[1,]),'expression':([3,11,],[4,17,]),'term':([3,11,13,14,],[5,5,18,19,]),'factor':([3,11,13,14,15,16,],[6,6,6,6,20,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assignment","S'",1,None,None,None),
  ('assignment -> ID EQUALS expression SEMICOLON','assignment',4,'p_assignment','PLY_yacc.py',8),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','PLY_yacc.py',12),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','PLY_yacc.py',16),
  ('expression -> term','expression',1,'p_expression_term','PLY_yacc.py',20),
  ('term -> term TIMES factor','term',3,'p_term_times','PLY_yacc.py',24),
  ('term -> term DIVIDE factor','term',3,'p_term_div','PLY_yacc.py',28),
  ('term -> factor','term',1,'p_term_factor','PLY_yacc.py',32),
  ('factor -> INTEGER_TYPE','factor',1,'p_factor_num','PLY_yacc.py',36),
  ('factor -> FLOAT_TYPE','factor',1,'p_factor_num','PLY_yacc.py',37),
  ('factor -> DOUBLE_TYPE','factor',1,'p_factor_num','PLY_yacc.py',38),
  ('factor -> DECIMAL_TYPE','factor',1,'p_factor_num','PLY_yacc.py',39),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','PLY_yacc.py',43),
]
