
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | if\n            | loop\n            | functionlines : assignment \n    | expression \n    | declaration\n    | returnfunction : modifier data_type ID LPAREN declarations RPAREN block\n                | modifier VOID ID LPAREN declarations RPAREN block\n                | modifier STATIC data_type ID LPAREN declarations RPAREN block\n                | modifier STATIC VOID ID LPAREN declarations RPAREN blockreturn : RETURN ID\n               | RETURN typelambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blockexpression : object_access LPAREN expression RPARENexpression : object_access LPAREN RPARENtype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPE\n    | MINUS FLOAT_TYPE\n    | MINUS DOUBLE_TYPE\n    | MINUS DECIMAL_TYPE\n    | MINUS INTEGER_TYPEif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block body\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE block\n    | ELSE block bodyloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block\n    | FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block bodywhile_loop : WHILE LPAREN logical_expression RPAREN block\n    | WHILE LPAREN logical_expression RPAREN block bodylogical_expression : logical_expression logical_operator logical_factor\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITYdata_structure : data_structure_list\n                      | data_structure_arraydata_structure_list : LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKETdata_structure_array : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETassignment : ID EQUALS expression\n                  | data_type ID EQUALS expression\n                  | CLASSOBJECT IDdeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | object_access\n    | ID\n    | indexingmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,73,74,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,74,75,169,177,194,209,],[10,10,-6,10,-13,10,10,10,10,10,]),'PRIVATE':([3,7,20,25,74,75,169,177,194,209,],[11,11,-6,11,-13,11,11,11,11,11,]),'PROTECTED':([3,7,20,25,74,75,169,177,194,209,],[12,12,-6,12,-13,12,12,12,12,12,]),'INTERNAL':([3,7,20,25,74,75,169,177,194,209,],[13,13,-6,13,-13,13,13,13,13,13,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,37,40,74,75,76,77,78,84,87,88,91,93,94,95,102,103,105,111,125,147,148,149,150,151,152,153,154,155,156,157,165,169,175,176,177,186,191,194,202,209,],[15,16,-96,-97,-98,-99,22,26,43,81,85,-13,43,81,81,81,85,81,128,131,81,81,81,81,142,85,81,81,81,-65,-66,-67,-68,-69,-70,-71,-72,85,85,81,43,85,85,43,85,142,43,81,43,]),'CLASS':([9,10,11,12,13,19,],[18,-96,-97,-98,-99,23,]),'STATIC':([9,10,11,12,13,40,],[19,-96,-97,-98,-99,84,]),'VOID':([10,11,12,13,40,84,],[-96,-97,-98,-99,83,124,]),'INT':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,54,54,-13,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FLOAT':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,55,55,-13,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'BOOL':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,56,56,-13,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'BYTE':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,57,57,-13,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'CHAR':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,58,58,-13,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'SBYTE':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,59,59,-13,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'DECIMAL':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,60,60,-13,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'DOUBLE':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,61,61,-13,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'LONG':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,62,62,-13,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'SHORT':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,63,63,-13,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'UINT':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,64,64,-13,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'LIST':([10,11,12,13,25,40,74,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[-96,-97,-98,-99,68,68,-13,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'SEMICOLON':([15,16,28,32,33,34,35,42,44,45,48,53,67,69,70,71,72,80,86,90,96,97,98,99,100,101,107,108,109,110,113,114,115,116,117,118,119,120,126,127,128,131,132,135,136,137,139,160,161,162,163,168,170,178,],[20,21,75,-19,-20,-21,-22,-94,-93,-87,-91,-90,-95,-33,-34,-35,-36,-94,-84,-80,-37,-38,-39,-40,-27,-28,-85,-93,-94,-86,-57,-58,-59,-60,-61,-62,-63,-92,-78,-9,-11,-10,-12,-32,-88,-89,165,-79,-114,-113,-31,-64,-56,191,]),'LBRACKET':([22,26,146,164,183,185,187,198,199,206,210,],[25,25,25,25,25,25,25,25,25,25,25,]),'IF':([25,74,75,169,177,183,194,209,],[36,-13,36,36,36,193,36,36,]),'ID':([25,37,41,43,47,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,77,78,82,83,87,88,89,91,93,94,95,102,103,111,123,124,125,133,141,142,143,147,148,149,150,151,152,153,154,155,165,167,169,171,177,191,194,202,207,209,],[42,80,86,90,100,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-73,-74,-13,42,109,109,116,121,122,80,127,129,132,80,109,109,116,140,116,158,159,80,-77,166,90,-76,116,-65,-66,-67,-68,-69,-70,-71,-72,116,179,42,184,42,140,42,116,-75,42,]),'RETURN':([25,74,75,169,177,194,209,],[47,-13,47,47,47,47,47,]),'WHILE':([25,74,75,169,177,194,209,],[49,-13,49,49,49,49,49,]),'FOR':([25,74,75,169,177,194,209,],[50,-13,50,50,50,50,50,]),'LPAREN':([25,36,37,44,49,50,74,75,76,77,78,87,93,94,95,102,111,121,122,125,127,128,131,132,147,148,149,150,151,152,153,154,155,158,159,165,169,177,193,194,202,209,],[37,78,37,93,102,103,-13,37,37,37,111,37,37,37,37,111,111,156,157,37,-9,-11,-10,-12,111,-65,-66,-67,-68,-69,-70,-71,-72,175,176,111,37,37,202,37,111,37,]),'FLOAT_TYPE':([25,37,46,47,74,75,76,77,78,87,93,94,95,102,111,125,147,148,149,150,151,152,153,154,155,165,169,177,192,194,202,209,],[69,69,96,69,-13,69,69,69,69,69,69,69,69,69,69,69,69,-65,-66,-67,-68,-69,-70,-71,-72,69,69,69,69,69,69,69,]),'DOUBLE_TYPE':([25,37,46,47,74,75,76,77,78,87,93,94,95,102,111,125,147,148,149,150,151,152,153,154,155,165,169,177,192,194,202,209,],[70,70,97,70,-13,70,70,70,70,70,70,70,70,70,70,70,70,-65,-66,-67,-68,-69,-70,-71,-72,70,70,70,70,70,70,70,]),'DECIMAL_TYPE':([25,37,46,47,74,75,76,77,78,87,93,94,95,102,111,125,147,148,149,150,151,152,153,154,155,165,169,177,192,194,202,209,],[71,71,98,71,-13,71,71,71,71,71,71,71,71,71,71,71,71,-65,-66,-67,-68,-69,-70,-71,-72,71,71,71,71,71,71,71,]),'INTEGER_TYPE':([25,37,46,47,74,75,76,77,78,87,89,93,94,95,102,111,125,147,148,149,150,151,152,153,154,155,165,169,177,192,194,202,209,],[72,72,99,72,-13,72,72,72,72,72,130,72,72,72,72,72,72,72,-65,-66,-67,-68,-69,-70,-71,-72,72,72,72,72,72,72,72,]),'MINUS':([25,33,37,42,44,45,47,48,53,67,69,70,71,72,74,75,76,77,78,79,80,87,93,94,95,96,97,98,99,102,107,108,109,110,111,120,125,126,127,128,131,132,134,135,136,137,147,148,149,150,151,152,153,154,155,160,161,162,163,165,169,177,192,194,202,209,],[46,77,46,-94,-93,-87,46,-91,-90,-95,-33,-34,-35,-36,-13,46,46,46,46,77,-94,46,46,46,46,-37,-38,-39,-40,46,-85,-93,-94,-86,46,-92,46,77,-9,-11,-10,-12,77,-32,-88,-89,46,-65,-66,-67,-68,-69,-70,-71,-72,77,-114,-113,-31,46,46,46,46,46,46,46,]),'RBRACKET':([27,29,30,31,38,39,74,75,106,169,177,180,181,182,190,194,195,197,203,204,205,209,211,212,213,214,],[74,-16,-17,-18,-50,-51,-13,-14,-15,-41,-54,-42,-43,-44,-55,-48,-23,-24,-49,-25,-26,-52,-53,-45,-46,-47,]),'PLUS':([33,42,44,45,48,53,67,69,70,71,72,79,80,96,97,98,99,107,108,109,110,120,126,127,128,131,132,134,135,136,137,160,161,162,163,],[76,-94,-93,-87,-91,-90,-95,-33,-34,-35,-36,76,-94,-37,-38,-39,-40,-85,-93,-94,-86,-92,76,-9,-11,-10,-12,76,-32,-88,-89,76,-114,-113,-31,]),'EQUALS':([42,86,140,166,],[87,125,87,125,]),'DOT':([42,43,80,81,109,116,],[88,91,88,91,88,88,]),'TIMES':([42,44,45,48,53,67,69,70,71,72,80,96,97,98,99,107,108,109,110,120,127,128,131,132,136,137,161,162,],[-94,-93,94,-91,-90,-95,-33,-34,-35,-36,-94,-37,-38,-39,-40,94,-93,-94,94,-92,-9,-11,-10,-12,-88,-89,-114,-113,]),'DIVIDE':([42,44,45,48,53,67,69,70,71,72,80,96,97,98,99,107,108,109,110,120,127,128,131,132,136,137,161,162,],[-94,-93,95,-91,-90,-95,-33,-34,-35,-36,-94,-37,-38,-39,-40,95,-93,-94,95,-92,-9,-11,-10,-12,-88,-89,-114,-113,]),'LSQBRACKET':([42,43,51,54,55,56,57,58,59,60,61,62,63,64,80,85,109,116,142,179,],[89,92,104,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,89,92,89,89,92,192,]),'RPAREN':([44,45,48,53,67,69,70,71,72,79,80,90,93,96,97,98,99,107,108,109,110,112,113,114,115,116,117,118,119,120,126,127,128,131,132,134,135,136,137,138,145,160,161,162,163,168,170,172,173,174,184,186,188,189,196,200,208,],[-93,-87,-91,-90,-95,-33,-34,-35,-36,120,-94,-80,135,-37,-38,-39,-40,-85,-93,-94,-86,146,-57,-58,-59,-60,-61,-62,-63,-92,-78,-9,-11,-10,-12,163,-32,-88,-89,164,168,-79,-114,-113,-31,-64,-56,185,-81,187,-84,-82,198,199,-83,206,210,]),'GREATER_THAN':([51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,96,97,98,99,112,113,114,115,116,117,118,119,127,128,131,132,133,138,143,144,145,161,162,168,170,178,207,208,],[-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-73,-74,-33,-34,-35,-36,-37,-38,-39,-40,151,-57,-58,-59,-60,-61,-62,-63,-9,-11,-10,-12,-77,151,-76,167,151,-114,-113,-64,-56,151,-75,151,]),'LESS_THAN':([68,69,70,71,72,96,97,98,99,112,113,114,115,116,117,118,119,127,128,131,132,138,145,161,162,168,170,178,208,],[105,-33,-34,-35,-36,-37,-38,-39,-40,152,-57,-58,-59,-60,-61,-62,-63,-9,-11,-10,-12,152,152,-114,-113,-64,-56,152,152,]),'OR':([69,70,71,72,96,97,98,99,112,113,114,115,116,117,118,119,127,128,131,132,138,145,161,162,168,170,178,208,],[-33,-34,-35,-36,-37,-38,-39,-40,148,-57,-58,-59,-60,-61,-62,-63,-9,-11,-10,-12,148,148,-114,-113,-64,-56,148,148,]),'AND':([69,70,71,72,96,97,98,99,112,113,114,115,116,117,118,119,127,128,131,132,138,145,161,162,168,170,178,208,],[-33,-34,-35,-36,-37,-38,-39,-40,149,-57,-58,-59,-60,-61,-62,-63,-9,-11,-10,-12,149,149,-114,-113,-64,-56,149,149,]),'NOT':([69,70,71,72,96,97,98,99,112,113,114,115,116,117,118,119,127,128,131,132,138,145,161,162,168,170,178,208,],[-33,-34,-35,-36,-37,-38,-39,-40,150,-57,-58,-59,-60,-61,-62,-63,-9,-11,-10,-12,150,150,-114,-113,-64,-56,150,150,]),'GREATER_EQUALS_THAN':([69,70,71,72,96,97,98,99,112,113,114,115,116,117,118,119,127,128,131,132,138,145,161,162,168,170,178,208,],[-33,-34,-35,-36,-37,-38,-39,-40,153,-57,-58,-59,-60,-61,-62,-63,-9,-11,-10,-12,153,153,-114,-113,-64,-56,153,153,]),'LESS_EQUALS_THAN':([69,70,71,72,96,97,98,99,112,113,114,115,116,117,118,119,127,128,131,132,138,145,161,162,168,170,178,208,],[-33,-34,-35,-36,-37,-38,-39,-40,154,-57,-58,-59,-60,-61,-62,-63,-9,-11,-10,-12,154,154,-114,-113,-64,-56,154,154,]),'EQUALITY':([69,70,71,72,96,97,98,99,112,113,114,115,116,117,118,119,127,128,131,132,138,145,161,162,168,170,178,208,],[-33,-34,-35,-36,-37,-38,-39,-40,155,-57,-58,-59,-60,-61,-62,-63,-9,-11,-10,-12,155,155,-114,-113,-64,-56,155,155,]),'RSQBRACKET':([69,70,71,72,92,96,97,98,99,104,129,130,201,],[-33,-34,-35,-36,133,-37,-38,-39,-40,143,161,162,207,]),'ELSE':([74,169,212,],[-13,183,183,]),'TRUE':([78,102,111,147,148,149,150,151,152,153,154,155,165,202,],[114,114,114,114,-65,-66,-67,-68,-69,-70,-71,-72,114,114,]),'FALSE':([78,102,111,147,148,149,150,151,152,153,154,155,165,202,],[115,115,115,115,-65,-66,-67,-68,-69,-70,-71,-72,115,115,]),'COMMA':([173,184,],[186,-84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,75,169,177,194,209,],[9,9,40,40,40,40,40,40,]),'block':([22,26,146,164,183,185,187,198,199,206,210,],[24,73,169,177,194,195,197,204,205,209,212,]),'body':([25,75,169,177,194,209,],[27,106,180,190,203,211,]),'lines':([25,75,169,177,194,209,],[28,28,28,28,28,28,]),'if':([25,75,169,177,194,209,],[29,29,29,29,29,29,]),'loop':([25,75,169,177,194,209,],[30,30,30,30,30,30,]),'function':([25,75,169,177,194,209,],[31,31,31,31,31,31,]),'assignment':([25,75,103,169,177,191,194,209,],[32,32,139,32,32,200,32,32,]),'expression':([25,37,75,87,93,125,169,177,194,209,],[33,79,33,126,134,160,33,33,33,33,]),'declaration':([25,75,156,157,169,175,176,177,186,194,209,],[34,34,173,173,34,173,173,34,173,34,34,]),'return':([25,75,169,177,194,209,],[35,35,35,35,35,35,]),'while_loop':([25,75,169,177,194,209,],[38,38,38,38,38,38,]),'loop_for':([25,75,169,177,194,209,],[39,39,39,39,39,39,]),'data_type':([25,40,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[41,82,41,123,141,144,171,171,41,171,171,41,171,141,41,41,]),'object_access':([25,37,75,76,77,78,87,93,94,95,102,111,125,147,165,169,177,194,202,209,],[44,44,44,108,108,119,44,44,108,108,119,119,44,119,119,44,44,44,119,44,]),'term':([25,37,75,76,77,87,93,125,169,177,194,209,],[45,45,45,107,110,45,45,45,45,45,45,45,]),'type':([25,37,47,75,76,77,78,87,93,94,95,102,111,125,147,165,169,177,192,194,202,209,],[48,48,101,48,48,48,118,48,48,48,48,118,118,48,118,118,48,48,201,48,118,48,]),'primitive':([25,40,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'data_structure':([25,40,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'factor':([25,37,75,76,77,87,93,94,95,125,169,177,194,209,],[53,53,53,53,53,53,53,136,137,53,53,53,53,53,]),'data_structure_list':([25,40,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'data_structure_array':([25,40,75,84,103,105,156,157,169,175,176,177,186,191,194,209,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'indexing':([25,37,75,76,77,78,87,93,94,95,102,111,125,147,165,169,177,194,202,209,],[67,67,67,67,67,117,67,67,67,67,117,117,67,117,117,67,67,67,117,67,]),'logical_expression':([78,102,111,165,202,],[112,138,145,178,208,]),'logical_factor':([78,102,111,147,165,202,],[113,113,113,170,113,113,]),'logical_operator':([112,138,145,178,208,],[147,147,147,147,147,]),'declarations':([156,157,175,176,186,],[172,174,188,189,196,]),'elseif':([169,212,],[181,213,]),'else':([169,212,],[182,214,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',27),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',28),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',32),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',33),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',37),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',41),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',44),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',45),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',49),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',50),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',51),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',52),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',55),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',59),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',60),
  ('body -> if','body',1,'p_body','PLY_yacc.py',61),
  ('body -> loop','body',1,'p_body','PLY_yacc.py',62),
  ('body -> function','body',1,'p_body','PLY_yacc.py',63),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',67),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',68),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',69),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',70),
  ('function -> modifier data_type ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',74),
  ('function -> modifier VOID ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',75),
  ('function -> modifier STATIC data_type ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',76),
  ('function -> modifier STATIC VOID ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',77),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',80),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',81),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',85),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',86),
  ('expression -> object_access LPAREN expression RPAREN','expression',4,'p_console_writeline','PLY_yacc.py',89),
  ('expression -> object_access LPAREN RPAREN','expression',3,'p_console_readline','PLY_yacc.py',96),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',103),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',104),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',105),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',106),
  ('type -> MINUS FLOAT_TYPE','type',2,'p_type','PLY_yacc.py',107),
  ('type -> MINUS DOUBLE_TYPE','type',2,'p_type','PLY_yacc.py',108),
  ('type -> MINUS DECIMAL_TYPE','type',2,'p_type','PLY_yacc.py',109),
  ('type -> MINUS INTEGER_TYPE','type',2,'p_type','PLY_yacc.py',110),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',113),
  ('if -> IF LPAREN logical_expression RPAREN block body','if',6,'p_if','PLY_yacc.py',114),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',115),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',116),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',119),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',120),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',121),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',124),
  ('else -> ELSE block body','else',3,'p_else','PLY_yacc.py',125),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',128),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',129),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',134),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body','loop_for',10,'p_loop_for','PLY_yacc.py',135),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',140),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block body','while_loop',6,'p_while_loop','PLY_yacc.py',141),
  ('logical_expression -> logical_expression logical_operator logical_factor','logical_expression',3,'p_logical_expression','PLY_yacc.py',144),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',145),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',148),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',149),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',150),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',151),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',152),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',153),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',154),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',157),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',158),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',159),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',160),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',161),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',162),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',163),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',164),
  ('data_structure -> data_structure_list','data_structure',1,'p_data_structure','PLY_yacc.py',169),
  ('data_structure -> data_structure_array','data_structure',1,'p_data_structure','PLY_yacc.py',170),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET','data_structure_list',8,'p_data_structure_list','PLY_yacc.py',173),
  ('data_structure_array -> primitive LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',178),
  ('data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',179),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','PLY_yacc.py',182),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',183),
  ('assignment -> CLASSOBJECT ID','assignment',2,'p_assignment','PLY_yacc.py',184),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',187),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',188),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',189),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',192),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',195),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',196),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',197),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',200),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',201),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',202),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',212),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',213),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',214),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',215),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',216),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',223),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',224),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',225),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',226),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',229),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',230),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',233),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',234),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',235),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',236),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',237),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',238),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',239),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',240),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',241),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',242),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',243),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',247),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',248),
]
