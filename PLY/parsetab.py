
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIFFERENT DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUSONE PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | if\n            | loop\n            | functionlines : assignment \n    | expression \n    | declaration\n    | returnnames : ID\n    | CLASSOBJECTfunction : modifier data_type names LPAREN declarations RPAREN block\n                | modifier VOID names LPAREN declarations RPAREN block\n                | modifier STATIC data_type names LPAREN declarations RPAREN block\n                | modifier STATIC VOID names LPAREN declarations RPAREN block\n                | function bodyreturn : RETURN ID\n               | RETURN type\n               | RETURN expressionfunction_call : names LPAREN RPAREN\n                     | names LPAREN arguments RPARENarguments : expression\n                 | expression COMMA arguments\n                 | names\n                 | names COMMA argumentslambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blockexpression : object_access LPAREN expression RPARENexpression : object_access LPAREN RPARENif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block body\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE block\n    | ELSE block bodyloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block\n    | FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block bodywhile_loop : WHILE LPAREN logical_expression RPAREN block\n    | WHILE LPAREN logical_expression RPAREN block bodylogical_expression : logical_factor logical_operator logical_expression\n    | logical_expression logical_operator logical_expression\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITY\n    | DIFFERENTdata_structure : data_structure_list\n                      | data_structure_arraydata_structure_list : LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKETdata_structure_array : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETassignment : data_type ID EQUALS expressionassignment : ID EQUALS expression\n                | indexing EQUALS expressionassignment : ID PLUSONEassignment_class : CLASSOBJECT IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | object_access\n    | ID\n    | indexing\n    | function_calltype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPE\n    | MINUS typedeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET\n    | ID LSQBRACKET expression RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,75,76,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,29,30,31,38,39,76,77,78,110,190,201,204,205,206,214,218,219,221,227,228,229,233,235,236,237,238,],[10,10,-6,10,-16,-17,10,-52,-53,-13,10,-29,-15,10,10,-44,-45,-46,-57,10,-25,-26,-51,-27,-28,10,-55,-47,-48,-49,]),'PRIVATE':([3,7,20,25,29,30,31,38,39,76,77,78,110,190,201,204,205,206,214,218,219,221,227,228,229,233,235,236,237,238,],[11,11,-6,11,-16,-17,11,-52,-53,-13,11,-29,-15,11,11,-44,-45,-46,-57,11,-25,-26,-51,-27,-28,11,-55,-47,-48,-49,]),'PROTECTED':([3,7,20,25,29,30,31,38,39,76,77,78,110,190,201,204,205,206,214,218,219,221,227,228,229,233,235,236,237,238,],[12,12,-6,12,-16,-17,12,-52,-53,-13,12,-29,-15,12,12,-44,-45,-46,-57,12,-25,-26,-51,-27,-28,12,-55,-47,-48,-49,]),'INTERNAL':([3,7,20,25,29,30,31,38,39,76,77,78,110,190,201,204,205,206,214,218,219,221,227,228,229,233,235,236,237,238,],[13,13,-6,13,-16,-17,13,-52,-53,-13,13,-29,-15,13,13,-44,-45,-46,-57,13,-25,-26,-51,-27,-28,13,-55,-47,-48,-49,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,29,30,31,37,38,39,40,48,52,53,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,78,79,80,81,86,87,88,91,92,94,95,96,97,98,99,104,105,107,109,110,115,130,131,132,155,158,162,163,164,165,166,167,168,169,170,171,172,173,174,178,180,186,190,197,198,201,204,205,206,210,214,215,218,219,221,226,227,228,229,231,233,235,236,237,238,],[15,16,-108,-109,-110,-111,22,26,55,-16,-17,55,84,-52,-53,89,84,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-77,-78,-13,55,-29,84,84,124,128,128,89,138,84,84,144,84,84,84,84,124,89,156,89,-15,124,128,128,84,-80,-81,124,-68,-69,-70,-71,-72,-73,-74,-75,-76,124,89,89,138,138,124,55,89,89,55,-44,-45,-46,89,-57,89,55,-25,-26,124,-51,-27,-28,-79,55,-55,-47,-48,-49,]),'CLASS':([9,10,11,12,13,19,],[18,-108,-109,-110,-111,23,]),'STATIC':([9,10,11,12,13,40,],[19,-108,-109,-110,-111,88,]),'VOID':([10,11,12,13,40,88,],[-108,-109,-110,-111,87,131,]),'INT':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,57,-16,-17,57,-52,-53,57,-13,57,-29,57,57,57,-15,57,57,57,57,57,57,-44,-45,-46,57,-57,57,57,-25,-26,-51,-27,-28,57,-55,-47,-48,-49,]),'FLOAT':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,58,-16,-17,58,-52,-53,58,-13,58,-29,58,58,58,-15,58,58,58,58,58,58,-44,-45,-46,58,-57,58,58,-25,-26,-51,-27,-28,58,-55,-47,-48,-49,]),'BOOL':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,59,-16,-17,59,-52,-53,59,-13,59,-29,59,59,59,-15,59,59,59,59,59,59,-44,-45,-46,59,-57,59,59,-25,-26,-51,-27,-28,59,-55,-47,-48,-49,]),'BYTE':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,60,-16,-17,60,-52,-53,60,-13,60,-29,60,60,60,-15,60,60,60,60,60,60,-44,-45,-46,60,-57,60,60,-25,-26,-51,-27,-28,60,-55,-47,-48,-49,]),'CHAR':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,61,-16,-17,61,-52,-53,61,-13,61,-29,61,61,61,-15,61,61,61,61,61,61,-44,-45,-46,61,-57,61,61,-25,-26,-51,-27,-28,61,-55,-47,-48,-49,]),'SBYTE':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,62,-16,-17,62,-52,-53,62,-13,62,-29,62,62,62,-15,62,62,62,62,62,62,-44,-45,-46,62,-57,62,62,-25,-26,-51,-27,-28,62,-55,-47,-48,-49,]),'DECIMAL':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,63,-16,-17,63,-52,-53,63,-13,63,-29,63,63,63,-15,63,63,63,63,63,63,-44,-45,-46,63,-57,63,63,-25,-26,-51,-27,-28,63,-55,-47,-48,-49,]),'DOUBLE':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,64,-16,-17,64,-52,-53,64,-13,64,-29,64,64,64,-15,64,64,64,64,64,64,-44,-45,-46,64,-57,64,64,-25,-26,-51,-27,-28,64,-55,-47,-48,-49,]),'LONG':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,65,-16,-17,65,-52,-53,65,-13,65,-29,65,65,65,-15,65,65,65,65,65,65,-44,-45,-46,65,-57,65,65,-25,-26,-51,-27,-28,65,-55,-47,-48,-49,]),'SHORT':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,66,-16,-17,66,-52,-53,66,-13,66,-29,66,66,66,-15,66,66,66,66,66,66,-44,-45,-46,66,-57,66,66,-25,-26,-51,-27,-28,66,-55,-47,-48,-49,]),'UINT':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,67,-16,-17,67,-52,-53,67,-13,67,-29,67,67,67,-15,67,67,67,67,67,67,-44,-45,-46,67,-57,67,67,-25,-26,-51,-27,-28,67,-55,-47,-48,-49,]),'LIST':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,173,174,190,197,198,201,204,205,206,210,214,215,218,219,221,227,228,229,233,235,236,237,238,],[-108,-109,-110,-111,71,-16,-17,71,-52,-53,71,-13,71,-29,71,71,71,-15,71,71,71,71,71,71,-44,-45,-46,71,-57,71,71,-25,-26,-51,-27,-28,71,-55,-47,-48,-49,]),'SEMICOLON':([15,16,28,32,33,34,35,43,44,45,46,49,54,56,70,72,73,74,83,85,90,93,100,101,102,103,111,112,113,114,117,118,119,120,121,122,123,125,134,139,143,144,145,147,148,149,151,156,157,177,179,181,182,183,184,189,191,192,202,],[20,21,77,-19,-20,-21,-22,-96,-97,-95,-89,-93,-102,-92,-98,-99,-100,-101,-96,-97,-107,-85,-103,-30,-31,-32,-87,-95,-96,-88,-60,-61,-62,-63,-64,-65,-66,-94,-33,-83,-9,-11,-84,-42,-90,-91,186,-10,-12,-82,-34,-126,-125,-127,-41,-67,-59,-58,215,]),'LBRACKET':([22,26,161,185,207,209,211,222,223,230,234,],[25,25,25,25,25,25,25,25,25,25,25,]),'IF':([25,29,30,31,38,39,76,77,78,110,190,201,204,205,206,207,214,218,219,221,227,228,229,233,235,236,237,238,],[36,-16,-17,36,-52,-53,-13,36,-29,-15,36,36,-44,-45,-46,217,-57,36,-25,-26,-51,-27,-28,36,-55,-47,-48,-49,]),'ID':([25,29,30,31,37,38,39,41,48,52,53,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,78,79,80,81,86,87,91,92,94,95,96,97,98,99,104,105,107,110,115,130,131,132,152,155,158,162,163,164,165,166,167,168,169,170,171,172,178,180,186,188,190,193,201,204,205,206,214,215,218,219,221,226,227,228,229,231,233,235,236,237,238,],[43,-16,-17,43,83,-52,-53,90,101,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-77,-78,-13,43,-29,113,113,120,127,127,137,83,140,143,83,83,113,113,120,153,157,-15,120,127,127,83,187,-80,-81,120,-68,-69,-70,-71,-72,-73,-74,-75,-76,120,137,137,120,203,43,208,43,-44,-45,-46,-57,153,43,-25,-26,120,-51,-27,-28,-79,43,-55,-47,-48,-49,]),'RETURN':([25,29,30,31,38,39,76,77,78,110,190,201,204,205,206,214,218,219,221,227,228,229,233,235,236,237,238,],[48,-16,-17,48,-52,-53,-13,48,-29,-15,48,48,-44,-45,-46,-57,48,-25,-26,-51,-27,-28,48,-55,-47,-48,-49,]),'WHILE':([25,29,30,31,38,39,76,77,78,110,190,201,204,205,206,214,218,219,221,227,228,229,233,235,236,237,238,],[50,-16,-17,50,-52,-53,-13,50,-29,-15,50,50,-44,-45,-46,-57,50,-25,-26,-51,-27,-28,50,-55,-47,-48,-49,]),'FOR':([25,29,30,31,38,39,76,77,78,110,190,201,204,205,206,214,218,219,221,227,228,229,233,235,236,237,238,],[51,-16,-17,51,-52,-53,-13,51,-29,-15,51,51,-44,-45,-46,-57,51,-25,-26,-51,-27,-28,51,-55,-47,-48,-49,]),'LPAREN':([25,29,30,31,36,37,38,39,42,43,45,48,50,51,55,76,77,78,79,80,81,83,84,91,92,94,96,97,98,99,101,104,110,113,115,126,127,128,129,132,133,137,138,140,143,144,156,157,162,163,164,165,166,167,168,169,170,171,172,175,176,178,180,186,190,201,204,205,206,214,217,218,219,221,226,227,228,229,233,235,236,237,238,],[37,-16,-17,37,81,37,-52,-53,91,-23,97,37,104,105,-24,-13,37,-29,37,37,115,-23,-24,37,37,37,37,37,37,37,-23,115,-15,-23,115,173,-23,-24,174,37,91,-23,-24,-23,-9,-11,-10,-12,115,-68,-69,-70,-71,-72,-73,-74,-75,-76,115,197,198,37,37,115,37,37,-44,-45,-46,-57,226,37,-25,-26,115,-51,-27,-28,37,-55,-47,-48,-49,]),'FLOAT_TYPE':([25,29,30,31,37,38,39,47,48,76,77,78,79,80,81,91,92,94,96,97,98,99,104,110,115,132,162,163,164,165,166,167,168,169,170,171,172,178,180,186,190,201,204,205,206,214,216,218,219,221,226,227,228,229,233,235,236,237,238,],[72,-16,-17,72,72,-52,-53,72,72,-13,72,-29,72,72,72,72,72,72,72,72,72,72,72,-15,72,72,72,-68,-69,-70,-71,-72,-73,-74,-75,-76,72,72,72,72,72,72,-44,-45,-46,-57,72,72,-25,-26,72,-51,-27,-28,72,-55,-47,-48,-49,]),'DOUBLE_TYPE':([25,29,30,31,37,38,39,47,48,76,77,78,79,80,81,91,92,94,96,97,98,99,104,110,115,132,162,163,164,165,166,167,168,169,170,171,172,178,180,186,190,201,204,205,206,214,216,218,219,221,226,227,228,229,233,235,236,237,238,],[73,-16,-17,73,73,-52,-53,73,73,-13,73,-29,73,73,73,73,73,73,73,73,73,73,73,-15,73,73,73,-68,-69,-70,-71,-72,-73,-74,-75,-76,73,73,73,73,73,73,-44,-45,-46,-57,73,73,-25,-26,73,-51,-27,-28,73,-55,-47,-48,-49,]),'DECIMAL_TYPE':([25,29,30,31,37,38,39,47,48,76,77,78,79,80,81,91,92,94,96,97,98,99,104,110,115,132,162,163,164,165,166,167,168,169,170,171,172,178,180,186,190,201,204,205,206,214,216,218,219,221,226,227,228,229,233,235,236,237,238,],[74,-16,-17,74,74,-52,-53,74,74,-13,74,-29,74,74,74,74,74,74,74,74,74,74,74,-15,74,74,74,-68,-69,-70,-71,-72,-73,-74,-75,-76,74,74,74,74,74,74,-44,-45,-46,-57,74,74,-25,-26,74,-51,-27,-28,74,-55,-47,-48,-49,]),'INTEGER_TYPE':([25,29,30,31,37,38,39,47,48,76,77,78,79,80,81,91,92,94,96,97,98,99,104,110,115,132,162,163,164,165,166,167,168,169,170,171,172,178,180,186,190,201,204,205,206,214,216,218,219,221,226,227,228,229,233,235,236,237,238,],[54,-16,-17,54,54,-52,-53,54,54,-13,54,-29,54,54,54,54,54,141,54,54,54,54,54,-15,54,54,54,-68,-69,-70,-71,-72,-73,-74,-75,-76,54,54,54,54,54,54,-44,-45,-46,-57,54,54,-25,-26,54,-51,-27,-28,54,-55,-47,-48,-49,]),'MINUS':([25,29,30,31,33,37,38,39,43,44,45,46,47,48,49,54,56,70,72,73,74,76,77,78,79,80,81,82,83,85,91,92,94,96,97,98,99,100,101,102,103,104,110,111,112,113,114,115,125,132,134,136,137,139,140,141,142,143,144,145,146,147,148,149,156,157,162,163,164,165,166,167,168,169,170,171,172,177,178,179,180,181,182,183,184,186,190,201,204,205,206,214,216,218,219,221,226,227,228,229,233,235,236,237,238,],[47,-16,-17,47,80,47,-52,-53,-96,-97,-95,-89,47,47,-93,-102,-92,-98,-99,-100,-101,-13,47,-29,47,47,47,80,-96,-97,47,47,47,47,47,47,47,-103,-96,-93,80,47,-15,-87,-95,-96,-88,47,-94,47,-33,80,-96,80,-96,-102,80,-9,-11,80,80,-42,-90,-91,-10,-12,47,-68,-69,-70,-71,-72,-73,-74,-75,-76,47,80,47,-34,47,-126,-125,-127,-41,47,47,47,-44,-45,-46,-57,47,47,-25,-26,47,-51,-27,-28,47,-55,-47,-48,-49,]),'RBRACKET':([27,29,30,31,38,39,76,77,78,110,190,201,204,205,206,214,218,219,221,227,228,229,233,235,236,237,238,],[76,-16,-17,-18,-52,-53,-13,-14,-29,-15,-43,-56,-44,-45,-46,-57,-50,-25,-26,-51,-27,-28,-54,-55,-47,-48,-49,]),'PLUS':([33,43,44,45,46,49,54,56,70,72,73,74,82,83,85,100,101,102,103,111,112,113,114,125,134,136,137,139,140,141,142,143,144,145,146,147,148,149,156,157,177,179,181,182,183,184,],[79,-96,-97,-95,-89,-93,-102,-92,-98,-99,-100,-101,79,-96,-97,-103,-96,-93,79,-87,-95,-96,-88,-94,-33,79,-96,79,-96,-102,79,-9,-11,79,79,-42,-90,-91,-10,-12,79,-34,-126,-125,-127,-41,]),'EQUALS':([43,44,90,153,154,181,182,183,187,],[92,96,132,92,96,-126,-125,-127,132,]),'PLUSONE':([43,153,],[93,93,]),'LSQBRACKET':([43,52,55,57,58,59,60,61,62,63,64,65,66,67,83,89,101,113,120,137,140,153,203,],[94,106,108,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,94,108,94,94,94,94,94,94,216,]),'DOT':([43,55,83,84,101,113,120,124,137,138,140,],[95,107,95,107,95,95,95,107,95,107,95,]),'TIMES':([43,44,45,46,49,54,56,70,72,73,74,83,85,100,101,102,111,112,113,114,125,134,137,140,141,143,144,148,149,156,157,179,181,182,183,],[-96,-97,-95,98,-93,-102,-92,-98,-99,-100,-101,-96,-97,-103,-96,-93,98,-95,-96,98,-94,-33,-96,-96,-102,-9,-11,-90,-91,-10,-12,-34,-126,-125,-127,]),'DIVIDE':([43,44,45,46,49,54,56,70,72,73,74,83,85,100,101,102,111,112,113,114,125,134,137,140,141,143,144,148,149,156,157,179,181,182,183,],[-96,-97,-95,99,-93,-102,-92,-98,-99,-100,-101,-96,-97,-103,-96,-93,99,-95,-96,99,-94,-33,-96,-96,-102,-9,-11,-90,-91,-10,-12,-34,-126,-125,-127,]),'RPAREN':([45,46,49,54,56,70,72,73,74,82,83,85,91,93,97,100,111,112,113,114,116,117,118,119,120,121,122,123,125,133,134,135,136,137,138,139,143,144,145,146,147,148,149,150,156,157,160,177,179,181,182,183,184,189,191,192,194,195,196,199,200,208,210,212,213,220,224,232,],[-95,-89,-93,-102,-92,-98,-99,-100,-101,125,-96,-97,134,-85,147,-103,-87,-95,-96,-88,161,-60,-61,-62,-63,-64,-65,-66,-94,-37,-33,179,-35,-23,-24,-83,-9,-11,-84,184,-42,-90,-91,185,-10,-12,189,-82,-34,-126,-125,-127,-41,-67,-59,-58,209,-104,211,-38,-36,-107,-105,222,223,-106,230,234,]),'COMMA':([45,46,49,54,56,70,72,73,74,85,100,111,112,113,114,125,133,134,136,137,138,143,144,147,148,149,156,157,179,181,182,183,184,195,208,],[-95,-89,-93,-102,-92,-98,-99,-100,-101,-97,-103,-87,-95,-96,-88,-94,178,-33,180,-23,-24,-9,-11,-42,-90,-91,-10,-12,-34,-126,-125,-127,-41,210,-107,]),'RSQBRACKET':([45,46,49,54,56,70,72,73,74,85,100,106,108,111,112,113,114,125,134,140,141,142,143,144,147,148,149,156,157,179,181,182,183,184,225,],[-95,-89,-93,-102,-92,-98,-99,-100,-101,-97,-103,155,158,-87,-95,-96,-88,-94,-33,181,182,183,-9,-11,-42,-90,-91,-10,-12,-34,-126,-125,-127,-41,231,]),'GREATER_THAN':([52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,155,156,157,158,159,160,181,182,183,189,191,192,202,231,232,],[-112,-113,-102,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-77,-78,-99,-100,-101,-103,166,166,-61,-62,-63,-64,-65,-66,-9,-11,166,-80,-10,-12,-81,188,166,-126,-125,-127,-67,166,166,166,-79,166,]),'OR':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,181,182,183,189,191,192,202,232,],[-102,-99,-100,-101,-103,163,163,-61,-62,-63,-64,-65,-66,-9,-11,163,-10,-12,163,-126,-125,-127,-67,163,163,163,163,]),'AND':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,181,182,183,189,191,192,202,232,],[-102,-99,-100,-101,-103,164,164,-61,-62,-63,-64,-65,-66,-9,-11,164,-10,-12,164,-126,-125,-127,-67,164,164,164,164,]),'NOT':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,181,182,183,189,191,192,202,232,],[-102,-99,-100,-101,-103,165,165,-61,-62,-63,-64,-65,-66,-9,-11,165,-10,-12,165,-126,-125,-127,-67,165,165,165,165,]),'LESS_THAN':([54,71,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,181,182,183,189,191,192,202,232,],[-102,109,-99,-100,-101,-103,167,167,-61,-62,-63,-64,-65,-66,-9,-11,167,-10,-12,167,-126,-125,-127,-67,167,167,167,167,]),'GREATER_EQUALS_THAN':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,181,182,183,189,191,192,202,232,],[-102,-99,-100,-101,-103,168,168,-61,-62,-63,-64,-65,-66,-9,-11,168,-10,-12,168,-126,-125,-127,-67,168,168,168,168,]),'LESS_EQUALS_THAN':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,181,182,183,189,191,192,202,232,],[-102,-99,-100,-101,-103,169,169,-61,-62,-63,-64,-65,-66,-9,-11,169,-10,-12,169,-126,-125,-127,-67,169,169,169,169,]),'EQUALITY':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,181,182,183,189,191,192,202,232,],[-102,-99,-100,-101,-103,170,170,-61,-62,-63,-64,-65,-66,-9,-11,170,-10,-12,170,-126,-125,-127,-67,170,170,170,170,]),'DIFFERENT':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,181,182,183,189,191,192,202,232,],[-102,-99,-100,-101,-103,171,171,-61,-62,-63,-64,-65,-66,-9,-11,171,-10,-12,171,-126,-125,-127,-67,171,171,171,171,]),'ELSE':([76,190,236,],[-13,207,207,]),'TRUE':([81,104,115,162,163,164,165,166,167,168,169,170,171,172,186,226,],[118,118,118,118,-68,-69,-70,-71,-72,-73,-74,-75,-76,118,118,118,]),'FALSE':([81,104,115,162,163,164,165,166,167,168,169,170,171,172,186,226,],[119,119,119,119,-68,-69,-70,-71,-72,-73,-74,-75,-76,119,119,119,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,31,77,190,201,218,233,],[9,9,40,40,40,40,40,40,40,]),'block':([22,26,161,185,207,209,211,222,223,230,234,],[24,75,190,201,218,219,221,228,229,233,236,]),'body':([25,31,77,190,201,218,233,],[27,78,110,204,214,227,235,]),'lines':([25,31,77,190,201,218,233,],[28,28,28,28,28,28,28,]),'if':([25,31,77,190,201,218,233,],[29,29,29,29,29,29,29,]),'loop':([25,31,77,190,201,218,233,],[30,30,30,30,30,30,30,]),'function':([25,31,77,190,201,218,233,],[31,31,31,31,31,31,31,]),'assignment':([25,31,77,105,190,201,215,218,233,],[32,32,32,151,32,32,224,32,32,]),'expression':([25,31,37,48,77,91,92,94,96,97,132,178,180,190,201,218,233,],[33,33,82,103,33,136,139,142,145,146,177,136,136,33,33,33,33,]),'declaration':([25,31,77,173,174,190,197,198,201,210,218,233,],[34,34,34,195,195,34,195,195,34,195,34,34,]),'return':([25,31,77,190,201,218,233,],[35,35,35,35,35,35,35,]),'while_loop':([25,31,77,190,201,218,233,],[38,38,38,38,38,38,38,]),'loop_for':([25,31,77,190,201,218,233,],[39,39,39,39,39,39,39,]),'data_type':([25,31,40,77,88,105,109,173,174,190,197,198,201,210,215,218,233,],[41,41,86,41,130,152,159,193,193,41,193,193,41,193,152,41,41,]),'names':([25,31,37,48,77,79,80,86,87,91,92,94,96,97,98,99,130,131,132,178,180,190,201,218,233,],[42,42,42,42,42,42,42,126,129,133,42,42,42,42,42,42,175,176,42,133,133,42,42,42,42,]),'indexing':([25,31,37,48,77,79,80,81,91,92,94,96,97,98,99,104,105,115,132,162,172,178,180,186,190,201,215,218,226,233,],[44,44,85,85,44,85,85,121,85,85,85,85,85,85,85,121,154,121,85,121,121,85,85,121,44,44,154,44,121,44,]),'object_access':([25,31,37,48,77,79,80,81,91,92,94,96,97,98,99,104,115,132,162,172,178,180,186,190,201,218,226,233,],[45,45,45,45,45,112,112,123,45,45,45,45,45,112,112,123,123,45,123,123,45,45,123,45,45,45,123,45,]),'term':([25,31,37,48,77,79,80,91,92,94,96,97,132,178,180,190,201,218,233,],[46,46,46,46,46,111,114,46,46,46,46,46,46,46,46,46,46,46,46,]),'type':([25,31,37,47,48,77,79,80,81,91,92,94,96,97,98,99,104,115,132,162,172,178,180,186,190,201,216,218,226,233,],[49,49,49,100,102,49,49,49,122,49,49,49,49,49,49,49,122,122,49,122,122,49,49,122,49,49,225,49,122,49,]),'primitive':([25,31,40,77,88,105,109,173,174,190,197,198,201,210,215,218,233,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'data_structure':([25,31,40,77,88,105,109,173,174,190,197,198,201,210,215,218,233,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'factor':([25,31,37,48,77,79,80,91,92,94,96,97,98,99,132,178,180,190,201,218,233,],[56,56,56,56,56,56,56,56,56,56,56,56,148,149,56,56,56,56,56,56,56,]),'data_structure_list':([25,31,40,77,88,105,109,173,174,190,197,198,201,210,215,218,233,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'data_structure_array':([25,31,40,77,88,105,109,173,174,190,197,198,201,210,215,218,233,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'function_call':([25,31,37,48,77,79,80,91,92,94,96,97,98,99,132,178,180,190,201,218,233,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'logical_expression':([81,104,115,162,172,186,226,],[116,150,160,191,192,202,232,]),'logical_factor':([81,104,115,162,172,186,226,],[117,117,117,117,117,117,117,]),'arguments':([91,178,180,],[135,199,200,]),'logical_operator':([116,117,150,160,191,192,202,232,],[162,172,162,162,162,162,162,162,]),'declarations':([173,174,197,198,210,],[194,196,212,213,220,]),'elseif':([190,236,],[205,237,]),'else':([190,236,],[206,238,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',43),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',44),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',48),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',49),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',53),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',57),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',60),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',61),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',65),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',66),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',67),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',68),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',91),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',96),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',97),
  ('body -> if','body',1,'p_body','PLY_yacc.py',98),
  ('body -> loop','body',1,'p_body','PLY_yacc.py',99),
  ('body -> function','body',1,'p_body','PLY_yacc.py',100),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',104),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',105),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',106),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',107),
  ('names -> ID','names',1,'p_names','PLY_yacc.py',116),
  ('names -> CLASSOBJECT','names',1,'p_names','PLY_yacc.py',117),
  ('function -> modifier data_type names LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',121),
  ('function -> modifier VOID names LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',122),
  ('function -> modifier STATIC data_type names LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',123),
  ('function -> modifier STATIC VOID names LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',124),
  ('function -> function body','function',2,'p_funtion','PLY_yacc.py',125),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',148),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',149),
  ('return -> RETURN expression','return',2,'p_return','PLY_yacc.py',150),
  ('function_call -> names LPAREN RPAREN','function_call',3,'p_function_call','PLY_yacc.py',153),
  ('function_call -> names LPAREN arguments RPAREN','function_call',4,'p_function_call','PLY_yacc.py',154),
  ('arguments -> expression','arguments',1,'p_arguments','PLY_yacc.py',157),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','PLY_yacc.py',158),
  ('arguments -> names','arguments',1,'p_arguments','PLY_yacc.py',159),
  ('arguments -> names COMMA arguments','arguments',3,'p_arguments','PLY_yacc.py',160),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',166),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',167),
  ('expression -> object_access LPAREN expression RPAREN','expression',4,'p_console_writeline','PLY_yacc.py',170),
  ('expression -> object_access LPAREN RPAREN','expression',3,'p_console_readline','PLY_yacc.py',177),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',186),
  ('if -> IF LPAREN logical_expression RPAREN block body','if',6,'p_if','PLY_yacc.py',187),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',188),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',189),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',197),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',198),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',199),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',207),
  ('else -> ELSE block body','else',3,'p_else','PLY_yacc.py',208),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',212),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',213),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',218),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body','loop_for',10,'p_loop_for','PLY_yacc.py',219),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',224),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block body','while_loop',6,'p_while_loop','PLY_yacc.py',225),
  ('logical_expression -> logical_factor logical_operator logical_expression','logical_expression',3,'p_logical_expression','PLY_yacc.py',234),
  ('logical_expression -> logical_expression logical_operator logical_expression','logical_expression',3,'p_logical_expression','PLY_yacc.py',235),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',236),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',278),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',279),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',280),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',281),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',282),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',283),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',284),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',305),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',306),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',307),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',308),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',309),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',310),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',311),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',312),
  ('logical_operator -> DIFFERENT','logical_operator',1,'p_logical_operator','PLY_yacc.py',313),
  ('data_structure -> data_structure_list','data_structure',1,'p_data_structure','PLY_yacc.py',319),
  ('data_structure -> data_structure_array','data_structure',1,'p_data_structure','PLY_yacc.py',320),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET','data_structure_list',8,'p_data_structure_list','PLY_yacc.py',324),
  ('data_structure_array -> primitive LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',330),
  ('data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',331),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',335),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',348),
  ('assignment -> indexing EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',349),
  ('assignment -> ID PLUSONE','assignment',2,'p_assignment_plus_one','PLY_yacc.py',365),
  ('assignment_class -> CLASSOBJECT ID','assignment_class',2,'p_assignment_class','PLY_yacc.py',379),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',389),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',390),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',391),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',407),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',408),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',409),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',424),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',425),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',426),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',427),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',428),
  ('factor -> function_call','factor',1,'p_factor','PLY_yacc.py',429),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',446),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',447),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',448),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',449),
  ('type -> MINUS type','type',2,'p_type','PLY_yacc.py',450),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',468),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',469),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',470),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',481),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',493),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',494),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',495),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',496),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',500),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',501),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',506),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',507),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',508),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',509),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',510),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',511),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',512),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',513),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',514),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',515),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',516),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',523),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',524),
  ('indexing -> ID LSQBRACKET expression RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',525),
]
