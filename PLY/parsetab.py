
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NEW NINT NOT NUINT OR PLUS PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : bodybody : lines SEMICOLON\n            | lines SEMICOLON bodyfunction : modifier data_type ID LPAREN declaration RPAREN block\n                | modifier VOID ID LPAREN declaration RPAREN blockusing : USING CLASSOBJECT SEMICOLON return : RETURN ID\n               | RETURN typetype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPEblock : LBRACKET body RBRACKETif : IF LPAREN logical_expression RPAREN blockelseif : if ELSE LBRACKET body RBRACKETwhile_loop : WHILE LPAREN logical_expression RPAREN blocklogical_expression : logical_expression logical_operator logical_factor\n        | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | logical_expressionlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THANclass : modifier CLASS CLASSOBJECT blockmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNALdata_type : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTlines : assignment \n    | expression \n    | declarationassignment : ID EQUALS expression\n                  | data_type ID EQUALS expression\n                  | ID EQUALS IDdeclaration : data_type IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : INTEGER_TYPE\n    | LPAREN expression RPAREN'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,68,69,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,70,],[10,10,-6,10,10,]),'PRIVATE':([3,7,20,25,70,],[11,11,-6,11,11,]),'PROTECTED':([3,7,20,25,70,],[12,12,-6,12,12,]),'INTERNAL':([3,7,20,25,70,],[13,13,-6,13,13,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,36,39,70,75,78,79,85,103,123,124,144,145,152,],[15,16,-68,-69,-70,-71,22,26,40,76,83,40,76,83,107,111,83,76,76,76,76,76,]),'CLASS':([9,10,11,12,13,19,],[18,-68,-69,-70,-71,23,]),'STATIC':([9,10,11,12,13,36,],[19,-68,-69,-70,-71,75,]),'VOID':([10,11,12,13,36,75,],[-68,-69,-70,-71,74,102,]),'INT':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,56,56,56,56,56,56,56,56,56,]),'FLOAT':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,57,57,57,57,57,57,57,57,57,]),'BOOL':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,58,58,58,58,58,58,58,58,58,]),'BYTE':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,59,59,59,59,59,59,59,59,59,]),'CHAR':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,60,60,60,60,60,60,60,60,60,]),'SBYTE':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,61,61,61,61,61,61,61,61,61,]),'DECIMAL':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,62,62,62,62,62,62,62,62,62,]),'DOUBLE':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,63,63,63,63,63,63,63,63,63,]),'LONG':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,64,64,64,64,64,64,64,64,64,]),'SHORT':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,65,65,65,65,65,65,65,65,65,]),'UINT':([10,11,12,13,25,36,70,75,123,124,144,145,152,],[-68,-69,-70,-71,66,66,66,66,66,66,66,66,66,]),'SEMICOLON':([15,16,28,30,31,32,33,34,35,38,41,42,43,44,46,50,51,52,53,54,69,77,82,84,90,91,92,96,97,98,104,105,106,107,110,111,112,114,115,127,128,129,146,149,156,157,165,171,172,173,],[20,21,70,-17,-18,-19,-20,-21,-22,-60,-58,-59,-61,-62,-40,-65,-32,-29,-30,-31,-13,-55,-60,-50,-27,-28,-32,-56,-66,-57,-51,-48,-9,-11,-67,-10,-12,-63,-64,-49,-89,-88,-33,-41,-34,-35,-39,-36,-37,-38,]),'LBRACKET':([22,26,130,139,151,153,158,162,163,170,],[25,25,25,25,25,25,25,25,25,25,]),'ID':([25,37,39,40,47,48,49,56,57,58,59,60,61,62,63,64,65,66,67,70,73,74,78,79,80,85,89,94,101,102,103,113,121,131,132,133,134,135,136,137,138,140,168,],[38,77,82,84,90,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,38,99,100,104,106,108,112,120,120,125,126,82,-87,-86,120,-90,-91,-92,-93,-94,-95,-96,150,120,]),'IF':([25,70,158,],[45,45,164,]),'RETURN':([25,70,],[47,47,]),'FLOAT_TYPE':([25,39,47,70,78,103,],[52,52,52,52,52,52,]),'DOUBLE_TYPE':([25,39,47,70,78,103,],[53,53,53,53,53,53,]),'DECIMAL_TYPE':([25,39,47,70,78,103,],[54,54,54,54,54,54,]),'INTEGER_TYPE':([25,39,47,70,71,72,78,80,87,88,103,],[51,51,92,51,97,97,51,109,97,97,51,]),'WHILE':([25,70,],[55,55,]),'LPAREN':([25,39,45,55,70,71,72,78,87,88,99,100,103,125,126,164,],[39,39,89,94,39,39,39,39,39,39,123,124,39,144,145,168,]),'RBRACKET':([27,29,69,70,95,159,161,166,167,],[69,-16,-13,-14,-15,-23,-24,-25,-26,]),'PLUS':([31,38,41,42,43,44,50,51,52,53,54,81,82,96,97,98,104,105,106,107,110,111,112,114,115,127,128,129,],[71,-60,-58,-59,-61,-62,-65,-32,-29,-30,-31,71,-60,-56,-66,-57,-60,71,-9,-11,-67,-10,-12,-63,-64,71,-89,-88,]),'MINUS':([31,38,41,42,43,44,50,51,52,53,54,81,82,96,97,98,104,105,106,107,110,111,112,114,115,127,128,129,],[72,-60,-58,-59,-61,-62,-65,-32,-29,-30,-31,72,-60,-56,-66,-57,-60,72,-9,-11,-67,-10,-12,-63,-64,72,-89,-88,]),'EQUALS':([38,77,],[78,103,]),'DOT':([38,40,82,83,104,],[79,85,79,85,79,]),'LSQBRACKET':([38,40,48,56,57,58,59,60,61,62,63,64,65,66,76,82,104,],[80,86,93,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,86,80,80,]),'RPAREN':([41,42,43,44,50,51,52,53,54,81,82,96,97,98,106,107,110,111,112,114,115,116,117,118,119,120,122,128,129,141,142,143,147,148,150,152,154,155,160,169,],[-58,-59,-61,-62,-65,-32,-29,-30,-31,110,-60,-56,-66,-57,-9,-11,-67,-10,-12,-63,-64,130,-43,-44,-45,-46,139,-89,-88,151,-52,153,-47,-42,-55,-53,162,163,-54,170,]),'TIMES':([41,50,51,96,97,98,110,114,115,],[87,-65,-66,87,-66,87,-67,-63,-64,]),'DIVIDE':([41,50,51,96,97,98,110,114,115,],[88,-65,-66,88,-66,88,-67,-63,-64,]),'ELSE':([69,146,171,],[-13,158,158,]),'RSQBRACKET':([86,93,108,109,],[113,121,128,129,]),'TRUE':([89,94,131,132,133,134,135,136,137,138,168,],[118,118,118,-90,-91,-92,-93,-94,-95,-96,118,]),'FALSE':([89,94,131,132,133,134,135,136,137,138,168,],[119,119,119,-90,-91,-92,-93,-94,-95,-96,119,]),'OR':([116,117,118,119,120,122,147,148,169,],[132,-43,-44,-45,-46,132,132,-42,132,]),'AND':([116,117,118,119,120,122,147,148,169,],[133,-43,-44,-45,-46,133,133,-42,133,]),'NOT':([116,117,118,119,120,122,147,148,169,],[134,-43,-44,-45,-46,134,134,-42,134,]),'GREATER_THAN':([116,117,118,119,120,122,147,148,169,],[135,-43,-44,-45,-46,135,135,-42,135,]),'LESS_THAN':([116,117,118,119,120,122,147,148,169,],[136,-43,-44,-45,-46,136,136,-42,136,]),'GREATER_EQUALS_THAN':([116,117,118,119,120,122,147,148,169,],[137,-43,-44,-45,-46,137,137,-42,137,]),'LESS_EQUALS_THAN':([116,117,118,119,120,122,147,148,169,],[138,-43,-44,-45,-46,138,138,-42,138,]),'COMMA':([142,150,],[152,-55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,70,],[9,9,36,36,]),'block':([22,26,130,139,151,153,158,162,163,170,],[24,68,146,149,159,161,165,166,167,171,]),'body':([25,70,],[27,95,]),'lines':([25,70,],[28,28,]),'function':([25,70,],[29,29,]),'assignment':([25,70,],[30,30,]),'expression':([25,39,70,78,103,],[31,81,31,105,127,]),'declaration':([25,70,123,124,144,145,152,],[32,32,142,142,142,142,142,]),'if':([25,70,],[33,33,]),'loop':([25,70,],[34,34,]),'return':([25,70,],[35,35,]),'data_type':([25,36,70,75,123,124,144,145,152,],[37,73,37,101,140,140,140,140,140,]),'term':([25,39,70,71,72,78,103,],[41,41,41,96,98,41,41,]),'object_access':([25,39,70,78,103,],[42,42,42,42,42,]),'index':([25,39,70,78,103,],[43,43,43,43,43,]),'type':([25,39,47,70,78,103,],[44,44,91,44,44,44,]),'while_loop':([25,70,],[46,46,]),'primitive':([25,36,70,75,123,124,144,145,152,],[48,48,48,48,48,48,48,48,48,]),'data_structure':([25,36,70,75,123,124,144,145,152,],[49,49,49,49,49,49,49,49,49,]),'factor':([25,39,70,71,72,78,87,88,103,],[50,50,50,50,50,50,114,115,50,]),'array':([25,36,70,75,123,124,144,145,152,],[67,67,67,67,67,67,67,67,67,]),'logical_expression':([89,94,131,168,],[116,122,147,169,]),'logical_factor':([89,94,131,168,],[117,117,148,117,]),'logical_operator':([116,122,147,169,],[131,131,131,131,]),'declarations':([123,124,144,145,152,],[141,143,154,155,160,]),'elseif':([146,171,],[156,172,]),'else':([146,171,],[157,173,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> body','program',1,'p_program','PLY_yacc.py',19),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',23),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',24),
  ('function -> modifier data_type ID LPAREN declaration RPAREN block','function',7,'p_funtion','PLY_yacc.py',27),
  ('function -> modifier VOID ID LPAREN declaration RPAREN block','function',7,'p_funtion','PLY_yacc.py',28),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',31),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',34),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',35),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',38),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',39),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',40),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',41),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',44),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',47),
  ('elseif -> if ELSE LBRACKET body RBRACKET','elseif',5,'p_elseif','PLY_yacc.py',50),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',53),
  ('logical_expression -> logical_expression logical_operator logical_factor','logical_expression',3,'p_logical_expression','PLY_yacc.py',56),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',57),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',60),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',61),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',62),
  ('logical_factor -> logical_expression','logical_factor',1,'p_logical_factor','PLY_yacc.py',63),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',66),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',67),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',68),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',69),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',70),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',71),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',72),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',75),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',78),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',79),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',80),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',81),
  ('data_type -> INT','data_type',1,'p_data_type','PLY_yacc.py',84),
  ('data_type -> FLOAT','data_type',1,'p_data_type','PLY_yacc.py',85),
  ('data_type -> BOOL','data_type',1,'p_data_type','PLY_yacc.py',86),
  ('data_type -> BYTE','data_type',1,'p_data_type','PLY_yacc.py',87),
  ('data_type -> CHAR','data_type',1,'p_data_type','PLY_yacc.py',88),
  ('data_type -> SBYTE','data_type',1,'p_data_type','PLY_yacc.py',89),
  ('data_type -> DECIMAL','data_type',1,'p_data_type','PLY_yacc.py',90),
  ('data_type -> DOUBLE','data_type',1,'p_data_type','PLY_yacc.py',91),
  ('data_type -> LONG','data_type',1,'p_data_type','PLY_yacc.py',92),
  ('data_type -> SHORT','data_type',1,'p_data_type','PLY_yacc.py',93),
  ('data_type -> UINT','data_type',1,'p_data_type','PLY_yacc.py',94),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',98),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',99),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',100),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','PLY_yacc.py',104),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',105),
  ('assignment -> ID EQUALS ID','assignment',3,'p_assignment','PLY_yacc.py',106),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',109),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',112),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',113),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',114),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',117),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',118),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',119),
  ('factor -> INTEGER_TYPE','factor',1,'p_factor_num','PLY_yacc.py',122),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_num','PLY_yacc.py',123),
]
