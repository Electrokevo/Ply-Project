
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | functionlines : assignment \n    | expression \n    | declaration\n    | if\n    | loop\n    | returnfunction : modifier data_type ID LPAREN declarations RPAREN block\n                | modifier VOID ID LPAREN declarations RPAREN block\n                | modifier STATIC data_type ID LPAREN declarations RPAREN block\n                | modifier STATIC VOID ID LPAREN declarations RPAREN blockreturn : RETURN ID\n               | RETURN typelambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blocktype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPEif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE blockloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN blockwhile_loop : WHILE LPAREN logical_expression RPAREN blocklogical_expression : logical_expression logical_operator logical_factor\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITYdata_structure_list : LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKETassignment : ID EQUALS expression\n                  | data_type ID EQUALS expression\n                  | CLASSOBJECT IDdeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | object_access\n    | ID\n    | indexingmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTdata_structure : arrayarray : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,70,71,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,72,],[10,10,-6,10,10,]),'PRIVATE':([3,7,20,25,72,],[11,11,-6,11,11,]),'PROTECTED':([3,7,20,25,72,],[12,12,-6,12,12,]),'INTERNAL':([3,7,20,25,72,],[13,13,-6,13,13,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,36,39,72,73,74,77,80,81,88,89,90,91,95,96,104,116,131,132,140,141,142,143,144,145,146,147,148,150,156,157,165,172,183,],[15,16,-82,-83,-84,-85,22,26,40,78,85,40,85,85,78,85,107,112,85,85,85,85,130,85,85,78,78,85,-55,-56,-57,-58,-59,-60,-61,-62,85,78,78,78,130,85,]),'CLASS':([9,10,11,12,13,19,],[18,-82,-83,-84,-85,23,]),'STATIC':([9,10,11,12,13,36,],[19,-82,-83,-84,-85,77,]),'VOID':([10,11,12,13,36,77,],[-82,-83,-84,-85,76,103,]),'INT':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,52,52,52,52,52,52,52,52,52,52,52,]),'FLOAT':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,53,53,53,53,53,53,53,53,53,53,53,]),'BOOL':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,54,54,54,54,54,54,54,54,54,54,54,]),'BYTE':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,55,55,55,55,55,55,55,55,55,55,55,]),'CHAR':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,56,56,56,56,56,56,56,56,56,56,56,]),'SBYTE':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,57,57,57,57,57,57,57,57,57,57,57,]),'DECIMAL':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,58,58,58,58,58,58,58,58,58,58,58,]),'DOUBLE':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,59,59,59,59,59,59,59,59,59,59,59,]),'LONG':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,60,60,60,60,60,60,60,60,60,60,60,]),'SHORT':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,61,61,61,61,61,61,61,61,61,61,61,]),'UINT':([10,11,12,13,25,36,72,77,96,131,132,156,157,165,172,],[-82,-83,-84,-85,62,62,62,62,62,62,62,62,62,62,62,]),'SEMICOLON':([15,16,28,30,31,32,33,34,35,38,41,43,44,46,49,64,65,66,67,68,69,71,79,84,86,92,93,98,99,105,106,107,110,112,113,114,115,118,119,120,121,122,123,124,127,135,136,137,158,159,160,161,162,169,170,179,186,188,189,190,],[20,21,72,-17,-18,-19,-20,-21,-22,-80,-73,-42,-43,-77,-76,-79,-81,-31,-32,-33,-34,-13,-70,-80,-66,-27,-28,-71,-72,-64,-9,-11,-78,-10,-12,-74,-75,-47,-48,-49,-50,-51,-52,-53,150,-65,-103,-102,-54,-35,-46,-45,172,-36,-37,-41,-44,-38,-39,-40,]),'LBRACKET':([22,26,139,149,164,166,171,176,177,184,187,],[25,25,25,25,25,25,25,25,25,25,25,]),'ID':([25,37,39,40,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,76,80,81,82,88,89,90,91,95,96,102,103,104,111,116,125,129,130,140,141,142,143,144,145,146,147,148,150,152,172,183,],[38,79,84,86,92,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,38,84,84,100,101,84,106,108,113,84,84,121,121,128,133,134,84,-101,121,-100,151,86,121,-55,-56,-57,-58,-59,-60,-61,-62,121,163,128,121,]),'IF':([25,72,171,],[42,42,178,]),'RETURN':([25,72,],[45,45,]),'WHILE':([25,72,],[50,50,]),'FOR':([25,72,],[51,51,]),'LPAREN':([25,39,42,50,51,72,73,74,80,89,90,91,95,100,101,104,116,133,134,140,141,142,143,144,145,146,147,148,150,178,183,],[39,39,91,95,96,39,39,39,39,39,39,116,116,131,132,39,116,156,157,116,-55,-56,-57,-58,-59,-60,-61,-62,116,183,116,]),'FLOAT_TYPE':([25,39,45,72,73,74,80,89,90,91,95,104,116,140,141,142,143,144,145,146,147,148,150,183,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,-55,-56,-57,-58,-59,-60,-61,-62,66,66,]),'DOUBLE_TYPE':([25,39,45,72,73,74,80,89,90,91,95,104,116,140,141,142,143,144,145,146,147,148,150,183,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,-55,-56,-57,-58,-59,-60,-61,-62,67,67,]),'DECIMAL_TYPE':([25,39,45,72,73,74,80,89,90,91,95,104,116,140,141,142,143,144,145,146,147,148,150,183,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,-55,-56,-57,-58,-59,-60,-61,-62,68,68,]),'INTEGER_TYPE':([25,39,45,72,73,74,80,82,89,90,91,95,104,116,140,141,142,143,144,145,146,147,148,150,183,],[69,69,69,69,69,69,69,109,69,69,69,69,69,69,69,-55,-56,-57,-58,-59,-60,-61,-62,69,69,]),'RBRACKET':([27,29,71,72,97,173,175,181,182,],[71,-16,-13,-14,-15,-23,-24,-25,-26,]),'PLUS':([31,38,41,46,49,64,65,66,67,68,69,83,84,98,99,105,106,107,110,112,113,114,115,135,136,137,],[73,-80,-73,-77,-76,-79,-81,-31,-32,-33,-34,73,-80,-71,-72,73,-9,-11,-78,-10,-12,-74,-75,73,-103,-102,]),'MINUS':([31,38,41,46,49,64,65,66,67,68,69,83,84,98,99,105,106,107,110,112,113,114,115,135,136,137,],[74,-80,-73,-77,-76,-79,-81,-31,-32,-33,-34,74,-80,-71,-72,74,-9,-11,-78,-10,-12,-74,-75,74,-103,-102,]),'EQUALS':([38,79,128,151,],[80,104,80,104,]),'TIMES':([38,41,46,49,64,65,66,67,68,69,84,98,99,106,107,110,112,113,114,115,136,137,],[-80,89,-77,-76,-79,-81,-31,-32,-33,-34,-80,89,89,-9,-11,-78,-10,-12,-74,-75,-103,-102,]),'DIVIDE':([38,41,46,49,64,65,66,67,68,69,84,98,99,106,107,110,112,113,114,115,136,137,],[-80,90,-77,-76,-79,-81,-31,-32,-33,-34,-80,90,90,-9,-11,-78,-10,-12,-74,-75,-103,-102,]),'DOT':([38,40,84,85,121,],[81,88,81,88,81,]),'LSQBRACKET':([38,40,47,52,53,54,55,56,57,58,59,60,61,62,78,84,121,130,],[82,87,94,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,87,82,82,87,]),'RPAREN':([41,46,49,64,65,66,67,68,69,83,84,86,98,99,105,106,107,110,112,113,114,115,117,118,119,120,121,122,123,124,126,135,136,137,138,153,154,155,158,160,163,165,167,168,174,180,185,],[-73,-77,-76,-79,-81,-31,-32,-33,-34,110,-80,-66,-71,-72,-64,-9,-11,-78,-10,-12,-74,-75,139,-47,-48,-49,-50,-51,-52,-53,149,-65,-103,-102,158,164,-67,166,-54,-46,-70,-68,176,177,-69,184,187,]),'OR':([66,67,68,69,106,107,112,113,117,118,119,120,121,122,123,124,126,136,137,138,158,160,162,185,],[-31,-32,-33,-34,-9,-11,-10,-12,141,-47,-48,-49,-50,-51,-52,-53,141,-103,-102,141,-54,-46,141,141,]),'AND':([66,67,68,69,106,107,112,113,117,118,119,120,121,122,123,124,126,136,137,138,158,160,162,185,],[-31,-32,-33,-34,-9,-11,-10,-12,142,-47,-48,-49,-50,-51,-52,-53,142,-103,-102,142,-54,-46,142,142,]),'NOT':([66,67,68,69,106,107,112,113,117,118,119,120,121,122,123,124,126,136,137,138,158,160,162,185,],[-31,-32,-33,-34,-9,-11,-10,-12,143,-47,-48,-49,-50,-51,-52,-53,143,-103,-102,143,-54,-46,143,143,]),'GREATER_THAN':([66,67,68,69,106,107,112,113,117,118,119,120,121,122,123,124,126,136,137,138,158,160,162,185,],[-31,-32,-33,-34,-9,-11,-10,-12,144,-47,-48,-49,-50,-51,-52,-53,144,-103,-102,144,-54,-46,144,144,]),'LESS_THAN':([66,67,68,69,106,107,112,113,117,118,119,120,121,122,123,124,126,136,137,138,158,160,162,185,],[-31,-32,-33,-34,-9,-11,-10,-12,145,-47,-48,-49,-50,-51,-52,-53,145,-103,-102,145,-54,-46,145,145,]),'GREATER_EQUALS_THAN':([66,67,68,69,106,107,112,113,117,118,119,120,121,122,123,124,126,136,137,138,158,160,162,185,],[-31,-32,-33,-34,-9,-11,-10,-12,146,-47,-48,-49,-50,-51,-52,-53,146,-103,-102,146,-54,-46,146,146,]),'LESS_EQUALS_THAN':([66,67,68,69,106,107,112,113,117,118,119,120,121,122,123,124,126,136,137,138,158,160,162,185,],[-31,-32,-33,-34,-9,-11,-10,-12,147,-47,-48,-49,-50,-51,-52,-53,147,-103,-102,147,-54,-46,147,147,]),'EQUALITY':([66,67,68,69,106,107,112,113,117,118,119,120,121,122,123,124,126,136,137,138,158,160,162,185,],[-31,-32,-33,-34,-9,-11,-10,-12,148,-47,-48,-49,-50,-51,-52,-53,148,-103,-102,148,-54,-46,148,148,]),'ELSE':([71,159,188,],[-13,171,171,]),'RSQBRACKET':([87,94,108,109,],[111,125,136,137,]),'TRUE':([91,95,116,140,141,142,143,144,145,146,147,148,150,183,],[119,119,119,119,-55,-56,-57,-58,-59,-60,-61,-62,119,119,]),'FALSE':([91,95,116,140,141,142,143,144,145,146,147,148,150,183,],[120,120,120,120,-55,-56,-57,-58,-59,-60,-61,-62,120,120,]),'COMMA':([154,163,],[165,-70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,72,],[9,9,36,36,]),'block':([22,26,139,149,164,166,171,176,177,184,187,],[24,70,159,161,173,175,179,181,182,186,188,]),'body':([25,72,],[27,97,]),'lines':([25,72,],[28,28,]),'function':([25,72,],[29,29,]),'assignment':([25,72,96,172,],[30,30,127,180,]),'expression':([25,39,72,80,104,],[31,83,31,105,135,]),'declaration':([25,72,131,132,156,157,165,],[32,32,154,154,154,154,154,]),'if':([25,72,],[33,33,]),'loop':([25,72,],[34,34,]),'return':([25,72,],[35,35,]),'data_type':([25,36,72,77,96,131,132,156,157,165,172,],[37,75,37,102,129,152,152,152,152,152,129,]),'term':([25,39,72,73,74,80,104,],[41,41,41,98,99,41,41,]),'while_loop':([25,72,],[43,43,]),'loop_for':([25,72,],[44,44,]),'type':([25,39,45,72,73,74,80,89,90,91,95,104,116,140,150,183,],[46,46,93,46,46,46,46,46,46,123,123,46,123,123,123,123,]),'primitive':([25,36,72,77,96,131,132,156,157,165,172,],[47,47,47,47,47,47,47,47,47,47,47,]),'data_structure':([25,36,72,77,96,131,132,156,157,165,172,],[48,48,48,48,48,48,48,48,48,48,48,]),'factor':([25,39,72,73,74,80,89,90,104,],[49,49,49,49,49,49,114,115,49,]),'array':([25,36,72,77,96,131,132,156,157,165,172,],[63,63,63,63,63,63,63,63,63,63,63,]),'object_access':([25,39,72,73,74,80,89,90,91,95,104,116,140,150,183,],[64,64,64,64,64,64,64,64,124,124,64,124,124,124,124,]),'indexing':([25,39,72,73,74,80,89,90,91,95,104,116,140,150,183,],[65,65,65,65,65,65,65,65,122,122,65,122,122,122,122,]),'logical_expression':([91,95,116,150,183,],[117,126,138,162,185,]),'logical_factor':([91,95,116,140,150,183,],[118,118,118,160,118,118,]),'logical_operator':([117,126,138,162,185,],[140,140,140,140,140,]),'declarations':([131,132,156,157,165,],[153,155,167,168,174,]),'elseif':([159,188,],[169,189,]),'else':([159,188,],[170,190,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',26),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',27),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',31),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',32),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',36),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',40),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',43),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',44),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',48),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',49),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',50),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',51),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',54),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',58),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',59),
  ('body -> function','body',1,'p_body','PLY_yacc.py',60),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',64),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',65),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',66),
  ('lines -> if','lines',1,'p_lines','PLY_yacc.py',67),
  ('lines -> loop','lines',1,'p_lines','PLY_yacc.py',68),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',69),
  ('function -> modifier data_type ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',73),
  ('function -> modifier VOID ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',74),
  ('function -> modifier STATIC data_type ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',75),
  ('function -> modifier STATIC VOID ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',76),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',79),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',80),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',84),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',85),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',89),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',90),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',91),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',92),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',95),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',96),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',97),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',100),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',101),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',102),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',105),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',108),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',109),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',113),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',117),
  ('logical_expression -> logical_expression logical_operator logical_factor','logical_expression',3,'p_logical_expression','PLY_yacc.py',120),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',121),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',124),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',125),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',126),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',127),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',128),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',129),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',130),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',133),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',134),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',135),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',136),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',137),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',138),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',139),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',140),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET','data_structure_list',8,'p_data_structure_list','PLY_yacc.py',149),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','PLY_yacc.py',153),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',154),
  ('assignment -> CLASSOBJECT ID','assignment',2,'p_assignment','PLY_yacc.py',155),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',158),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',159),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',160),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',163),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',166),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',167),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',168),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',171),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',172),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',173),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',183),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',184),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',185),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',186),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',187),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',194),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',195),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',196),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',197),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',200),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',201),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',204),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',205),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',206),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',207),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',208),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',209),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',210),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',211),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',212),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',213),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',214),
  ('data_structure -> array','data_structure',1,'p_data_structure','PLY_yacc.py',217),
  ('array -> primitive LSQBRACKET RSQBRACKET','array',3,'p_array','PLY_yacc.py',220),
  ('array -> CLASSOBJECT LSQBRACKET RSQBRACKET','array',3,'p_array','PLY_yacc.py',221),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',224),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',225),
]
