
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | functionlines : assignment \n    | expression \n    | declaration\n    | if\n    | loop\n    | returnfunction : modifier data_type ID LPAREN declarations RPAREN block\n                | modifier VOID ID LPAREN declarations RPAREN block\n                | modifier STATIC data_type ID LPAREN declarations RPAREN block\n                | modifier STATIC VOID ID LPAREN declarations RPAREN blockreturn : RETURN ID\n               | RETURN typelambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blocktype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPEif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE blockloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN blockwhile_loop : WHILE LPAREN logical_expression RPAREN blocklogical_expression : logical_expression logical_operator logical_factor\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITYdata_structure : data_structure_list\n                      | data_structure_arraydata_structure_list : LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKETassignment : ID EQUALS expression\n                  | data_type ID EQUALS expression\n                  | CLASSOBJECT IDdeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | object_access\n    | ID\n    | indexingmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTdata_structure_array : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,72,73,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,74,],[10,10,-6,10,10,]),'PRIVATE':([3,7,20,25,74,],[11,11,-6,11,11,]),'PROTECTED':([3,7,20,25,74,],[12,12,-6,12,12,]),'INTERNAL':([3,7,20,25,74,],[13,13,-6,13,13,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,36,39,74,75,76,79,82,83,90,91,92,93,97,98,99,107,119,135,136,144,145,146,147,148,149,150,151,152,154,161,162,171,178,191,],[15,16,-84,-85,-86,-87,22,26,40,80,87,40,87,87,80,87,110,115,87,87,87,87,133,80,87,87,80,80,87,-55,-56,-57,-58,-59,-60,-61,-62,87,80,80,80,133,87,]),'CLASS':([9,10,11,12,13,19,],[18,-84,-85,-86,-87,23,]),'STATIC':([9,10,11,12,13,36,],[19,-84,-85,-86,-87,79,]),'VOID':([10,11,12,13,36,79,],[-84,-85,-86,-87,78,106,]),'INT':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,52,52,52,52,52,52,52,52,52,52,52,52,]),'FLOAT':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,53,53,53,53,53,53,53,53,53,53,53,53,]),'BOOL':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,54,54,54,54,54,54,54,54,54,54,54,54,]),'BYTE':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,55,55,55,55,55,55,55,55,55,55,55,55,]),'CHAR':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,56,56,56,56,56,56,56,56,56,56,56,56,]),'SBYTE':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,57,57,57,57,57,57,57,57,57,57,57,57,]),'DECIMAL':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,58,58,58,58,58,58,58,58,58,58,58,58,]),'DOUBLE':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,59,59,59,59,59,59,59,59,59,59,59,59,]),'LONG':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,60,60,60,60,60,60,60,60,60,60,60,60,]),'SHORT':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,61,61,61,61,61,61,61,61,61,61,61,61,]),'UINT':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,62,62,62,62,62,62,62,62,62,62,62,62,]),'LIST':([10,11,12,13,25,36,74,79,98,99,135,136,161,162,171,178,],[-84,-85,-86,-87,67,67,67,67,67,67,67,67,67,67,67,67,]),'SEMICOLON':([15,16,28,30,31,32,33,34,35,38,41,43,44,46,49,65,66,68,69,70,71,73,81,86,88,94,95,101,102,108,109,110,113,115,116,117,118,121,122,123,124,125,126,127,130,139,140,141,163,164,165,166,167,175,176,186,195,197,198,199,],[20,21,74,-17,-18,-19,-20,-21,-22,-82,-75,-42,-43,-79,-78,-81,-83,-31,-32,-33,-34,-13,-72,-82,-68,-27,-28,-73,-74,-66,-9,-11,-80,-10,-12,-76,-77,-47,-48,-49,-50,-51,-52,-53,154,-67,-104,-103,-54,-35,-46,-45,178,-36,-37,-41,-44,-38,-39,-40,]),'LBRACKET':([22,26,143,153,170,172,177,183,184,192,196,],[25,25,25,25,25,25,25,25,25,25,25,]),'ID':([25,37,39,40,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,74,75,76,77,78,82,83,84,90,91,92,93,97,98,105,106,107,114,119,128,132,133,144,145,146,147,148,149,150,151,152,154,156,157,178,191,193,],[38,81,86,88,94,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-63,-64,38,86,86,103,104,86,109,111,116,86,86,124,124,131,137,138,86,-102,124,-101,155,88,124,-55,-56,-57,-58,-59,-60,-61,-62,124,168,169,131,124,-65,]),'IF':([25,74,177,],[42,42,185,]),'RETURN':([25,74,],[45,45,]),'WHILE':([25,74,],[50,50,]),'FOR':([25,74,],[51,51,]),'LPAREN':([25,39,42,50,51,74,75,76,82,91,92,93,97,103,104,107,119,137,138,144,145,146,147,148,149,150,151,152,154,185,191,],[39,39,93,97,98,39,39,39,39,39,39,119,119,135,136,39,119,161,162,119,-55,-56,-57,-58,-59,-60,-61,-62,119,191,119,]),'FLOAT_TYPE':([25,39,45,74,75,76,82,91,92,93,97,107,119,144,145,146,147,148,149,150,151,152,154,179,191,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,-55,-56,-57,-58,-59,-60,-61,-62,68,68,68,]),'DOUBLE_TYPE':([25,39,45,74,75,76,82,91,92,93,97,107,119,144,145,146,147,148,149,150,151,152,154,179,191,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,-55,-56,-57,-58,-59,-60,-61,-62,69,69,69,]),'DECIMAL_TYPE':([25,39,45,74,75,76,82,91,92,93,97,107,119,144,145,146,147,148,149,150,151,152,154,179,191,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,-55,-56,-57,-58,-59,-60,-61,-62,70,70,70,]),'INTEGER_TYPE':([25,39,45,74,75,76,82,84,91,92,93,97,107,119,144,145,146,147,148,149,150,151,152,154,179,191,],[71,71,71,71,71,71,71,112,71,71,71,71,71,71,71,-55,-56,-57,-58,-59,-60,-61,-62,71,71,71,]),'RBRACKET':([27,29,73,74,100,180,182,189,190,],[73,-16,-13,-14,-15,-23,-24,-25,-26,]),'PLUS':([31,38,41,46,49,65,66,68,69,70,71,85,86,101,102,108,109,110,113,115,116,117,118,139,140,141,],[75,-82,-75,-79,-78,-81,-83,-31,-32,-33,-34,75,-82,-73,-74,75,-9,-11,-80,-10,-12,-76,-77,75,-104,-103,]),'MINUS':([31,38,41,46,49,65,66,68,69,70,71,85,86,101,102,108,109,110,113,115,116,117,118,139,140,141,],[76,-82,-75,-79,-78,-81,-83,-31,-32,-33,-34,76,-82,-73,-74,76,-9,-11,-80,-10,-12,-76,-77,76,-104,-103,]),'EQUALS':([38,81,131,155,],[82,107,82,107,]),'TIMES':([38,41,46,49,65,66,68,69,70,71,86,101,102,109,110,113,115,116,117,118,140,141,],[-82,91,-79,-78,-81,-83,-31,-32,-33,-34,-82,91,91,-9,-11,-80,-10,-12,-76,-77,-104,-103,]),'DIVIDE':([38,41,46,49,65,66,68,69,70,71,86,101,102,109,110,113,115,116,117,118,140,141,],[-82,92,-79,-78,-81,-83,-31,-32,-33,-34,-82,92,92,-9,-11,-80,-10,-12,-76,-77,-104,-103,]),'DOT':([38,40,86,87,124,],[83,90,83,90,83,]),'LSQBRACKET':([38,40,47,52,53,54,55,56,57,58,59,60,61,62,80,86,124,133,168,],[84,89,96,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,89,84,84,89,179,]),'RPAREN':([41,46,49,65,66,68,69,70,71,85,86,88,101,102,108,109,110,113,115,116,117,118,120,121,122,123,124,125,126,127,129,139,140,141,142,158,159,160,163,165,169,171,173,174,181,187,194,],[-75,-79,-78,-81,-83,-31,-32,-33,-34,113,-82,-68,-73,-74,-66,-9,-11,-80,-10,-12,-76,-77,143,-47,-48,-49,-50,-51,-52,-53,153,-67,-104,-103,163,170,-69,172,-54,-46,-72,-70,183,184,-71,192,196,]),'GREATER_THAN':([47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,68,69,70,71,109,110,114,115,116,120,121,122,123,124,125,126,127,128,129,134,140,141,142,163,165,167,193,194,],[-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-63,-64,-31,-32,-33,-34,-9,-11,-102,-10,-12,148,-47,-48,-49,-50,-51,-52,-53,-101,148,156,-104,-103,148,-54,-46,148,-65,148,]),'LESS_THAN':([67,68,69,70,71,109,110,115,116,120,121,122,123,124,125,126,127,129,140,141,142,163,165,167,194,],[99,-31,-32,-33,-34,-9,-11,-10,-12,149,-47,-48,-49,-50,-51,-52,-53,149,-104,-103,149,-54,-46,149,149,]),'OR':([68,69,70,71,109,110,115,116,120,121,122,123,124,125,126,127,129,140,141,142,163,165,167,194,],[-31,-32,-33,-34,-9,-11,-10,-12,145,-47,-48,-49,-50,-51,-52,-53,145,-104,-103,145,-54,-46,145,145,]),'AND':([68,69,70,71,109,110,115,116,120,121,122,123,124,125,126,127,129,140,141,142,163,165,167,194,],[-31,-32,-33,-34,-9,-11,-10,-12,146,-47,-48,-49,-50,-51,-52,-53,146,-104,-103,146,-54,-46,146,146,]),'NOT':([68,69,70,71,109,110,115,116,120,121,122,123,124,125,126,127,129,140,141,142,163,165,167,194,],[-31,-32,-33,-34,-9,-11,-10,-12,147,-47,-48,-49,-50,-51,-52,-53,147,-104,-103,147,-54,-46,147,147,]),'GREATER_EQUALS_THAN':([68,69,70,71,109,110,115,116,120,121,122,123,124,125,126,127,129,140,141,142,163,165,167,194,],[-31,-32,-33,-34,-9,-11,-10,-12,150,-47,-48,-49,-50,-51,-52,-53,150,-104,-103,150,-54,-46,150,150,]),'LESS_EQUALS_THAN':([68,69,70,71,109,110,115,116,120,121,122,123,124,125,126,127,129,140,141,142,163,165,167,194,],[-31,-32,-33,-34,-9,-11,-10,-12,151,-47,-48,-49,-50,-51,-52,-53,151,-104,-103,151,-54,-46,151,151,]),'EQUALITY':([68,69,70,71,109,110,115,116,120,121,122,123,124,125,126,127,129,140,141,142,163,165,167,194,],[-31,-32,-33,-34,-9,-11,-10,-12,152,-47,-48,-49,-50,-51,-52,-53,152,-104,-103,152,-54,-46,152,152,]),'RSQBRACKET':([68,69,70,71,89,96,111,112,188,],[-31,-32,-33,-34,114,128,140,141,193,]),'ELSE':([73,164,197,],[-13,177,177,]),'TRUE':([93,97,119,144,145,146,147,148,149,150,151,152,154,191,],[122,122,122,122,-55,-56,-57,-58,-59,-60,-61,-62,122,122,]),'FALSE':([93,97,119,144,145,146,147,148,149,150,151,152,154,191,],[123,123,123,123,-55,-56,-57,-58,-59,-60,-61,-62,123,123,]),'COMMA':([159,169,],[171,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,74,],[9,9,36,36,]),'block':([22,26,143,153,170,172,177,183,184,192,196,],[24,72,164,166,180,182,186,189,190,195,197,]),'body':([25,74,],[27,100,]),'lines':([25,74,],[28,28,]),'function':([25,74,],[29,29,]),'assignment':([25,74,98,178,],[30,30,130,187,]),'expression':([25,39,74,82,107,],[31,85,31,108,139,]),'declaration':([25,74,135,136,161,162,171,],[32,32,159,159,159,159,159,]),'if':([25,74,],[33,33,]),'loop':([25,74,],[34,34,]),'return':([25,74,],[35,35,]),'data_type':([25,36,74,79,98,99,135,136,161,162,171,178,],[37,77,37,105,132,134,157,157,157,157,157,132,]),'term':([25,39,74,75,76,82,107,],[41,41,41,101,102,41,41,]),'while_loop':([25,74,],[43,43,]),'loop_for':([25,74,],[44,44,]),'type':([25,39,45,74,75,76,82,91,92,93,97,107,119,144,154,179,191,],[46,46,95,46,46,46,46,46,46,126,126,46,126,126,126,188,126,]),'primitive':([25,36,74,79,98,99,135,136,161,162,171,178,],[47,47,47,47,47,47,47,47,47,47,47,47,]),'data_structure':([25,36,74,79,98,99,135,136,161,162,171,178,],[48,48,48,48,48,48,48,48,48,48,48,48,]),'factor':([25,39,74,75,76,82,91,92,107,],[49,49,49,49,49,49,117,118,49,]),'data_structure_list':([25,36,74,79,98,99,135,136,161,162,171,178,],[63,63,63,63,63,63,63,63,63,63,63,63,]),'data_structure_array':([25,36,74,79,98,99,135,136,161,162,171,178,],[64,64,64,64,64,64,64,64,64,64,64,64,]),'object_access':([25,39,74,75,76,82,91,92,93,97,107,119,144,154,191,],[65,65,65,65,65,65,65,65,127,127,65,127,127,127,127,]),'indexing':([25,39,74,75,76,82,91,92,93,97,107,119,144,154,191,],[66,66,66,66,66,66,66,66,125,125,66,125,125,125,125,]),'logical_expression':([93,97,119,154,191,],[120,129,142,167,194,]),'logical_factor':([93,97,119,144,154,191,],[121,121,121,165,121,121,]),'logical_operator':([120,129,142,167,194,],[144,144,144,144,144,]),'declarations':([135,136,161,162,171,],[158,160,173,174,181,]),'elseif':([164,197,],[175,198,]),'else':([164,197,],[176,199,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',26),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',27),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',31),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',32),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',36),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',40),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',43),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',44),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',48),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',49),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',50),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',51),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',54),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',58),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',59),
  ('body -> function','body',1,'p_body','PLY_yacc.py',60),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',64),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',65),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',66),
  ('lines -> if','lines',1,'p_lines','PLY_yacc.py',67),
  ('lines -> loop','lines',1,'p_lines','PLY_yacc.py',68),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',69),
  ('function -> modifier data_type ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',73),
  ('function -> modifier VOID ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',74),
  ('function -> modifier STATIC data_type ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',75),
  ('function -> modifier STATIC VOID ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',76),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',79),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',80),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',84),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',85),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',89),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',90),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',91),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',92),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',95),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',96),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',97),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',100),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',101),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',102),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',105),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',108),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',109),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',113),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',117),
  ('logical_expression -> logical_expression logical_operator logical_factor','logical_expression',3,'p_logical_expression','PLY_yacc.py',120),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',121),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',124),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',125),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',126),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',127),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',128),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',129),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',130),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',133),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',134),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',135),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',136),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',137),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',138),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',139),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',140),
  ('data_structure -> data_structure_list','data_structure',1,'p_data_structure','PLY_yacc.py',145),
  ('data_structure -> data_structure_array','data_structure',1,'p_data_structure','PLY_yacc.py',146),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET','data_structure_list',8,'p_data_structure_list','PLY_yacc.py',149),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','PLY_yacc.py',153),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',154),
  ('assignment -> CLASSOBJECT ID','assignment',2,'p_assignment','PLY_yacc.py',155),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',158),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',159),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',160),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',163),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',166),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',167),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',168),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',171),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',172),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',173),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',183),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',184),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',185),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',186),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',187),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',194),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',195),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',196),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',197),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',200),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',201),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',204),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',205),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',206),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',207),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',208),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',209),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',210),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',211),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',212),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',213),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',214),
  ('data_structure_array -> primitive LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',217),
  ('data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',218),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',221),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',222),
]
