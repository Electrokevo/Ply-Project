
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIFFERENT DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUSONE PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | if\n            | loop\n            | functionlines : assignment \n    | expression \n    | declaration\n    | returnnames : ID\n    | CLASSOBJECTfunction : modifier data_type names LPAREN declarations RPAREN block\n                | modifier VOID names LPAREN declarations RPAREN block\n                | modifier STATIC data_type names LPAREN declarations RPAREN block\n                | modifier STATIC VOID names LPAREN declarations RPAREN block\n                | function bodyreturn : RETURN ID\n               | RETURN type\n               | RETURN expressionfunction_call : names LPAREN RPAREN\n                     | names LPAREN arguments RPARENarguments : expression\n                 | expression COMMA arguments\n                 | names\n                 | names COMMA argumentslambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blockexpression : object_access LPAREN expression RPARENexpression : object_access LPAREN RPARENif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block body\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE block\n    | ELSE block bodyloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block\n    | FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block bodywhile_loop : WHILE LPAREN logical_expression RPAREN block\n    | WHILE LPAREN logical_expression RPAREN block bodylogical_expression : logical_factor logical_operator logical_expression\n    | logical_expression logical_operator logical_expression\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITY\n    | DIFFERENTdata_structure : data_structure_list\n                      | data_structure_arraydata_structure_list : LIST LESS_THAN data_type GREATER_THANdata_structure_array : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETassignment : data_type ID EQUALS expressionassignment : ID EQUALS expression\n                | indexing EQUALS expressionassignment : ID PLUSONEassignment : CLASSOBJECT IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | LSQBRACKET arguments RSQBRACKET\n    | object_access\n    | ID\n    | indexing\n    | function_call\n    | STRINGtype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPE\n    | MINUS typedeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET\n    | ID LSQBRACKET expression RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,77,78,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,29,30,31,38,39,78,79,80,118,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[10,10,-6,10,-16,-17,10,-52,-53,-13,10,-29,-15,10,10,-44,-45,-46,-57,10,-25,-26,-51,-27,-28,10,-55,-47,-48,-49,]),'PRIVATE':([3,7,20,25,29,30,31,38,39,78,79,80,118,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[11,11,-6,11,-16,-17,11,-52,-53,-13,11,-29,-15,11,11,-44,-45,-46,-57,11,-25,-26,-51,-27,-28,11,-55,-47,-48,-49,]),'PROTECTED':([3,7,20,25,29,30,31,38,39,78,79,80,118,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[12,12,-6,12,-16,-17,12,-52,-53,-13,12,-29,-15,12,12,-44,-45,-46,-57,12,-25,-26,-51,-27,-28,12,-55,-47,-48,-49,]),'INTERNAL':([3,7,20,25,29,30,31,38,39,78,79,80,118,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[13,13,-6,13,-16,-17,13,-52,-53,-13,13,-29,-15,13,13,-44,-45,-46,-57,13,-25,-26,-51,-27,-28,13,-55,-47,-48,-49,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,29,30,31,37,38,39,40,49,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,88,89,90,93,94,96,97,98,100,102,103,104,109,110,117,118,123,138,139,140,152,163,165,166,170,171,172,173,174,175,176,177,178,179,180,181,182,192,196,198,205,206,207,209,210,211,215,219,220,222,223,225,229,230,231,232,235,237,238,239,240,],[15,16,-110,-111,-112,-113,22,26,45,-16,-17,45,86,-52,-53,91,86,-114,-115,116,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-77,-78,-13,45,-29,86,86,132,136,136,91,116,86,86,148,86,150,86,86,86,132,162,91,-15,132,136,136,86,-81,-80,116,116,132,-68,-69,-70,-71,-72,-73,-74,-75,-76,132,91,91,132,-79,45,91,91,45,-44,-45,-46,91,-57,162,45,-25,-26,132,-51,-27,-28,45,-55,-47,-48,-49,]),'CLASS':([9,10,11,12,13,19,],[18,-110,-111,-112,-113,23,]),'STATIC':([9,10,11,12,13,40,],[19,-110,-111,-112,-113,90,]),'VOID':([10,11,12,13,40,90,],[-110,-111,-112,-113,89,139,]),'INT':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,58,-16,-17,58,-52,-53,58,-13,58,-29,58,58,58,-15,58,58,58,58,58,58,-44,-45,-46,58,-57,58,58,-25,-26,-51,-27,-28,58,-55,-47,-48,-49,]),'FLOAT':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,59,-16,-17,59,-52,-53,59,-13,59,-29,59,59,59,-15,59,59,59,59,59,59,-44,-45,-46,59,-57,59,59,-25,-26,-51,-27,-28,59,-55,-47,-48,-49,]),'BOOL':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,60,-16,-17,60,-52,-53,60,-13,60,-29,60,60,60,-15,60,60,60,60,60,60,-44,-45,-46,60,-57,60,60,-25,-26,-51,-27,-28,60,-55,-47,-48,-49,]),'BYTE':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,61,-16,-17,61,-52,-53,61,-13,61,-29,61,61,61,-15,61,61,61,61,61,61,-44,-45,-46,61,-57,61,61,-25,-26,-51,-27,-28,61,-55,-47,-48,-49,]),'CHAR':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,62,-16,-17,62,-52,-53,62,-13,62,-29,62,62,62,-15,62,62,62,62,62,62,-44,-45,-46,62,-57,62,62,-25,-26,-51,-27,-28,62,-55,-47,-48,-49,]),'SBYTE':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,63,-16,-17,63,-52,-53,63,-13,63,-29,63,63,63,-15,63,63,63,63,63,63,-44,-45,-46,63,-57,63,63,-25,-26,-51,-27,-28,63,-55,-47,-48,-49,]),'DECIMAL':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,64,-16,-17,64,-52,-53,64,-13,64,-29,64,64,64,-15,64,64,64,64,64,64,-44,-45,-46,64,-57,64,64,-25,-26,-51,-27,-28,64,-55,-47,-48,-49,]),'DOUBLE':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,65,-16,-17,65,-52,-53,65,-13,65,-29,65,65,65,-15,65,65,65,65,65,65,-44,-45,-46,65,-57,65,65,-25,-26,-51,-27,-28,65,-55,-47,-48,-49,]),'LONG':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,66,-16,-17,66,-52,-53,66,-13,66,-29,66,66,66,-15,66,66,66,66,66,66,-44,-45,-46,66,-57,66,66,-25,-26,-51,-27,-28,66,-55,-47,-48,-49,]),'SHORT':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,67,-16,-17,67,-52,-53,67,-13,67,-29,67,67,67,-15,67,67,67,67,67,67,-44,-45,-46,67,-57,67,67,-25,-26,-51,-27,-28,67,-55,-47,-48,-49,]),'UINT':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,68,-16,-17,68,-52,-53,68,-13,68,-29,68,68,68,-15,68,68,68,68,68,68,-44,-45,-46,68,-57,68,68,-25,-26,-51,-27,-28,68,-55,-47,-48,-49,]),'LIST':([10,11,12,13,25,29,30,31,38,39,40,78,79,80,90,110,117,118,181,182,198,205,206,207,209,210,211,215,219,220,222,223,225,230,231,232,235,237,238,239,240,],[-110,-111,-112,-113,73,-16,-17,73,-52,-53,73,-13,73,-29,73,73,73,-15,73,73,73,73,73,73,-44,-45,-46,73,-57,73,73,-25,-26,-51,-27,-28,73,-55,-47,-48,-49,]),'SEMICOLON':([15,16,28,32,33,34,35,43,44,46,47,50,56,57,71,72,74,75,76,85,87,92,95,99,105,106,107,108,119,120,121,122,125,126,127,128,129,130,131,133,141,143,147,148,149,150,151,154,155,156,158,164,185,186,187,188,189,190,197,199,200,208,],[20,21,79,-19,-20,-21,-22,-97,-98,-96,-89,-93,-104,-92,-99,-100,-101,-102,-103,-97,-98,-109,-85,-86,-105,-30,-31,-32,-87,-96,-97,-88,-60,-61,-62,-63,-64,-65,-66,-94,-33,-83,-9,-11,-84,-10,-12,-42,-90,-91,192,-95,-82,-34,-128,-127,-129,-41,-67,-59,-58,220,]),'LBRACKET':([22,26,169,191,212,214,216,226,227,233,236,],[25,25,25,25,25,25,25,25,25,25,25,]),'IF':([25,29,30,31,38,39,78,79,80,118,198,207,209,210,211,212,219,222,223,225,230,231,232,235,237,238,239,240,],[36,-16,-17,36,-52,-53,-13,36,-29,-15,36,36,-44,-45,-46,221,-57,36,-25,-26,-51,-27,-28,36,-55,-47,-48,-49,]),'ID':([25,29,30,31,37,38,39,41,45,49,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79,80,81,82,83,88,89,93,94,96,97,98,100,102,103,104,109,110,118,123,138,139,140,152,159,162,163,165,166,170,171,172,173,174,175,176,177,178,179,180,192,196,198,201,207,209,210,211,219,220,222,223,225,229,230,231,232,235,237,238,239,240,],[43,-16,-17,43,85,-52,-53,92,99,106,-114,-115,115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-77,-78,-13,43,-29,121,121,128,135,135,115,85,144,147,85,151,85,121,121,128,160,-15,128,135,135,85,-81,193,99,-80,115,115,128,-68,-69,-70,-71,-72,-73,-74,-75,-76,128,128,-79,43,213,43,-44,-45,-46,-57,160,43,-25,-26,128,-51,-27,-28,43,-55,-47,-48,-49,]),'RETURN':([25,29,30,31,38,39,78,79,80,118,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[49,-16,-17,49,-52,-53,-13,49,-29,-15,49,49,-44,-45,-46,-57,49,-25,-26,-51,-27,-28,49,-55,-47,-48,-49,]),'WHILE':([25,29,30,31,38,39,78,79,80,118,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[51,-16,-17,51,-52,-53,-13,51,-29,-15,51,51,-44,-45,-46,-57,51,-25,-26,-51,-27,-28,51,-55,-47,-48,-49,]),'FOR':([25,29,30,31,38,39,78,79,80,118,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[52,-16,-17,52,-52,-53,-13,52,-29,-15,52,52,-44,-45,-46,-57,52,-25,-26,-51,-27,-28,52,-55,-47,-48,-49,]),'LPAREN':([25,29,30,31,36,37,38,39,42,43,45,46,49,51,52,55,78,79,80,81,82,83,85,86,93,94,96,98,102,103,104,106,109,114,115,116,118,121,123,134,135,136,137,140,144,147,148,150,151,165,166,170,171,172,173,174,175,176,177,178,179,180,183,184,192,198,207,209,210,211,219,221,222,223,225,229,230,231,232,235,237,238,239,240,],[37,-16,-17,37,83,37,-52,-53,93,-23,-24,102,37,109,110,37,-13,37,-29,37,37,123,-23,-24,37,37,37,37,37,37,37,-23,123,93,-23,-24,-15,-23,123,181,-23,-24,182,37,-23,-9,-11,-10,-12,37,37,123,-68,-69,-70,-71,-72,-73,-74,-75,-76,123,205,206,123,37,37,-44,-45,-46,-57,229,37,-25,-26,123,-51,-27,-28,37,-55,-47,-48,-49,]),'LSQBRACKET':([25,29,30,31,37,38,39,43,45,49,53,55,58,59,60,61,62,63,64,65,66,67,68,78,79,80,81,82,85,91,93,94,96,98,102,103,104,106,115,118,121,128,140,144,160,162,165,166,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[55,-16,-17,55,55,-52,-53,96,101,55,111,55,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-13,55,-29,55,55,96,101,55,55,55,55,55,55,55,96,96,-15,96,96,55,96,96,101,55,55,55,55,-44,-45,-46,-57,55,-25,-26,-51,-27,-28,55,-55,-47,-48,-49,]),'STRING':([25,29,30,31,37,38,39,49,55,78,79,80,81,82,93,94,96,98,102,103,104,118,140,165,166,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[72,-16,-17,72,72,-52,-53,72,72,-13,72,-29,72,72,72,72,72,72,72,72,72,-15,72,72,72,72,72,-44,-45,-46,-57,72,-25,-26,-51,-27,-28,72,-55,-47,-48,-49,]),'FLOAT_TYPE':([25,29,30,31,37,38,39,48,49,55,78,79,80,81,82,83,93,94,96,98,102,103,104,109,118,123,140,165,166,170,171,172,173,174,175,176,177,178,179,180,192,198,207,209,210,211,219,222,223,225,229,230,231,232,235,237,238,239,240,],[74,-16,-17,74,74,-52,-53,74,74,74,-13,74,-29,74,74,74,74,74,74,74,74,74,74,74,-15,74,74,74,74,74,-68,-69,-70,-71,-72,-73,-74,-75,-76,74,74,74,74,-44,-45,-46,-57,74,-25,-26,74,-51,-27,-28,74,-55,-47,-48,-49,]),'DOUBLE_TYPE':([25,29,30,31,37,38,39,48,49,55,78,79,80,81,82,83,93,94,96,98,102,103,104,109,118,123,140,165,166,170,171,172,173,174,175,176,177,178,179,180,192,198,207,209,210,211,219,222,223,225,229,230,231,232,235,237,238,239,240,],[75,-16,-17,75,75,-52,-53,75,75,75,-13,75,-29,75,75,75,75,75,75,75,75,75,75,75,-15,75,75,75,75,75,-68,-69,-70,-71,-72,-73,-74,-75,-76,75,75,75,75,-44,-45,-46,-57,75,-25,-26,75,-51,-27,-28,75,-55,-47,-48,-49,]),'DECIMAL_TYPE':([25,29,30,31,37,38,39,48,49,55,78,79,80,81,82,83,93,94,96,98,102,103,104,109,118,123,140,165,166,170,171,172,173,174,175,176,177,178,179,180,192,198,207,209,210,211,219,222,223,225,229,230,231,232,235,237,238,239,240,],[76,-16,-17,76,76,-52,-53,76,76,76,-13,76,-29,76,76,76,76,76,76,76,76,76,76,76,-15,76,76,76,76,76,-68,-69,-70,-71,-72,-73,-74,-75,-76,76,76,76,76,-44,-45,-46,-57,76,-25,-26,76,-51,-27,-28,76,-55,-47,-48,-49,]),'INTEGER_TYPE':([25,29,30,31,37,38,39,48,49,55,78,79,80,81,82,83,93,94,96,98,102,103,104,109,118,123,140,165,166,170,171,172,173,174,175,176,177,178,179,180,192,198,207,209,210,211,219,222,223,225,229,230,231,232,235,237,238,239,240,],[56,-16,-17,56,56,-52,-53,56,56,56,-13,56,-29,56,56,56,56,56,145,56,56,56,56,56,-15,56,56,56,56,56,-68,-69,-70,-71,-72,-73,-74,-75,-76,56,56,56,56,-44,-45,-46,-57,56,-25,-26,56,-51,-27,-28,56,-55,-47,-48,-49,]),'MINUS':([25,29,30,31,33,37,38,39,43,44,46,47,48,49,50,55,56,57,71,72,74,75,76,78,79,80,81,82,83,84,85,87,93,94,96,98,102,103,104,105,106,107,108,109,113,115,118,119,120,121,122,123,133,140,141,143,144,145,146,147,148,149,150,151,153,154,155,156,164,165,166,170,171,172,173,174,175,176,177,178,179,180,185,186,187,188,189,190,192,198,207,209,210,211,219,222,223,225,229,230,231,232,235,237,238,239,240,],[48,-16,-17,48,82,48,-52,-53,-97,-98,-96,-89,48,48,-93,48,-104,-92,-99,-100,-101,-102,-103,-13,48,-29,48,48,48,82,-97,-98,48,48,48,48,48,48,48,-105,-97,-93,82,48,82,-97,-15,-87,-96,-97,-88,48,-94,48,-33,82,-97,-104,82,-9,-11,82,-10,-12,82,-42,-90,-91,-95,48,48,48,-68,-69,-70,-71,-72,-73,-74,-75,-76,48,82,-34,-128,-127,-129,-41,48,48,48,-44,-45,-46,-57,48,-25,-26,48,-51,-27,-28,48,-55,-47,-48,-49,]),'RBRACKET':([27,29,30,31,38,39,78,79,80,118,198,207,209,210,211,219,222,223,225,230,231,232,235,237,238,239,240,],[78,-16,-17,-18,-52,-53,-13,-14,-29,-15,-43,-56,-44,-45,-46,-57,-50,-25,-26,-51,-27,-28,-54,-55,-47,-48,-49,]),'PLUS':([33,43,44,46,47,50,56,57,71,72,74,75,76,84,85,87,105,106,107,108,113,115,119,120,121,122,133,141,143,144,145,146,147,148,149,150,151,153,154,155,156,164,185,186,187,188,189,190,],[81,-97,-98,-96,-89,-93,-104,-92,-99,-100,-101,-102,-103,81,-97,-98,-105,-97,-93,81,81,-97,-87,-96,-97,-88,-94,-33,81,-97,-104,81,-9,-11,81,-10,-12,81,-42,-90,-91,-95,81,-34,-128,-127,-129,-41,]),'EQUALS':([43,44,92,160,161,187,188,189,193,],[94,98,140,94,98,-128,-127,-129,140,]),'PLUSONE':([43,160,],[95,95,]),'DOT':([43,45,85,86,106,115,116,121,128,132,144,],[97,100,97,100,97,97,100,97,97,100,97,]),'TIMES':([43,44,46,47,50,56,57,71,72,74,75,76,85,87,105,106,107,115,119,120,121,122,133,141,144,145,147,148,150,151,155,156,164,186,187,188,189,],[-97,-98,-96,103,-93,-104,-92,-99,-100,-101,-102,-103,-97,-98,-105,-97,-93,-97,103,-96,-97,103,-94,-33,-97,-104,-9,-11,-10,-12,-90,-91,-95,-34,-128,-127,-129,]),'DIVIDE':([43,44,46,47,50,56,57,71,72,74,75,76,85,87,105,106,107,115,119,120,121,122,133,141,144,145,147,148,150,151,155,156,164,186,187,188,189,],[-97,-98,-96,104,-93,-104,-92,-99,-100,-101,-102,-103,-97,-98,-105,-97,-93,-97,104,-96,-97,104,-94,-33,-97,-104,-9,-11,-10,-12,-90,-91,-95,-34,-128,-127,-129,]),'RPAREN':([46,47,50,56,57,71,72,74,75,76,84,85,87,93,95,99,102,105,113,114,115,116,119,120,121,122,124,125,126,127,128,129,130,131,133,141,142,143,147,148,149,150,151,153,154,155,156,157,164,168,185,186,187,188,189,190,194,195,197,199,200,202,203,204,213,215,217,218,224,228,234,],[-96,-89,-93,-104,-92,-99,-100,-101,-102,-103,133,-97,-98,141,-85,-86,154,-105,-35,-37,-23,-24,-87,-96,-97,-88,169,-60,-61,-62,-63,-64,-65,-66,-94,-33,186,-83,-9,-11,-84,-10,-12,190,-42,-90,-91,191,-95,197,-82,-34,-128,-127,-129,-41,-36,-38,-67,-59,-58,214,-106,216,-109,-107,226,227,-108,233,236,]),'COMMA':([46,47,50,56,57,71,72,74,75,76,87,105,113,114,115,116,119,120,121,122,133,141,147,148,150,151,154,155,156,164,186,187,188,189,190,203,213,],[-96,-89,-93,-104,-92,-99,-100,-101,-102,-103,-98,-105,165,166,-23,-24,-87,-96,-97,-88,-94,-33,-9,-11,-10,-12,-42,-90,-91,-95,-34,-128,-127,-129,-41,215,-109,]),'RSQBRACKET':([46,47,50,56,57,71,72,74,75,76,87,101,105,111,112,113,114,115,116,119,120,121,122,133,141,144,145,146,147,148,150,151,154,155,156,164,186,187,188,189,190,194,195,],[-96,-89,-93,-104,-92,-99,-100,-101,-102,-103,-98,152,-105,163,164,-35,-37,-23,-24,-87,-96,-97,-88,-94,-33,187,188,189,-9,-11,-10,-12,-42,-90,-91,-95,-34,-128,-127,-129,-41,-36,-38,]),'GREATER_THAN':([53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,152,157,163,167,168,187,188,189,196,197,199,200,208,234,],[-114,-115,-104,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-77,-78,-101,-102,-103,-105,174,174,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,-81,174,-80,196,174,-128,-127,-129,-79,-67,174,174,174,174,]),'OR':([56,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,157,168,187,188,189,197,199,200,208,234,],[-104,-101,-102,-103,-105,171,171,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,171,171,-128,-127,-129,-67,171,171,171,171,]),'AND':([56,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,157,168,187,188,189,197,199,200,208,234,],[-104,-101,-102,-103,-105,172,172,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,172,172,-128,-127,-129,-67,172,172,172,172,]),'NOT':([56,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,157,168,187,188,189,197,199,200,208,234,],[-104,-101,-102,-103,-105,173,173,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,173,173,-128,-127,-129,-67,173,173,173,173,]),'LESS_THAN':([56,73,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,157,168,187,188,189,197,199,200,208,234,],[-104,117,-101,-102,-103,-105,175,175,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,175,175,-128,-127,-129,-67,175,175,175,175,]),'GREATER_EQUALS_THAN':([56,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,157,168,187,188,189,197,199,200,208,234,],[-104,-101,-102,-103,-105,176,176,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,176,176,-128,-127,-129,-67,176,176,176,176,]),'LESS_EQUALS_THAN':([56,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,157,168,187,188,189,197,199,200,208,234,],[-104,-101,-102,-103,-105,177,177,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,177,177,-128,-127,-129,-67,177,177,177,177,]),'EQUALITY':([56,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,157,168,187,188,189,197,199,200,208,234,],[-104,-101,-102,-103,-105,178,178,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,178,178,-128,-127,-129,-67,178,178,178,178,]),'DIFFERENT':([56,74,75,76,105,124,125,126,127,128,129,130,131,147,148,150,151,157,168,187,188,189,197,199,200,208,234,],[-104,-101,-102,-103,-105,179,179,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,179,179,-128,-127,-129,-67,179,179,179,179,]),'ELSE':([78,198,238,],[-13,212,212,]),'TRUE':([83,109,123,170,171,172,173,174,175,176,177,178,179,180,192,229,],[126,126,126,126,-68,-69,-70,-71,-72,-73,-74,-75,-76,126,126,126,]),'FALSE':([83,109,123,170,171,172,173,174,175,176,177,178,179,180,192,229,],[127,127,127,127,-68,-69,-70,-71,-72,-73,-74,-75,-76,127,127,127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,31,79,198,207,222,235,],[9,9,40,40,40,40,40,40,40,]),'block':([22,26,169,191,212,214,216,226,227,233,236,],[24,77,198,207,222,223,225,231,232,235,238,]),'body':([25,31,79,198,207,222,235,],[27,80,118,209,219,230,237,]),'lines':([25,31,79,198,207,222,235,],[28,28,28,28,28,28,28,]),'if':([25,31,79,198,207,222,235,],[29,29,29,29,29,29,29,]),'loop':([25,31,79,198,207,222,235,],[30,30,30,30,30,30,30,]),'function':([25,31,79,198,207,222,235,],[31,31,31,31,31,31,31,]),'assignment':([25,31,79,110,198,207,220,222,235,],[32,32,32,158,32,32,228,32,32,]),'expression':([25,31,37,49,55,79,93,94,96,98,102,140,165,166,198,207,222,235,],[33,33,84,108,113,33,113,143,146,149,153,185,113,113,33,33,33,33,]),'declaration':([25,31,79,181,182,198,205,206,207,215,222,235,],[34,34,34,203,203,34,203,203,34,203,34,34,]),'return':([25,31,79,198,207,222,235,],[35,35,35,35,35,35,35,]),'while_loop':([25,31,79,198,207,222,235,],[38,38,38,38,38,38,38,]),'loop_for':([25,31,79,198,207,222,235,],[39,39,39,39,39,39,39,]),'data_type':([25,31,40,79,90,110,117,181,182,198,205,206,207,215,220,222,235,],[41,41,88,41,138,159,167,201,201,41,201,201,41,201,159,41,41,]),'names':([25,31,37,49,55,79,81,82,88,89,93,94,96,98,102,103,104,138,139,140,165,166,198,207,222,235,],[42,42,42,42,114,42,42,42,134,137,114,42,42,42,42,42,42,183,184,42,114,114,42,42,42,42,]),'indexing':([25,31,37,49,55,79,81,82,83,93,94,96,98,102,103,104,109,110,123,140,165,166,170,180,192,198,207,220,222,229,235,],[44,44,87,87,87,44,87,87,129,87,87,87,87,87,87,87,129,161,129,87,87,87,129,129,129,44,44,161,44,129,44,]),'object_access':([25,31,37,49,55,79,81,82,83,93,94,96,98,102,103,104,109,123,140,165,166,170,180,192,198,207,222,229,235,],[46,46,46,46,46,46,120,120,131,46,46,46,46,46,120,120,131,131,46,46,46,131,131,131,46,46,46,131,46,]),'term':([25,31,37,49,55,79,81,82,93,94,96,98,102,140,165,166,198,207,222,235,],[47,47,47,47,47,47,119,122,47,47,47,47,47,47,47,47,47,47,47,47,]),'type':([25,31,37,48,49,55,79,81,82,83,93,94,96,98,102,103,104,109,123,140,165,166,170,180,192,198,207,222,229,235,],[50,50,50,105,107,50,50,50,50,130,50,50,50,50,50,50,50,130,130,50,50,50,130,130,130,50,50,50,130,50,]),'primitive':([25,31,40,79,90,110,117,181,182,198,205,206,207,215,220,222,235,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'data_structure':([25,31,40,79,90,110,117,181,182,198,205,206,207,215,220,222,235,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'factor':([25,31,37,49,55,79,81,82,93,94,96,98,102,103,104,140,165,166,198,207,222,235,],[57,57,57,57,57,57,57,57,57,57,57,57,57,155,156,57,57,57,57,57,57,57,]),'data_structure_list':([25,31,40,79,90,110,117,181,182,198,205,206,207,215,220,222,235,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'data_structure_array':([25,31,40,79,90,110,117,181,182,198,205,206,207,215,220,222,235,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'function_call':([25,31,37,49,55,79,81,82,93,94,96,98,102,103,104,140,165,166,198,207,222,235,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'arguments':([55,93,165,166,],[112,142,194,195,]),'logical_expression':([83,109,123,170,180,192,229,],[124,157,168,199,200,208,234,]),'logical_factor':([83,109,123,170,180,192,229,],[125,125,125,125,125,125,125,]),'logical_operator':([124,125,157,168,199,200,208,234,],[170,180,170,170,170,170,170,170,]),'declarations':([181,182,205,206,215,],[202,204,217,218,224,]),'elseif':([198,238,],[210,239,]),'else':([198,238,],[211,240,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',43),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',44),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',48),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',49),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',53),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',57),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',60),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',61),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',65),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',66),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',67),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',68),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',91),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',96),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',97),
  ('body -> if','body',1,'p_body','PLY_yacc.py',98),
  ('body -> loop','body',1,'p_body','PLY_yacc.py',99),
  ('body -> function','body',1,'p_body','PLY_yacc.py',100),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',104),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',105),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',106),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',107),
  ('names -> ID','names',1,'p_names','PLY_yacc.py',116),
  ('names -> CLASSOBJECT','names',1,'p_names','PLY_yacc.py',117),
  ('function -> modifier data_type names LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',121),
  ('function -> modifier VOID names LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',122),
  ('function -> modifier STATIC data_type names LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',123),
  ('function -> modifier STATIC VOID names LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',124),
  ('function -> function body','function',2,'p_funtion','PLY_yacc.py',125),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',148),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',149),
  ('return -> RETURN expression','return',2,'p_return','PLY_yacc.py',150),
  ('function_call -> names LPAREN RPAREN','function_call',3,'p_function_call','PLY_yacc.py',153),
  ('function_call -> names LPAREN arguments RPAREN','function_call',4,'p_function_call','PLY_yacc.py',154),
  ('arguments -> expression','arguments',1,'p_arguments','PLY_yacc.py',157),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','PLY_yacc.py',158),
  ('arguments -> names','arguments',1,'p_arguments','PLY_yacc.py',159),
  ('arguments -> names COMMA arguments','arguments',3,'p_arguments','PLY_yacc.py',160),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',176),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',177),
  ('expression -> object_access LPAREN expression RPAREN','expression',4,'p_console_writeline','PLY_yacc.py',180),
  ('expression -> object_access LPAREN RPAREN','expression',3,'p_console_readline','PLY_yacc.py',187),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',196),
  ('if -> IF LPAREN logical_expression RPAREN block body','if',6,'p_if','PLY_yacc.py',197),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',198),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',199),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',207),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',208),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',209),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',217),
  ('else -> ELSE block body','else',3,'p_else','PLY_yacc.py',218),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',222),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',223),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',228),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body','loop_for',10,'p_loop_for','PLY_yacc.py',229),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',234),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block body','while_loop',6,'p_while_loop','PLY_yacc.py',235),
  ('logical_expression -> logical_factor logical_operator logical_expression','logical_expression',3,'p_logical_expression','PLY_yacc.py',245),
  ('logical_expression -> logical_expression logical_operator logical_expression','logical_expression',3,'p_logical_expression','PLY_yacc.py',246),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',247),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',289),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',290),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',291),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',292),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',293),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',294),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',295),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',316),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',317),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',318),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',319),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',320),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',321),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',322),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',323),
  ('logical_operator -> DIFFERENT','logical_operator',1,'p_logical_operator','PLY_yacc.py',324),
  ('data_structure -> data_structure_list','data_structure',1,'p_data_structure','PLY_yacc.py',330),
  ('data_structure -> data_structure_array','data_structure',1,'p_data_structure','PLY_yacc.py',331),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN','data_structure_list',4,'p_data_structure_list','PLY_yacc.py',335),
  ('data_structure_array -> primitive LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',343),
  ('data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',344),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',348),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',361),
  ('assignment -> indexing EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',362),
  ('assignment -> ID PLUSONE','assignment',2,'p_assignment_plus_one','PLY_yacc.py',378),
  ('assignment -> CLASSOBJECT ID','assignment',2,'p_assignment_class','PLY_yacc.py',392),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',402),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',403),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',404),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',420),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',421),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',422),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',437),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',438),
  ('factor -> LSQBRACKET arguments RSQBRACKET','factor',3,'p_factor','PLY_yacc.py',439),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',440),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',441),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',442),
  ('factor -> function_call','factor',1,'p_factor','PLY_yacc.py',443),
  ('factor -> STRING','factor',1,'p_factor','PLY_yacc.py',444),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',470),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',471),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',472),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',473),
  ('type -> MINUS type','type',2,'p_type','PLY_yacc.py',474),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',492),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',493),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',494),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',505),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',517),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',518),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',519),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',520),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',524),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',525),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',530),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',531),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',532),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',533),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',534),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',535),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',536),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',537),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',538),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',539),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',540),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',547),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',548),
  ('indexing -> ID LSQBRACKET expression RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',549),
]
