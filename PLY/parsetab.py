
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIFFERENT DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUSONE PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | if\n            | loop\n            | functionlines : assignment \n    | expression \n    | declaration\n    | returnnames : ID\n    | CLASSOBJECTfunction : modifier data_type names LPAREN declarations RPAREN block\n                | modifier VOID names LPAREN declarations RPAREN block\n                | modifier STATIC data_type names LPAREN declarations RPAREN block\n                | modifier STATIC VOID names LPAREN declarations RPAREN block\n                | function bodyreturn : RETURN ID\n               | RETURN type\n               | RETURN expressionfunction_call : names LPAREN RPAREN\n                     | names LPAREN arguments RPARENarguments : expression\n                 | expression COMMA arguments\n                 | names\n                 | names COMMA argumentslambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blockexpression : object_access LPAREN expression RPARENexpression : object_access LPAREN RPARENif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block body\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE block\n    | ELSE block bodyloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block\n    | loop_for bodywhile_loop : WHILE LPAREN logical_expression RPAREN block\n    | WHILE LPAREN logical_expression RPAREN block bodylogical_expression : logical_factor logical_operator logical_expression\n    | logical_expression logical_operator logical_expression\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITY\n    | DIFFERENTdata_structure : data_structure_list\n                      | data_structure_arraydata_structure_list : LIST LESS_THAN data_type GREATER_THANdata_structure_array : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETassignment : data_type ID EQUALS expressionassignment : ID EQUALS expression\n    | indexing_asign EQUALS expressionassignment : ID PLUSONEassignment : CLASSOBJECT IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | LSQBRACKET arguments RSQBRACKET\n    | object_access\n    | ID\n    | indexing\n    | function_call\n    | STRINGtype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPE\n    | MINUS typedeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET\n    | ID LSQBRACKET expression RSQBRACKETindexing_asign : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET\n    | ID LSQBRACKET expression RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,78,79,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[10,10,-6,10,-16,-17,10,-52,10,-13,10,-29,-55,-15,10,10,-44,-45,-46,-57,10,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'PRIVATE':([3,7,20,25,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[11,11,-6,11,-16,-17,11,-52,11,-13,11,-29,-55,-15,11,11,-44,-45,-46,-57,11,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'PROTECTED':([3,7,20,25,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[12,12,-6,12,-16,-17,12,-52,12,-13,12,-29,-55,-15,12,12,-44,-45,-46,-57,12,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'INTERNAL':([3,7,20,25,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[13,13,-6,13,-16,-17,13,-52,13,-13,13,-29,-55,-15,13,13,-44,-45,-46,-57,13,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,29,30,31,37,38,39,40,49,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,79,80,81,82,83,84,88,89,90,91,94,95,97,98,99,101,103,104,105,110,111,118,119,124,135,140,141,142,154,164,166,167,171,172,173,174,175,176,177,178,179,180,181,185,186,196,198,201,203,213,214,215,220,221,222,226,230,231,236,237,239,243,244,245,246,249,251,252,253,],[15,16,-110,-111,-112,-113,22,26,45,-16,-17,45,87,-52,45,92,87,-114,-115,117,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-77,-78,-13,45,-29,87,87,133,-55,138,138,92,117,87,87,150,87,152,87,87,87,133,163,92,-15,133,87,138,138,87,-81,-80,117,117,133,-68,-69,-70,-71,-72,-73,-74,-75,-76,133,92,92,133,87,-79,45,92,92,45,-44,-45,-46,92,-57,163,45,-25,-26,133,-51,-27,-28,-54,-47,-48,-49,]),'CLASS':([9,10,11,12,13,19,],[18,-110,-111,-112,-113,23,]),'STATIC':([9,10,11,12,13,40,],[19,-110,-111,-112,-113,91,]),'VOID':([10,11,12,13,40,91,],[-110,-111,-112,-113,90,141,]),'INT':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,58,-16,-17,58,-52,58,58,-13,58,-29,-55,58,58,58,-15,58,58,58,58,58,58,-44,-45,-46,58,-57,58,58,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'FLOAT':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,59,-16,-17,59,-52,59,59,-13,59,-29,-55,59,59,59,-15,59,59,59,59,59,59,-44,-45,-46,59,-57,59,59,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'BOOL':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,60,-16,-17,60,-52,60,60,-13,60,-29,-55,60,60,60,-15,60,60,60,60,60,60,-44,-45,-46,60,-57,60,60,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'BYTE':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,61,-16,-17,61,-52,61,61,-13,61,-29,-55,61,61,61,-15,61,61,61,61,61,61,-44,-45,-46,61,-57,61,61,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'CHAR':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,62,-16,-17,62,-52,62,62,-13,62,-29,-55,62,62,62,-15,62,62,62,62,62,62,-44,-45,-46,62,-57,62,62,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'SBYTE':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,63,-16,-17,63,-52,63,63,-13,63,-29,-55,63,63,63,-15,63,63,63,63,63,63,-44,-45,-46,63,-57,63,63,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'DECIMAL':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,64,-16,-17,64,-52,64,64,-13,64,-29,-55,64,64,64,-15,64,64,64,64,64,64,-44,-45,-46,64,-57,64,64,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'DOUBLE':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,65,-16,-17,65,-52,65,65,-13,65,-29,-55,65,65,65,-15,65,65,65,65,65,65,-44,-45,-46,65,-57,65,65,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'LONG':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,66,-16,-17,66,-52,66,66,-13,66,-29,-55,66,66,66,-15,66,66,66,66,66,66,-44,-45,-46,66,-57,66,66,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'SHORT':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,67,-16,-17,67,-52,67,67,-13,67,-29,-55,67,67,67,-15,67,67,67,67,67,67,-44,-45,-46,67,-57,67,67,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'UINT':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,68,-16,-17,68,-52,68,68,-13,68,-29,-55,68,68,68,-15,68,68,68,68,68,68,-44,-45,-46,68,-57,68,68,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'LIST':([10,11,12,13,25,29,30,31,38,39,40,79,80,81,88,91,111,118,119,185,186,203,213,214,215,220,221,222,226,230,231,236,237,239,244,245,246,249,251,252,253,],[-110,-111,-112,-113,74,-16,-17,74,-52,74,74,-13,74,-29,-55,74,74,74,-15,74,74,74,74,74,74,-44,-45,-46,74,-57,74,74,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'SEMICOLON':([15,16,28,32,33,34,35,43,46,47,50,56,57,71,72,73,75,76,77,86,93,96,100,106,107,108,109,120,121,122,123,126,127,128,129,130,131,132,134,143,145,149,150,151,152,153,156,157,158,160,165,189,190,191,192,193,194,202,204,205,206,207,208,216,],[20,21,80,-19,-20,-21,-22,-97,-96,-89,-93,-104,-92,-98,-99,-100,-101,-102,-103,-97,-109,-85,-86,-105,-30,-31,-32,-87,-96,-97,-88,-60,-61,-62,-63,-64,-65,-66,-94,-33,-83,-9,-11,-84,-10,-12,-42,-90,-91,196,-95,-82,-34,-128,-127,-129,-41,-67,-59,-58,-128,-127,-129,231,]),'LBRACKET':([22,26,170,195,223,225,227,240,241,247,250,],[25,25,25,25,25,25,25,25,25,25,25,]),'IF':([25,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,223,230,236,237,239,244,245,246,249,251,252,253,],[36,-16,-17,36,-52,36,-13,36,-29,-55,-15,36,36,-44,-45,-46,235,-57,36,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'ID':([25,29,30,31,37,38,39,41,45,49,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,79,80,81,82,83,84,88,89,90,94,95,97,98,99,101,103,104,105,110,111,119,124,135,140,141,142,154,161,163,164,166,167,171,172,173,174,175,176,177,178,179,180,181,196,198,201,203,209,215,220,221,222,230,231,236,237,239,243,244,245,246,249,251,252,253,],[43,-16,-17,43,86,-52,43,93,100,107,-114,-115,116,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-77,-78,-13,43,-29,122,122,129,-55,137,137,116,86,146,149,86,153,86,122,122,129,162,-15,129,182,137,137,86,-81,197,100,-80,116,116,129,-68,-69,-70,-71,-72,-73,-74,-75,-76,129,129,217,-79,43,224,43,-44,-45,-46,-57,162,43,-25,-26,129,-51,-27,-28,-54,-47,-48,-49,]),'RETURN':([25,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[49,-16,-17,49,-52,49,-13,49,-29,-55,-15,49,49,-44,-45,-46,-57,49,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'WHILE':([25,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[51,-16,-17,51,-52,51,-13,51,-29,-55,-15,51,51,-44,-45,-46,-57,51,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'FOR':([25,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[52,-16,-17,52,-52,52,-13,52,-29,-55,-15,52,52,-44,-45,-46,-57,52,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'LPAREN':([25,29,30,31,36,37,38,39,42,43,45,46,49,51,52,55,79,80,81,82,83,84,86,87,88,94,95,97,99,103,104,105,107,110,115,116,117,119,122,124,135,136,137,138,139,142,146,149,150,152,153,166,167,171,172,173,174,175,176,177,178,179,180,181,182,187,188,196,198,203,215,217,220,221,222,230,235,236,237,239,243,244,245,246,249,251,252,253,],[37,-16,-17,37,84,37,-52,37,94,-23,-24,103,37,110,111,37,-13,37,-29,37,37,124,-23,-24,-55,37,37,37,37,37,37,37,-23,124,94,-23,-24,-15,-23,124,37,185,-23,-24,186,37,-23,-9,-11,-10,-12,37,37,124,-68,-69,-70,-71,-72,-73,-74,-75,-76,124,-23,213,214,124,37,37,37,-23,-44,-45,-46,-57,243,37,-25,-26,124,-51,-27,-28,-54,-47,-48,-49,]),'LSQBRACKET':([25,29,30,31,37,38,39,43,45,49,53,55,58,59,60,61,62,63,64,65,66,67,68,79,80,81,82,83,86,88,92,94,95,97,99,103,104,105,107,116,119,122,129,135,142,146,162,163,166,167,182,198,203,215,217,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[55,-16,-17,55,55,-52,55,97,102,55,112,55,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-13,55,-29,55,55,135,-55,102,55,55,55,55,55,55,55,135,135,-15,135,135,55,55,135,198,102,55,55,135,55,55,55,135,-44,-45,-46,-57,55,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'STRING':([25,29,30,31,37,38,39,49,55,79,80,81,82,83,88,94,95,97,99,103,104,105,119,135,142,166,167,198,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[73,-16,-17,73,73,-52,73,73,73,-13,73,-29,73,73,-55,73,73,73,73,73,73,73,-15,73,73,73,73,73,73,73,-44,-45,-46,-57,73,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'FLOAT_TYPE':([25,29,30,31,37,38,39,48,49,55,79,80,81,82,83,84,88,94,95,97,99,103,104,105,110,119,124,135,142,166,167,171,172,173,174,175,176,177,178,179,180,181,196,198,203,215,220,221,222,230,236,237,239,243,244,245,246,249,251,252,253,],[75,-16,-17,75,75,-52,75,75,75,75,-13,75,-29,75,75,75,-55,75,75,75,75,75,75,75,75,-15,75,75,75,75,75,75,-68,-69,-70,-71,-72,-73,-74,-75,-76,75,75,75,75,75,-44,-45,-46,-57,75,-25,-26,75,-51,-27,-28,-54,-47,-48,-49,]),'DOUBLE_TYPE':([25,29,30,31,37,38,39,48,49,55,79,80,81,82,83,84,88,94,95,97,99,103,104,105,110,119,124,135,142,166,167,171,172,173,174,175,176,177,178,179,180,181,196,198,203,215,220,221,222,230,236,237,239,243,244,245,246,249,251,252,253,],[76,-16,-17,76,76,-52,76,76,76,76,-13,76,-29,76,76,76,-55,76,76,76,76,76,76,76,76,-15,76,76,76,76,76,76,-68,-69,-70,-71,-72,-73,-74,-75,-76,76,76,76,76,76,-44,-45,-46,-57,76,-25,-26,76,-51,-27,-28,-54,-47,-48,-49,]),'DECIMAL_TYPE':([25,29,30,31,37,38,39,48,49,55,79,80,81,82,83,84,88,94,95,97,99,103,104,105,110,119,124,135,142,166,167,171,172,173,174,175,176,177,178,179,180,181,196,198,203,215,220,221,222,230,236,237,239,243,244,245,246,249,251,252,253,],[77,-16,-17,77,77,-52,77,77,77,77,-13,77,-29,77,77,77,-55,77,77,77,77,77,77,77,77,-15,77,77,77,77,77,77,-68,-69,-70,-71,-72,-73,-74,-75,-76,77,77,77,77,77,-44,-45,-46,-57,77,-25,-26,77,-51,-27,-28,-54,-47,-48,-49,]),'INTEGER_TYPE':([25,29,30,31,37,38,39,48,49,55,79,80,81,82,83,84,88,94,95,97,99,103,104,105,110,119,124,135,142,166,167,171,172,173,174,175,176,177,178,179,180,181,196,198,203,215,220,221,222,230,236,237,239,243,244,245,246,249,251,252,253,],[56,-16,-17,56,56,-52,56,56,56,56,-13,56,-29,56,56,56,-55,56,56,147,56,56,56,56,56,-15,56,183,56,56,56,56,-68,-69,-70,-71,-72,-73,-74,-75,-76,56,56,218,56,56,-44,-45,-46,-57,56,-25,-26,56,-51,-27,-28,-54,-47,-48,-49,]),'MINUS':([25,29,30,31,33,37,38,39,43,46,47,48,49,50,55,56,57,71,72,73,75,76,77,79,80,81,82,83,84,85,86,88,94,95,97,99,103,104,105,106,107,108,109,110,114,116,119,120,121,122,123,124,134,135,142,143,145,146,147,148,149,150,151,152,153,155,156,157,158,165,166,167,171,172,173,174,175,176,177,178,179,180,181,182,183,184,189,190,191,192,193,194,196,198,203,206,207,208,215,217,218,219,220,221,222,230,236,237,239,243,244,245,246,249,251,252,253,],[48,-16,-17,48,83,48,-52,48,-97,-96,-89,48,48,-93,48,-104,-92,-98,-99,-100,-101,-102,-103,-13,48,-29,48,48,48,83,-97,-55,48,48,48,48,48,48,48,-105,-97,-93,83,48,83,-97,-15,-87,-96,-97,-88,48,-94,48,48,-33,83,-97,-104,83,-9,-11,83,-10,-12,83,-42,-90,-91,-95,48,48,48,-68,-69,-70,-71,-72,-73,-74,-75,-76,48,-97,-104,83,83,-34,-128,-127,-129,-41,48,48,48,-128,-127,-129,48,-97,-104,83,-44,-45,-46,-57,48,-25,-26,48,-51,-27,-28,-54,-47,-48,-49,]),'RBRACKET':([27,29,30,31,38,39,79,80,81,88,119,203,215,220,221,222,230,236,237,239,244,245,246,249,251,252,253,],[79,-16,-17,-18,-52,-53,-13,-14,-29,-55,-15,-43,-56,-44,-45,-46,-57,-50,-25,-26,-51,-27,-28,-54,-47,-48,-49,]),'PLUS':([33,43,46,47,50,56,57,71,72,73,75,76,77,85,86,106,107,108,109,114,116,120,121,122,123,134,143,145,146,147,148,149,150,151,152,153,155,156,157,158,165,182,183,184,189,190,191,192,193,194,206,207,208,217,218,219,],[82,-97,-96,-89,-93,-104,-92,-98,-99,-100,-101,-102,-103,82,-97,-105,-97,-93,82,82,-97,-87,-96,-97,-88,-94,-33,82,-97,-104,82,-9,-11,82,-10,-12,82,-42,-90,-91,-95,-97,-104,82,82,-34,-128,-127,-129,-41,-128,-127,-129,-97,-104,82,]),'EQUALS':([43,44,93,162,191,192,193,197,232,233,234,],[95,99,142,95,-131,-130,-132,142,-131,-130,-132,]),'PLUSONE':([43,162,],[96,96,]),'DOT':([43,45,86,87,107,116,117,122,129,133,146,182,217,],[98,101,98,101,98,98,101,98,98,101,98,98,98,]),'TIMES':([43,46,47,50,56,57,71,72,73,75,76,77,86,106,107,108,116,120,121,122,123,134,143,146,147,149,150,152,153,157,158,165,182,183,190,191,192,193,206,207,208,217,218,],[-97,-96,104,-93,-104,-92,-98,-99,-100,-101,-102,-103,-97,-105,-97,-93,-97,104,-96,-97,104,-94,-33,-97,-104,-9,-11,-10,-12,-90,-91,-95,-97,-104,-34,-128,-127,-129,-128,-127,-129,-97,-104,]),'DIVIDE':([43,46,47,50,56,57,71,72,73,75,76,77,86,106,107,108,116,120,121,122,123,134,143,146,147,149,150,152,153,157,158,165,182,183,190,191,192,193,206,207,208,217,218,],[-97,-96,105,-93,-104,-92,-98,-99,-100,-101,-102,-103,-97,-105,-97,-93,-97,105,-96,-97,105,-94,-33,-97,-104,-9,-11,-10,-12,-90,-91,-95,-97,-104,-34,-128,-127,-129,-128,-127,-129,-97,-104,]),'RPAREN':([46,47,50,56,57,71,72,73,75,76,77,85,86,94,96,100,103,106,114,115,116,117,120,121,122,123,125,126,127,128,129,130,131,132,134,143,144,145,149,150,151,152,153,155,156,157,158,159,165,169,189,190,194,199,200,202,204,205,206,207,208,210,211,212,224,226,228,229,238,242,248,],[-96,-89,-93,-104,-92,-98,-99,-100,-101,-102,-103,134,-97,143,-85,-86,156,-105,-35,-37,-23,-24,-87,-96,-97,-88,170,-60,-61,-62,-63,-64,-65,-66,-94,-33,190,-83,-9,-11,-84,-10,-12,194,-42,-90,-91,195,-95,202,-82,-34,-41,-36,-38,-67,-59,-58,-128,-127,-129,225,-106,227,-109,-107,240,241,-108,247,250,]),'COMMA':([46,47,50,56,57,71,72,73,75,76,77,106,114,115,116,117,120,121,122,123,134,143,149,150,152,153,156,157,158,165,190,194,206,207,208,211,224,],[-96,-89,-93,-104,-92,-98,-99,-100,-101,-102,-103,-105,166,167,-23,-24,-87,-96,-97,-88,-94,-33,-9,-11,-10,-12,-42,-90,-91,-95,-34,-41,-128,-127,-129,226,-109,]),'RSQBRACKET':([46,47,50,56,57,71,72,73,75,76,77,102,106,112,113,114,115,116,117,120,121,122,123,134,143,146,147,148,149,150,152,153,156,157,158,165,182,183,184,190,194,199,200,206,207,208,217,218,219,],[-96,-89,-93,-104,-92,-98,-99,-100,-101,-102,-103,154,-105,164,165,-35,-37,-23,-24,-87,-96,-97,-88,-94,-33,191,192,193,-9,-11,-10,-12,-42,-90,-91,-95,206,207,208,-34,-41,-36,-38,-128,-127,-129,232,233,234,]),'GREATER_THAN':([53,54,56,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,154,159,164,168,169,201,202,204,205,206,207,208,216,248,],[-114,-115,-104,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-77,-78,-101,-102,-103,-105,175,175,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,-81,175,-80,201,175,-79,-67,175,175,-128,-127,-129,175,175,]),'OR':([56,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,159,169,202,204,205,206,207,208,216,248,],[-104,-101,-102,-103,-105,172,172,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,172,172,-67,172,172,-128,-127,-129,172,172,]),'AND':([56,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,159,169,202,204,205,206,207,208,216,248,],[-104,-101,-102,-103,-105,173,173,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,173,173,-67,173,173,-128,-127,-129,173,173,]),'NOT':([56,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,159,169,202,204,205,206,207,208,216,248,],[-104,-101,-102,-103,-105,174,174,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,174,174,-67,174,174,-128,-127,-129,174,174,]),'LESS_THAN':([56,74,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,159,169,202,204,205,206,207,208,216,248,],[-104,118,-101,-102,-103,-105,176,176,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,176,176,-67,176,176,-128,-127,-129,176,176,]),'GREATER_EQUALS_THAN':([56,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,159,169,202,204,205,206,207,208,216,248,],[-104,-101,-102,-103,-105,177,177,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,177,177,-67,177,177,-128,-127,-129,177,177,]),'LESS_EQUALS_THAN':([56,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,159,169,202,204,205,206,207,208,216,248,],[-104,-101,-102,-103,-105,178,178,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,178,178,-67,178,178,-128,-127,-129,178,178,]),'EQUALITY':([56,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,159,169,202,204,205,206,207,208,216,248,],[-104,-101,-102,-103,-105,179,179,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,179,179,-67,179,179,-128,-127,-129,179,179,]),'DIFFERENT':([56,75,76,77,106,125,126,127,128,129,130,131,132,149,150,152,153,159,169,202,204,205,206,207,208,216,248,],[-104,-101,-102,-103,-105,180,180,-61,-62,-63,-64,-65,-66,-9,-11,-10,-12,180,180,-67,180,180,-128,-127,-129,180,180,]),'ELSE':([79,203,251,],[-13,223,223,]),'TRUE':([84,110,124,171,172,173,174,175,176,177,178,179,180,181,196,243,],[127,127,127,127,-68,-69,-70,-71,-72,-73,-74,-75,-76,127,127,127,]),'FALSE':([84,110,124,171,172,173,174,175,176,177,178,179,180,181,196,243,],[128,128,128,128,-68,-69,-70,-71,-72,-73,-74,-75,-76,128,128,128,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,31,39,80,203,215,236,],[9,9,40,40,40,40,40,40,40,]),'block':([22,26,170,195,223,225,227,240,241,247,250,],[24,78,203,215,236,237,239,245,246,249,251,]),'body':([25,31,39,80,203,215,236,],[27,81,88,119,220,230,244,]),'lines':([25,31,39,80,203,215,236,],[28,28,28,28,28,28,28,]),'if':([25,31,39,80,203,215,236,],[29,29,29,29,29,29,29,]),'loop':([25,31,39,80,203,215,236,],[30,30,30,30,30,30,30,]),'function':([25,31,39,80,203,215,236,],[31,31,31,31,31,31,31,]),'assignment':([25,31,39,80,111,203,215,231,236,],[32,32,32,32,160,32,32,242,32,]),'expression':([25,31,37,39,49,55,80,94,95,97,99,103,135,142,166,167,198,203,215,236,],[33,33,85,33,109,114,33,114,145,148,151,155,184,189,114,114,219,33,33,33,]),'declaration':([25,31,39,80,185,186,203,213,214,215,226,236,],[34,34,34,34,211,211,34,211,211,34,211,34,]),'return':([25,31,39,80,203,215,236,],[35,35,35,35,35,35,35,]),'while_loop':([25,31,39,80,203,215,236,],[38,38,38,38,38,38,38,]),'loop_for':([25,31,39,80,203,215,236,],[39,39,39,39,39,39,39,]),'data_type':([25,31,39,40,80,91,111,118,185,186,203,213,214,215,226,231,236,],[41,41,41,89,41,140,161,168,209,209,41,209,209,41,209,161,41,]),'names':([25,31,37,39,49,55,80,82,83,89,90,94,95,97,99,103,104,105,135,140,141,142,166,167,198,203,215,236,],[42,42,42,42,42,115,42,42,42,136,139,115,42,42,42,42,42,42,42,187,188,42,115,115,42,42,42,42,]),'indexing_asign':([25,31,39,80,111,203,215,231,236,],[44,44,44,44,44,44,44,44,44,]),'object_access':([25,31,37,39,49,55,80,82,83,84,94,95,97,99,103,104,105,110,124,135,142,166,167,171,181,196,198,203,215,236,243,],[46,46,46,46,46,46,46,121,121,132,46,46,46,46,46,121,121,132,132,46,46,46,46,132,132,132,46,46,46,46,132,]),'term':([25,31,37,39,49,55,80,82,83,94,95,97,99,103,135,142,166,167,198,203,215,236,],[47,47,47,47,47,47,47,120,123,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'type':([25,31,37,39,48,49,55,80,82,83,84,94,95,97,99,103,104,105,110,124,135,142,166,167,171,181,196,198,203,215,236,243,],[50,50,50,50,106,108,50,50,50,50,131,50,50,50,50,50,50,50,131,131,50,50,50,50,131,131,131,50,50,50,50,131,]),'primitive':([25,31,39,40,80,91,111,118,185,186,203,213,214,215,226,231,236,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'data_structure':([25,31,39,40,80,91,111,118,185,186,203,213,214,215,226,231,236,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'factor':([25,31,37,39,49,55,80,82,83,94,95,97,99,103,104,105,135,142,166,167,198,203,215,236,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,157,158,57,57,57,57,57,57,57,57,]),'data_structure_list':([25,31,39,40,80,91,111,118,185,186,203,213,214,215,226,231,236,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'data_structure_array':([25,31,39,40,80,91,111,118,185,186,203,213,214,215,226,231,236,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'indexing':([25,31,37,39,49,55,80,82,83,84,94,95,97,99,103,104,105,110,124,135,142,166,167,171,181,196,198,203,215,236,243,],[71,71,71,71,71,71,71,71,71,130,71,71,71,71,71,71,71,130,130,71,71,71,71,130,130,130,71,71,71,71,130,]),'function_call':([25,31,37,39,49,55,80,82,83,94,95,97,99,103,104,105,135,142,166,167,198,203,215,236,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'arguments':([55,94,166,167,],[113,144,199,200,]),'logical_expression':([84,110,124,171,181,196,243,],[125,159,169,204,205,216,248,]),'logical_factor':([84,110,124,171,181,196,243,],[126,126,126,126,126,126,126,]),'logical_operator':([125,126,159,169,204,205,216,248,],[171,181,171,171,171,171,171,171,]),'declarations':([185,186,213,214,226,],[210,212,228,229,238,]),'elseif':([203,251,],[221,252,]),'else':([203,251,],[222,253,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',78),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',79),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',83),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',84),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',88),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',92),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',95),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',96),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',100),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',101),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',102),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',103),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',126),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',131),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',132),
  ('body -> if','body',1,'p_body','PLY_yacc.py',133),
  ('body -> loop','body',1,'p_body','PLY_yacc.py',134),
  ('body -> function','body',1,'p_body','PLY_yacc.py',135),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',139),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',140),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',141),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',142),
  ('names -> ID','names',1,'p_names','PLY_yacc.py',147),
  ('names -> CLASSOBJECT','names',1,'p_names','PLY_yacc.py',148),
  ('function -> modifier data_type names LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',152),
  ('function -> modifier VOID names LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',153),
  ('function -> modifier STATIC data_type names LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',154),
  ('function -> modifier STATIC VOID names LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',155),
  ('function -> function body','function',2,'p_funtion','PLY_yacc.py',156),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',179),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',180),
  ('return -> RETURN expression','return',2,'p_return','PLY_yacc.py',181),
  ('function_call -> names LPAREN RPAREN','function_call',3,'p_function_call','PLY_yacc.py',184),
  ('function_call -> names LPAREN arguments RPAREN','function_call',4,'p_function_call','PLY_yacc.py',185),
  ('arguments -> expression','arguments',1,'p_arguments','PLY_yacc.py',188),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','PLY_yacc.py',189),
  ('arguments -> names','arguments',1,'p_arguments','PLY_yacc.py',190),
  ('arguments -> names COMMA arguments','arguments',3,'p_arguments','PLY_yacc.py',191),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',205),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',206),
  ('expression -> object_access LPAREN expression RPAREN','expression',4,'p_console_writeline','PLY_yacc.py',209),
  ('expression -> object_access LPAREN RPAREN','expression',3,'p_console_readline','PLY_yacc.py',216),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',225),
  ('if -> IF LPAREN logical_expression RPAREN block body','if',6,'p_if','PLY_yacc.py',226),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',227),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',228),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',236),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',237),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',238),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',246),
  ('else -> ELSE block body','else',3,'p_else','PLY_yacc.py',247),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',251),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',252),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',257),
  ('loop_for -> loop_for body','loop_for',2,'p_loop_for','PLY_yacc.py',258),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',271),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block body','while_loop',6,'p_while_loop','PLY_yacc.py',272),
  ('logical_expression -> logical_factor logical_operator logical_expression','logical_expression',3,'p_logical_expression','PLY_yacc.py',281),
  ('logical_expression -> logical_expression logical_operator logical_expression','logical_expression',3,'p_logical_expression','PLY_yacc.py',282),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',283),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',325),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',326),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',327),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',328),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',329),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',330),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',331),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',352),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',353),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',354),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',355),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',356),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',357),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',358),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',359),
  ('logical_operator -> DIFFERENT','logical_operator',1,'p_logical_operator','PLY_yacc.py',360),
  ('data_structure -> data_structure_list','data_structure',1,'p_data_structure','PLY_yacc.py',366),
  ('data_structure -> data_structure_array','data_structure',1,'p_data_structure','PLY_yacc.py',367),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN','data_structure_list',4,'p_data_structure_list','PLY_yacc.py',371),
  ('data_structure_array -> primitive LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',379),
  ('data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',380),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',384),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',397),
  ('assignment -> indexing_asign EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',398),
  ('assignment -> ID PLUSONE','assignment',2,'p_assignment_plus_one','PLY_yacc.py',415),
  ('assignment -> CLASSOBJECT ID','assignment',2,'p_assignment_class','PLY_yacc.py',431),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',444),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',445),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',446),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',462),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',463),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',464),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',479),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',480),
  ('factor -> LSQBRACKET arguments RSQBRACKET','factor',3,'p_factor','PLY_yacc.py',481),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',482),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',483),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',484),
  ('factor -> function_call','factor',1,'p_factor','PLY_yacc.py',485),
  ('factor -> STRING','factor',1,'p_factor','PLY_yacc.py',486),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',512),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',513),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',514),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',515),
  ('type -> MINUS type','type',2,'p_type','PLY_yacc.py',516),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',534),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',535),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',536),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',547),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',560),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',561),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',562),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',563),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',567),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',568),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',573),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',574),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',575),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',576),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',577),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',578),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',579),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',580),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',581),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',582),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',583),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',590),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',591),
  ('indexing -> ID LSQBRACKET expression RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',592),
  ('indexing_asign -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing_asign',4,'p_indexing_asign','PLY_yacc.py',610),
  ('indexing_asign -> ID LSQBRACKET ID RSQBRACKET','indexing_asign',4,'p_indexing_asign','PLY_yacc.py',611),
  ('indexing_asign -> ID LSQBRACKET expression RSQBRACKET','indexing_asign',4,'p_indexing_asign','PLY_yacc.py',612),
]
