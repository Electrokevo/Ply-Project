
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | functionlines : assignment \n    | expression \n    | declaration\n    | if\n    | loop\n    | returnfunction : modifier data_type ID LPAREN declarations RPAREN block\n                | modifier VOID ID LPAREN declarations RPAREN block\n                | modifier STATIC data_type ID LPAREN declarations RPAREN block\n                | modifier STATIC VOID ID LPAREN declarations RPAREN blockreturn : RETURN ID\n               | RETURN typelambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blocktype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPEif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE blockloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN blockwhile_loop : WHILE LPAREN logical_expression RPAREN blocklogical_expression : logical_expression logical_operator logical_factor\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | logical_expressiondata_structure_list : LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKETassignment : ID EQUALS expression\n                  | data_type ID EQUALS expression\n                  | CLASSOBJECT ID\n                  | ID EQUALS IDdeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | object_access\n    | ID\n    | indexmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTdata_structure : arrayarray : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETindex : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKETlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,70,71,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,72,],[10,10,-6,10,10,]),'PRIVATE':([3,7,20,25,72,],[11,11,-6,11,11,]),'PROTECTED':([3,7,20,25,72,],[12,12,-6,12,12,]),'INTERNAL':([3,7,20,25,72,],[13,13,-6,13,13,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,36,39,72,73,74,77,80,81,88,89,90,96,104,128,129,151,152,160,167,],[15,16,-72,-73,-74,-75,22,26,40,78,85,40,85,85,78,85,108,113,85,85,127,85,78,78,78,78,78,127,]),'CLASS':([9,10,11,12,13,19,],[18,-72,-73,-74,-75,23,]),'STATIC':([9,10,11,12,13,36,],[19,-72,-73,-74,-75,77,]),'VOID':([10,11,12,13,36,77,],[-72,-73,-74,-75,76,103,]),'INT':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,52,52,52,52,52,52,52,52,52,52,52,]),'FLOAT':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,53,53,53,53,53,53,53,53,53,53,53,]),'BOOL':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,54,54,54,54,54,54,54,54,54,54,54,]),'BYTE':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,55,55,55,55,55,55,55,55,55,55,55,]),'CHAR':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,56,56,56,56,56,56,56,56,56,56,56,]),'SBYTE':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,57,57,57,57,57,57,57,57,57,57,57,]),'DECIMAL':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,58,58,58,58,58,58,58,58,58,58,58,]),'DOUBLE':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,59,59,59,59,59,59,59,59,59,59,59,]),'LONG':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,60,60,60,60,60,60,60,60,60,60,60,]),'SHORT':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,61,61,61,61,61,61,61,61,61,61,61,]),'UINT':([10,11,12,13,25,36,72,77,96,128,129,151,152,160,167,],[-72,-73,-74,-75,62,62,62,62,62,62,62,62,62,62,62,]),'SEMICOLON':([15,16,28,30,31,32,33,34,35,38,41,43,44,46,49,64,65,66,67,68,69,71,79,84,86,92,93,98,99,105,106,107,108,111,113,114,115,116,118,119,120,121,124,132,133,134,153,154,155,156,157,164,165,174,181,183,184,185,],[20,21,72,-17,-18,-19,-20,-21,-22,-70,-63,-42,-43,-67,-66,-69,-71,-31,-32,-33,-34,-13,-60,-70,-55,-27,-28,-61,-62,-56,-53,-9,-11,-68,-10,-12,-64,-65,-47,-48,-49,-50,145,-54,-93,-92,-35,-51,-46,-45,167,-36,-37,-41,-44,-38,-39,-40,]),'LBRACKET':([22,26,135,144,159,161,166,171,172,179,182,],[25,25,25,25,25,25,25,25,25,25,25,]),'ID':([25,37,39,40,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,72,73,74,75,76,80,81,82,88,89,90,91,95,96,102,103,104,112,122,126,127,136,137,138,139,140,141,142,143,145,147,167,178,],[38,79,84,86,92,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,38,84,84,100,101,105,107,109,114,84,84,121,121,125,130,131,84,-91,-90,146,86,121,-94,-95,-96,-97,-98,-99,-100,121,158,125,121,]),'IF':([25,72,166,],[42,42,173,]),'RETURN':([25,72,],[45,45,]),'WHILE':([25,72,],[50,50,]),'FOR':([25,72,],[51,51,]),'LPAREN':([25,39,42,50,51,72,73,74,80,89,90,100,101,104,130,131,173,],[39,39,91,95,96,39,39,39,39,39,39,128,129,39,151,152,178,]),'FLOAT_TYPE':([25,39,45,72,73,74,80,89,90,104,],[66,66,66,66,66,66,66,66,66,66,]),'DOUBLE_TYPE':([25,39,45,72,73,74,80,89,90,104,],[67,67,67,67,67,67,67,67,67,67,]),'DECIMAL_TYPE':([25,39,45,72,73,74,80,89,90,104,],[68,68,68,68,68,68,68,68,68,68,]),'INTEGER_TYPE':([25,39,45,72,73,74,80,82,89,90,104,],[69,69,69,69,69,69,69,110,69,69,69,]),'RBRACKET':([27,29,71,72,97,168,170,176,177,],[71,-16,-13,-14,-15,-23,-24,-25,-26,]),'PLUS':([31,38,41,46,49,64,65,66,67,68,69,83,84,98,99,105,106,107,108,111,113,114,115,116,132,133,134,],[73,-70,-63,-67,-66,-69,-71,-31,-32,-33,-34,73,-70,-61,-62,-70,73,-9,-11,-68,-10,-12,-64,-65,73,-93,-92,]),'MINUS':([31,38,41,46,49,64,65,66,67,68,69,83,84,98,99,105,106,107,108,111,113,114,115,116,132,133,134,],[74,-70,-63,-67,-66,-69,-71,-31,-32,-33,-34,74,-70,-61,-62,-70,74,-9,-11,-68,-10,-12,-64,-65,74,-93,-92,]),'EQUALS':([38,79,125,146,],[80,104,80,104,]),'TIMES':([38,41,46,49,64,65,66,67,68,69,84,98,99,105,107,108,111,113,114,115,116,133,134,],[-70,89,-67,-66,-69,-71,-31,-32,-33,-34,-70,89,89,-70,-9,-11,-68,-10,-12,-64,-65,-93,-92,]),'DIVIDE':([38,41,46,49,64,65,66,67,68,69,84,98,99,105,107,108,111,113,114,115,116,133,134,],[-70,90,-67,-66,-69,-71,-31,-32,-33,-34,-70,90,90,-70,-9,-11,-68,-10,-12,-64,-65,-93,-92,]),'DOT':([38,40,84,85,105,],[81,88,81,88,81,]),'LSQBRACKET':([38,40,47,52,53,54,55,56,57,58,59,60,61,62,78,84,105,127,],[82,87,94,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,87,82,82,87,]),'RPAREN':([41,46,49,64,65,66,67,68,69,83,84,86,98,99,105,106,107,108,111,113,114,115,116,117,118,119,120,121,123,132,133,134,148,149,150,154,155,158,160,162,163,169,175,180,],[-63,-67,-66,-69,-71,-31,-32,-33,-34,111,-70,-55,-61,-62,-56,-53,-9,-11,-68,-10,-12,-64,-65,135,-47,-48,-49,-50,144,-54,-93,-92,159,-57,161,-51,-46,-60,-58,171,172,-59,179,182,]),'ELSE':([71,153,183,],[-13,166,166,]),'RSQBRACKET':([87,94,109,110,],[112,122,133,134,]),'TRUE':([91,95,136,137,138,139,140,141,142,143,145,178,],[119,119,119,-94,-95,-96,-97,-98,-99,-100,119,119,]),'FALSE':([91,95,136,137,138,139,140,141,142,143,145,178,],[120,120,120,-94,-95,-96,-97,-98,-99,-100,120,120,]),'OR':([117,118,119,120,121,123,154,155,157,180,],[137,-47,-48,-49,-50,137,137,-46,137,137,]),'AND':([117,118,119,120,121,123,154,155,157,180,],[138,-47,-48,-49,-50,138,138,-46,138,138,]),'NOT':([117,118,119,120,121,123,154,155,157,180,],[139,-47,-48,-49,-50,139,139,-46,139,139,]),'GREATER_THAN':([117,118,119,120,121,123,154,155,157,180,],[140,-47,-48,-49,-50,140,140,-46,140,140,]),'LESS_THAN':([117,118,119,120,121,123,154,155,157,180,],[141,-47,-48,-49,-50,141,141,-46,141,141,]),'GREATER_EQUALS_THAN':([117,118,119,120,121,123,154,155,157,180,],[142,-47,-48,-49,-50,142,142,-46,142,142,]),'LESS_EQUALS_THAN':([117,118,119,120,121,123,154,155,157,180,],[143,-47,-48,-49,-50,143,143,-46,143,143,]),'COMMA':([149,158,],[160,-60,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,72,],[9,9,36,36,]),'block':([22,26,135,144,159,161,166,171,172,179,182,],[24,70,153,156,168,170,174,176,177,181,183,]),'body':([25,72,],[27,97,]),'lines':([25,72,],[28,28,]),'function':([25,72,],[29,29,]),'assignment':([25,72,96,167,],[30,30,124,175,]),'expression':([25,39,72,80,104,],[31,83,31,106,132,]),'declaration':([25,72,128,129,151,152,160,],[32,32,149,149,149,149,149,]),'if':([25,72,],[33,33,]),'loop':([25,72,],[34,34,]),'return':([25,72,],[35,35,]),'data_type':([25,36,72,77,96,128,129,151,152,160,167,],[37,75,37,102,126,147,147,147,147,147,126,]),'term':([25,39,72,73,74,80,104,],[41,41,41,98,99,41,41,]),'while_loop':([25,72,],[43,43,]),'loop_for':([25,72,],[44,44,]),'type':([25,39,45,72,73,74,80,89,90,104,],[46,46,93,46,46,46,46,46,46,46,]),'primitive':([25,36,72,77,96,128,129,151,152,160,167,],[47,47,47,47,47,47,47,47,47,47,47,]),'data_structure':([25,36,72,77,96,128,129,151,152,160,167,],[48,48,48,48,48,48,48,48,48,48,48,]),'factor':([25,39,72,73,74,80,89,90,104,],[49,49,49,49,49,49,115,116,49,]),'array':([25,36,72,77,96,128,129,151,152,160,167,],[63,63,63,63,63,63,63,63,63,63,63,]),'object_access':([25,39,72,73,74,80,89,90,104,],[64,64,64,64,64,64,64,64,64,]),'index':([25,39,72,73,74,80,89,90,104,],[65,65,65,65,65,65,65,65,65,]),'logical_expression':([91,95,136,145,178,],[117,123,154,157,180,]),'logical_factor':([91,95,136,145,178,],[118,118,155,118,118,]),'logical_operator':([117,123,154,157,180,],[136,136,136,136,136,]),'declarations':([128,129,151,152,160,],[148,150,162,163,169,]),'elseif':([153,183,],[164,184,]),'else':([153,183,],[165,185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',26),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',27),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',31),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',32),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',36),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',40),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',43),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',44),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',48),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',49),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',50),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',51),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',54),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',58),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',59),
  ('body -> function','body',1,'p_body','PLY_yacc.py',60),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',64),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',65),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',66),
  ('lines -> if','lines',1,'p_lines','PLY_yacc.py',67),
  ('lines -> loop','lines',1,'p_lines','PLY_yacc.py',68),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',69),
  ('function -> modifier data_type ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',73),
  ('function -> modifier VOID ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',74),
  ('function -> modifier STATIC data_type ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',75),
  ('function -> modifier STATIC VOID ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',76),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',79),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',80),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',84),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',85),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',89),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',90),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',91),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',92),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',95),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',96),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',97),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',100),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',101),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',102),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',105),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',108),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',109),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',113),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',117),
  ('logical_expression -> logical_expression logical_operator logical_factor','logical_expression',3,'p_logical_expression','PLY_yacc.py',120),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',121),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',124),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',125),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',126),
  ('logical_factor -> logical_expression','logical_factor',1,'p_logical_factor','PLY_yacc.py',127),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET','data_structure_list',8,'p_data_structure_list','PLY_yacc.py',135),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','PLY_yacc.py',139),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',140),
  ('assignment -> CLASSOBJECT ID','assignment',2,'p_assignment','PLY_yacc.py',141),
  ('assignment -> ID EQUALS ID','assignment',3,'p_assignment','PLY_yacc.py',142),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',145),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',146),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',147),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',150),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',153),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',154),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',155),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',158),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',159),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',160),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',170),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',171),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',172),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',173),
  ('factor -> index','factor',1,'p_factor','PLY_yacc.py',174),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',181),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',182),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',183),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',184),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',187),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',188),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',191),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',192),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',193),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',194),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',195),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',196),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',197),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',198),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',199),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',200),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',201),
  ('data_structure -> array','data_structure',1,'p_data_structure','PLY_yacc.py',204),
  ('array -> primitive LSQBRACKET RSQBRACKET','array',3,'p_array','PLY_yacc.py',207),
  ('array -> CLASSOBJECT LSQBRACKET RSQBRACKET','array',3,'p_array','PLY_yacc.py',208),
  ('index -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','index',4,'p_index','PLY_yacc.py',211),
  ('index -> ID LSQBRACKET ID RSQBRACKET','index',4,'p_index','PLY_yacc.py',212),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',215),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',216),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',217),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',218),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',219),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',220),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',221),
]
