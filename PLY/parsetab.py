
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | functionlines : assignment \n    | expression \n    | declaration\n    | if\n    | loop\n    | returnfunction : modifier data_type ID LPAREN declarations RPAREN block\n                | modifier VOID ID LPAREN declarations RPAREN block\n                | modifier STATIC data_type ID LPAREN declarations RPAREN block\n                | modifier STATIC VOID ID LPAREN declarations RPAREN blockreturn : RETURN ID\n               | RETURN typelambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blockexpression : object_access LPAREN expression RPARENexpression : object_access LPAREN RPARENtype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPEif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE blockloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN blockwhile_loop : WHILE LPAREN logical_expression RPAREN blocklogical_expression : logical_expression logical_operator logical_factor\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITYdata_structure : data_structure_list\n                      | data_structure_arraydata_structure_list : LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKETdata_structure_array : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETassignment : ID EQUALS expression\n                  | data_type ID EQUALS expression\n                  | CLASSOBJECT IDdeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | object_access\n    | ID\n    | indexingmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,72,73,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,74,],[10,10,-6,10,10,]),'PRIVATE':([3,7,20,25,74,],[11,11,-6,11,11,]),'PROTECTED':([3,7,20,25,74,],[12,12,-6,12,12,]),'INTERNAL':([3,7,20,25,74,],[13,13,-6,13,13,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,36,39,74,75,76,79,82,83,89,91,92,93,94,98,99,100,110,124,140,141,150,151,152,153,154,155,156,157,158,160,167,168,177,184,197,],[15,16,-88,-89,-90,-91,22,26,40,80,87,40,87,87,80,87,113,117,87,87,87,87,87,138,80,87,87,80,80,87,-57,-58,-59,-60,-61,-62,-63,-64,87,80,80,80,138,87,]),'CLASS':([9,10,11,12,13,19,],[18,-88,-89,-90,-91,23,]),'STATIC':([9,10,11,12,13,36,],[19,-88,-89,-90,-91,79,]),'VOID':([10,11,12,13,36,79,],[-88,-89,-90,-91,78,109,]),'INT':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,53,53,53,53,53,53,53,53,53,53,53,53,]),'FLOAT':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,54,54,54,54,54,54,54,54,54,54,54,54,]),'BOOL':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,55,55,55,55,55,55,55,55,55,55,55,55,]),'BYTE':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,56,56,56,56,56,56,56,56,56,56,56,56,]),'CHAR':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,57,57,57,57,57,57,57,57,57,57,57,57,]),'SBYTE':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,58,58,58,58,58,58,58,58,58,58,58,58,]),'DECIMAL':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,59,59,59,59,59,59,59,59,59,59,59,59,]),'DOUBLE':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,60,60,60,60,60,60,60,60,60,60,60,60,]),'LONG':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,61,61,61,61,61,61,61,61,61,61,61,61,]),'SHORT':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,62,62,62,62,62,62,62,62,62,62,62,62,]),'UINT':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,63,63,63,63,63,63,63,63,63,63,63,63,]),'LIST':([10,11,12,13,25,36,74,79,99,100,140,141,167,168,177,184,],[-88,-89,-90,-91,67,67,67,67,67,67,67,67,67,67,67,67,]),'SEMICOLON':([15,16,28,30,31,32,33,34,35,38,41,42,44,45,47,50,66,68,69,70,71,73,81,86,88,95,96,102,103,104,105,111,112,113,116,117,118,121,122,123,126,127,128,129,130,131,132,135,144,145,146,147,169,170,171,172,173,181,182,192,201,203,204,205,],[20,21,74,-17,-18,-19,-20,-21,-22,-86,-85,-79,-44,-45,-83,-82,-87,-33,-34,-35,-36,-13,-76,-86,-72,-27,-28,-77,-85,-86,-78,-70,-9,-11,-84,-10,-12,-32,-80,-81,-49,-50,-51,-52,-53,-54,-55,160,-71,-106,-105,-31,-56,-37,-48,-47,184,-38,-39,-43,-46,-40,-41,-42,]),'LBRACKET':([22,26,149,159,176,178,183,189,190,198,202,],[25,25,25,25,25,25,25,25,25,25,25,]),'ID':([25,37,39,40,46,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,74,75,76,77,78,82,83,84,89,91,92,93,94,98,99,108,109,110,119,124,133,137,138,150,151,152,153,154,155,156,157,158,160,162,163,184,197,199,],[38,81,86,88,95,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-65,-66,38,104,104,106,107,86,112,114,118,86,104,104,129,129,136,142,143,86,-69,129,-68,161,88,129,-57,-58,-59,-60,-61,-62,-63,-64,129,174,175,136,129,-67,]),'IF':([25,74,183,],[43,43,191,]),'RETURN':([25,74,],[46,46,]),'WHILE':([25,74,],[51,51,]),'FOR':([25,74,],[52,52,]),'LPAREN':([25,39,41,43,51,52,74,75,76,82,91,92,93,94,98,106,107,110,112,113,117,118,124,142,143,150,151,152,153,154,155,156,157,158,160,191,197,],[39,39,91,94,98,99,39,39,39,39,39,39,39,124,124,140,141,39,-9,-11,-10,-12,124,167,168,124,-57,-58,-59,-60,-61,-62,-63,-64,124,197,124,]),'FLOAT_TYPE':([25,39,46,74,75,76,82,91,92,93,94,98,110,124,150,151,152,153,154,155,156,157,158,160,185,197,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-57,-58,-59,-60,-61,-62,-63,-64,68,68,68,]),'DOUBLE_TYPE':([25,39,46,74,75,76,82,91,92,93,94,98,110,124,150,151,152,153,154,155,156,157,158,160,185,197,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-57,-58,-59,-60,-61,-62,-63,-64,69,69,69,]),'DECIMAL_TYPE':([25,39,46,74,75,76,82,91,92,93,94,98,110,124,150,151,152,153,154,155,156,157,158,160,185,197,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-57,-58,-59,-60,-61,-62,-63,-64,70,70,70,]),'INTEGER_TYPE':([25,39,46,74,75,76,82,84,91,92,93,94,98,110,124,150,151,152,153,154,155,156,157,158,160,185,197,],[71,71,71,71,71,71,71,115,71,71,71,71,71,71,71,71,-57,-58,-59,-60,-61,-62,-63,-64,71,71,71,]),'RBRACKET':([27,29,73,74,101,186,188,195,196,],[73,-16,-13,-14,-15,-23,-24,-25,-26,]),'PLUS':([31,38,41,42,47,50,66,68,69,70,71,85,86,102,103,104,105,111,112,113,116,117,118,120,121,122,123,144,145,146,147,],[75,-86,-85,-79,-83,-82,-87,-33,-34,-35,-36,75,-86,-77,-85,-86,-78,75,-9,-11,-84,-10,-12,75,-32,-80,-81,75,-106,-105,-31,]),'MINUS':([31,38,41,42,47,50,66,68,69,70,71,85,86,102,103,104,105,111,112,113,116,117,118,120,121,122,123,144,145,146,147,],[76,-86,-85,-79,-83,-82,-87,-33,-34,-35,-36,76,-86,-77,-85,-86,-78,76,-9,-11,-84,-10,-12,76,-32,-80,-81,76,-106,-105,-31,]),'EQUALS':([38,81,136,161,],[82,110,82,110,]),'DOT':([38,40,86,87,104,129,],[83,89,83,89,83,83,]),'TIMES':([38,41,42,47,50,66,68,69,70,71,86,102,103,104,105,112,113,116,117,118,122,123,145,146,],[-86,-85,92,-83,-82,-87,-33,-34,-35,-36,-86,92,-85,-86,92,-9,-11,-84,-10,-12,-80,-81,-106,-105,]),'DIVIDE':([38,41,42,47,50,66,68,69,70,71,86,102,103,104,105,112,113,116,117,118,122,123,145,146,],[-86,-85,93,-83,-82,-87,-33,-34,-35,-36,-86,93,-85,-86,93,-9,-11,-84,-10,-12,-80,-81,-106,-105,]),'LSQBRACKET':([38,40,48,53,54,55,56,57,58,59,60,61,62,63,80,86,104,129,138,174,],[84,90,97,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,90,84,84,84,90,185,]),'RPAREN':([41,42,47,50,66,68,69,70,71,85,86,88,91,102,103,104,105,111,112,113,116,117,118,120,121,122,123,125,126,127,128,129,130,131,132,134,144,145,146,147,148,164,165,166,169,171,175,177,179,180,187,193,200,],[-85,-79,-83,-82,-87,-33,-34,-35,-36,116,-86,-72,121,-77,-85,-86,-78,-70,-9,-11,-84,-10,-12,147,-32,-80,-81,149,-49,-50,-51,-52,-53,-54,-55,159,-71,-106,-105,-31,169,176,-73,178,-56,-48,-76,-74,189,190,-75,198,202,]),'GREATER_THAN':([48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,68,69,70,71,112,113,117,118,119,125,126,127,128,129,130,131,132,133,134,139,145,146,148,169,171,173,199,200,],[-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-65,-66,-33,-34,-35,-36,-9,-11,-10,-12,-69,154,-49,-50,-51,-52,-53,-54,-55,-68,154,162,-106,-105,154,-56,-48,154,-67,154,]),'LESS_THAN':([67,68,69,70,71,112,113,117,118,125,126,127,128,129,130,131,132,134,145,146,148,169,171,173,200,],[100,-33,-34,-35,-36,-9,-11,-10,-12,155,-49,-50,-51,-52,-53,-54,-55,155,-106,-105,155,-56,-48,155,155,]),'OR':([68,69,70,71,112,113,117,118,125,126,127,128,129,130,131,132,134,145,146,148,169,171,173,200,],[-33,-34,-35,-36,-9,-11,-10,-12,151,-49,-50,-51,-52,-53,-54,-55,151,-106,-105,151,-56,-48,151,151,]),'AND':([68,69,70,71,112,113,117,118,125,126,127,128,129,130,131,132,134,145,146,148,169,171,173,200,],[-33,-34,-35,-36,-9,-11,-10,-12,152,-49,-50,-51,-52,-53,-54,-55,152,-106,-105,152,-56,-48,152,152,]),'NOT':([68,69,70,71,112,113,117,118,125,126,127,128,129,130,131,132,134,145,146,148,169,171,173,200,],[-33,-34,-35,-36,-9,-11,-10,-12,153,-49,-50,-51,-52,-53,-54,-55,153,-106,-105,153,-56,-48,153,153,]),'GREATER_EQUALS_THAN':([68,69,70,71,112,113,117,118,125,126,127,128,129,130,131,132,134,145,146,148,169,171,173,200,],[-33,-34,-35,-36,-9,-11,-10,-12,156,-49,-50,-51,-52,-53,-54,-55,156,-106,-105,156,-56,-48,156,156,]),'LESS_EQUALS_THAN':([68,69,70,71,112,113,117,118,125,126,127,128,129,130,131,132,134,145,146,148,169,171,173,200,],[-33,-34,-35,-36,-9,-11,-10,-12,157,-49,-50,-51,-52,-53,-54,-55,157,-106,-105,157,-56,-48,157,157,]),'EQUALITY':([68,69,70,71,112,113,117,118,125,126,127,128,129,130,131,132,134,145,146,148,169,171,173,200,],[-33,-34,-35,-36,-9,-11,-10,-12,158,-49,-50,-51,-52,-53,-54,-55,158,-106,-105,158,-56,-48,158,158,]),'RSQBRACKET':([68,69,70,71,90,97,114,115,194,],[-33,-34,-35,-36,119,133,145,146,199,]),'ELSE':([73,170,203,],[-13,183,183,]),'TRUE':([94,98,124,150,151,152,153,154,155,156,157,158,160,197,],[127,127,127,127,-57,-58,-59,-60,-61,-62,-63,-64,127,127,]),'FALSE':([94,98,124,150,151,152,153,154,155,156,157,158,160,197,],[128,128,128,128,-57,-58,-59,-60,-61,-62,-63,-64,128,128,]),'COMMA':([165,175,],[177,-76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,74,],[9,9,36,36,]),'block':([22,26,149,159,176,178,183,189,190,198,202,],[24,72,170,172,186,188,192,195,196,201,203,]),'body':([25,74,],[27,101,]),'lines':([25,74,],[28,28,]),'function':([25,74,],[29,29,]),'assignment':([25,74,99,184,],[30,30,135,193,]),'expression':([25,39,74,82,91,110,],[31,85,31,111,120,144,]),'declaration':([25,74,140,141,167,168,177,],[32,32,165,165,165,165,165,]),'if':([25,74,],[33,33,]),'loop':([25,74,],[34,34,]),'return':([25,74,],[35,35,]),'data_type':([25,36,74,79,99,100,140,141,167,168,177,184,],[37,77,37,108,137,139,163,163,163,163,163,137,]),'object_access':([25,39,74,75,76,82,91,92,93,94,98,110,124,150,160,197,],[41,41,41,103,103,41,41,103,103,132,132,41,132,132,132,132,]),'term':([25,39,74,75,76,82,91,110,],[42,42,42,102,105,42,42,42,]),'while_loop':([25,74,],[44,44,]),'loop_for':([25,74,],[45,45,]),'type':([25,39,46,74,75,76,82,91,92,93,94,98,110,124,150,160,185,197,],[47,47,96,47,47,47,47,47,47,47,131,131,47,131,131,131,194,131,]),'primitive':([25,36,74,79,99,100,140,141,167,168,177,184,],[48,48,48,48,48,48,48,48,48,48,48,48,]),'data_structure':([25,36,74,79,99,100,140,141,167,168,177,184,],[49,49,49,49,49,49,49,49,49,49,49,49,]),'factor':([25,39,74,75,76,82,91,92,93,110,],[50,50,50,50,50,50,50,122,123,50,]),'data_structure_list':([25,36,74,79,99,100,140,141,167,168,177,184,],[64,64,64,64,64,64,64,64,64,64,64,64,]),'data_structure_array':([25,36,74,79,99,100,140,141,167,168,177,184,],[65,65,65,65,65,65,65,65,65,65,65,65,]),'indexing':([25,39,74,75,76,82,91,92,93,94,98,110,124,150,160,197,],[66,66,66,66,66,66,66,66,66,130,130,66,130,130,130,130,]),'logical_expression':([94,98,124,160,197,],[125,134,148,173,200,]),'logical_factor':([94,98,124,150,160,197,],[126,126,126,171,126,126,]),'logical_operator':([125,134,148,173,200,],[150,150,150,150,150,]),'declarations':([140,141,167,168,177,],[164,166,179,180,187,]),'elseif':([170,203,],[181,204,]),'else':([170,203,],[182,205,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',26),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',27),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',31),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',32),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',36),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',40),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',43),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',44),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',48),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',49),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',50),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',51),
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',54),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',58),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',59),
  ('body -> function','body',1,'p_body','PLY_yacc.py',60),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',64),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',65),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',66),
  ('lines -> if','lines',1,'p_lines','PLY_yacc.py',67),
  ('lines -> loop','lines',1,'p_lines','PLY_yacc.py',68),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',69),
  ('function -> modifier data_type ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',73),
  ('function -> modifier VOID ID LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',74),
  ('function -> modifier STATIC data_type ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',75),
  ('function -> modifier STATIC VOID ID LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',76),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',79),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',80),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',84),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',85),
  ('expression -> object_access LPAREN expression RPAREN','expression',4,'p_console_writeline','PLY_yacc.py',88),
  ('expression -> object_access LPAREN RPAREN','expression',3,'p_console_readline','PLY_yacc.py',95),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',101),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',102),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',103),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',104),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',107),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',108),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',109),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',112),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',113),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',114),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',117),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',120),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',121),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',125),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',129),
  ('logical_expression -> logical_expression logical_operator logical_factor','logical_expression',3,'p_logical_expression','PLY_yacc.py',132),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',133),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',136),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',137),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',138),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',139),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',140),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',141),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',142),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',145),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',146),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',147),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',148),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',149),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',150),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',151),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',152),
  ('data_structure -> data_structure_list','data_structure',1,'p_data_structure','PLY_yacc.py',157),
  ('data_structure -> data_structure_array','data_structure',1,'p_data_structure','PLY_yacc.py',158),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET','data_structure_list',8,'p_data_structure_list','PLY_yacc.py',161),
  ('data_structure_array -> primitive LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',165),
  ('data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',166),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','PLY_yacc.py',169),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',170),
  ('assignment -> CLASSOBJECT ID','assignment',2,'p_assignment','PLY_yacc.py',171),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',174),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',175),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',176),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',179),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',182),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',183),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',184),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',187),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',188),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',189),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',199),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',200),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',201),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',202),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',203),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',210),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',211),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',212),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',213),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',216),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',217),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',220),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',221),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',222),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',223),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',224),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',225),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',226),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',227),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',228),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',229),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',230),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',235),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',236),
]
