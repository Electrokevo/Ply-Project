
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

<<<<<<< HEAD
_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | if\n            | loop\n            | functionlines : assignment \n    | expression \n    | declaration\n    | returnnames : ID\n    | CLASSOBJECTfunction : modifier data_type names LPAREN declarations RPAREN block\n                | modifier VOID names LPAREN declarations RPAREN block\n                | modifier STATIC data_type names LPAREN declarations RPAREN block\n                | modifier STATIC VOID names LPAREN declarations RPAREN blockreturn : RETURN ID\n               | RETURN typelambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blockexpression : object_access LPAREN expression RPARENexpression : object_access LPAREN RPARENif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block body\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE block\n    | ELSE block bodyloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block\n    | FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block bodywhile_loop : WHILE LPAREN logical_expression RPAREN block\n    | WHILE LPAREN logical_expression RPAREN block bodylogical_expression : logical_factor logical_operator logical_expression\n    | logical_expression logical_operator logical_expression\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITYdata_structure : data_structure_list\n                      | data_structure_arraydata_structure_list : LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKETdata_structure_array : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETassignment : data_type ID EQUALS expressionassignment : ID EQUALS expressionassignment_class : CLASSOBJECT IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | object_access\n    | ID\n    | indexingtype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPE\n    | MINUS typedeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,73,74,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,74,75,167,176,193,208,],[10,10,-6,10,-13,10,10,10,10,10,]),'PRIVATE':([3,7,20,25,74,75,167,176,193,208,],[11,11,-6,11,-13,11,11,11,11,11,]),'PROTECTED':([3,7,20,25,74,75,167,176,193,208,],[12,12,-6,12,-13,12,12,12,12,12,]),'INTERNAL':([3,7,20,25,74,75,167,176,193,208,],[13,13,-6,13,-13,13,13,13,13,13,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,37,40,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,77,78,82,83,84,87,88,90,91,92,96,97,99,101,107,121,122,123,137,140,144,145,146,147,148,149,150,151,152,153,154,155,163,167,174,175,176,185,190,193,201,206,208,],[15,16,-96,-97,-98,-99,22,26,52,81,85,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-68,-69,-13,52,81,81,81,119,119,85,81,126,81,81,81,81,85,138,85,81,119,119,81,-71,-72,81,-60,-61,-62,-63,-64,-65,-66,-67,81,85,85,81,52,85,85,52,85,85,52,81,-70,52,]),'CLASS':([9,10,11,12,13,19,],[18,-96,-97,-98,-99,23,]),'STATIC':([9,10,11,12,13,40,],[19,-96,-97,-98,-99,84,]),'VOID':([10,11,12,13,40,84,],[-96,-97,-98,-99,83,122,]),'INT':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,54,54,-13,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FLOAT':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,55,55,-13,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'BOOL':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,56,56,-13,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'BYTE':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,57,57,-13,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'CHAR':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,58,58,-13,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'SBYTE':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,59,59,-13,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'DECIMAL':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,60,60,-13,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'DOUBLE':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,61,61,-13,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'LONG':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,62,62,-13,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'SHORT':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,63,63,-13,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'UINT':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,64,64,-13,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'LIST':([10,11,12,13,25,40,74,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[-96,-97,-98,-99,68,68,-13,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'SEMICOLON':([15,16,28,32,33,34,35,42,43,44,47,53,67,69,70,71,72,80,86,93,94,95,103,104,105,106,109,110,111,112,113,114,115,116,124,125,126,130,131,132,134,138,139,158,159,160,161,166,168,169,177,],[20,21,75,-19,-20,-21,-22,-85,-84,-78,-82,-81,-86,-87,-88,-89,-90,-85,-95,-91,-29,-30,-76,-84,-85,-77,-52,-53,-54,-55,-56,-57,-58,-83,-74,-9,-11,-34,-79,-80,163,-10,-12,-73,-114,-113,-33,-59,-51,-50,190,]),'LBRACKET':([22,26,143,162,182,184,186,197,198,205,209,],[25,25,25,25,25,25,25,25,25,25,25,]),'IF':([25,74,75,167,176,182,193,208,],[36,-13,36,36,36,192,36,36,]),'ID':([25,37,41,46,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,74,75,76,77,78,82,83,87,88,89,90,91,92,96,97,99,107,121,122,123,135,137,140,144,145,146,147,148,149,150,151,152,153,163,165,167,170,176,190,193,201,206,208,],[42,80,86,94,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-68,-69,-13,42,105,105,112,118,118,80,125,127,80,105,105,112,136,139,112,118,118,80,164,-71,-72,112,-60,-61,-62,-63,-64,-65,-66,-67,112,112,178,42,183,42,136,42,112,-70,42,]),'RETURN':([25,74,75,167,176,193,208,],[46,-13,46,46,46,46,46,]),'WHILE':([25,74,75,167,176,193,208,],[48,-13,48,48,48,48,48,]),'FOR':([25,74,75,167,176,193,208,],[49,-13,49,49,49,49,49,]),'LPAREN':([25,36,37,43,48,49,74,75,76,77,78,87,90,91,92,96,107,117,118,119,120,123,125,126,138,139,144,145,146,147,148,149,150,151,152,153,156,157,163,167,176,192,193,201,208,],[37,78,37,90,96,97,-13,37,37,37,107,37,37,37,37,107,107,154,-23,-24,155,37,-9,-11,-10,-12,107,-60,-61,-62,-63,-64,-65,-66,-67,107,174,175,107,37,37,201,37,107,37,]),'FLOAT_TYPE':([25,37,45,46,74,75,76,77,78,87,90,91,92,96,107,123,144,145,146,147,148,149,150,151,152,153,163,167,176,191,193,201,208,],[69,69,69,69,-13,69,69,69,69,69,69,69,69,69,69,69,69,-60,-61,-62,-63,-64,-65,-66,-67,69,69,69,69,69,69,69,69,]),'DOUBLE_TYPE':([25,37,45,46,74,75,76,77,78,87,90,91,92,96,107,123,144,145,146,147,148,149,150,151,152,153,163,167,176,191,193,201,208,],[70,70,70,70,-13,70,70,70,70,70,70,70,70,70,70,70,70,-60,-61,-62,-63,-64,-65,-66,-67,70,70,70,70,70,70,70,70,]),'DECIMAL_TYPE':([25,37,45,46,74,75,76,77,78,87,90,91,92,96,107,123,144,145,146,147,148,149,150,151,152,153,163,167,176,191,193,201,208,],[71,71,71,71,-13,71,71,71,71,71,71,71,71,71,71,71,71,-60,-61,-62,-63,-64,-65,-66,-67,71,71,71,71,71,71,71,71,]),'INTEGER_TYPE':([25,37,45,46,74,75,76,77,78,87,89,90,91,92,96,107,123,144,145,146,147,148,149,150,151,152,153,163,167,176,191,193,201,208,],[72,72,72,72,-13,72,72,72,72,72,128,72,72,72,72,72,72,72,-60,-61,-62,-63,-64,-65,-66,-67,72,72,72,72,72,72,72,72,]),'MINUS':([25,33,37,42,43,44,45,46,47,53,67,69,70,71,72,74,75,76,77,78,79,80,87,90,91,92,93,96,103,104,105,106,107,116,123,124,125,126,129,130,131,132,138,139,144,145,146,147,148,149,150,151,152,153,158,159,160,161,163,167,176,191,193,201,208,],[45,77,45,-85,-84,-78,45,45,-82,-81,-86,-87,-88,-89,-90,-13,45,45,45,45,77,-85,45,45,45,45,-91,45,-76,-84,-85,-77,45,-83,45,77,-9,-11,77,-34,-79,-80,-10,-12,45,-60,-61,-62,-63,-64,-65,-66,-67,45,77,-114,-113,-33,45,45,45,45,45,45,45,]),'RBRACKET':([27,29,30,31,38,39,74,75,102,167,176,179,180,181,189,193,194,196,202,203,204,208,210,211,212,213,],[74,-16,-17,-18,-44,-45,-13,-14,-15,-35,-48,-36,-37,-38,-49,-42,-25,-26,-43,-27,-28,-46,-47,-39,-40,-41,]),'PLUS':([33,42,43,44,47,53,67,69,70,71,72,79,80,93,103,104,105,106,116,124,125,126,129,130,131,132,138,139,158,159,160,161,],[76,-85,-84,-78,-82,-81,-86,-87,-88,-89,-90,76,-85,-91,-76,-84,-85,-77,-83,76,-9,-11,76,-34,-79,-80,-10,-12,76,-114,-113,-33,]),'EQUALS':([42,86,136,164,],[87,123,87,123,]),'DOT':([42,52,80,81,105,112,],[88,99,88,99,88,88,]),'TIMES':([42,43,44,47,53,67,69,70,71,72,80,93,103,104,105,106,116,125,126,131,132,138,139,159,160,],[-85,-84,91,-82,-81,-86,-87,-88,-89,-90,-85,-91,91,-84,-85,91,-83,-9,-11,-79,-80,-10,-12,-114,-113,]),'DIVIDE':([42,43,44,47,53,67,69,70,71,72,80,93,103,104,105,106,116,125,126,131,132,138,139,159,160,],[-85,-84,92,-82,-81,-86,-87,-88,-89,-90,-85,-91,92,-84,-85,92,-83,-9,-11,-79,-80,-10,-12,-114,-113,]),'LSQBRACKET':([42,50,52,54,55,56,57,58,59,60,61,62,63,64,80,85,105,112,178,],[89,98,100,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,89,100,89,89,191,]),'RPAREN':([43,44,47,53,67,69,70,71,72,79,80,90,93,103,104,105,106,108,109,110,111,112,113,114,115,116,124,125,126,129,130,131,132,133,138,139,142,158,159,160,161,166,168,169,171,172,173,183,185,187,188,195,199,207,],[-84,-78,-82,-81,-86,-87,-88,-89,-90,116,-85,130,-91,-76,-84,-85,-77,143,-52,-53,-54,-55,-56,-57,-58,-83,-74,-9,-11,161,-34,-79,-80,162,-10,-12,166,-73,-114,-113,-33,-59,-51,-50,184,-92,186,-95,-93,197,198,-94,205,209,]),'GREATER_THAN':([50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,93,108,109,110,111,112,113,114,115,125,126,133,137,138,139,140,141,142,159,160,166,168,169,177,206,207,],[-100,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-68,-69,-87,-88,-89,-90,-91,148,148,-53,-54,-55,-56,-57,-58,-9,-11,148,-71,-10,-12,-72,165,148,-114,-113,-59,148,148,148,-70,148,]),'LESS_THAN':([68,69,70,71,72,93,108,109,110,111,112,113,114,115,125,126,133,138,139,142,159,160,166,168,169,177,207,],[101,-87,-88,-89,-90,-91,149,149,-53,-54,-55,-56,-57,-58,-9,-11,149,-10,-12,149,-114,-113,-59,149,149,149,149,]),'OR':([69,70,71,72,93,108,109,110,111,112,113,114,115,125,126,133,138,139,142,159,160,166,168,169,177,207,],[-87,-88,-89,-90,-91,145,145,-53,-54,-55,-56,-57,-58,-9,-11,145,-10,-12,145,-114,-113,-59,145,145,145,145,]),'AND':([69,70,71,72,93,108,109,110,111,112,113,114,115,125,126,133,138,139,142,159,160,166,168,169,177,207,],[-87,-88,-89,-90,-91,146,146,-53,-54,-55,-56,-57,-58,-9,-11,146,-10,-12,146,-114,-113,-59,146,146,146,146,]),'NOT':([69,70,71,72,93,108,109,110,111,112,113,114,115,125,126,133,138,139,142,159,160,166,168,169,177,207,],[-87,-88,-89,-90,-91,147,147,-53,-54,-55,-56,-57,-58,-9,-11,147,-10,-12,147,-114,-113,-59,147,147,147,147,]),'GREATER_EQUALS_THAN':([69,70,71,72,93,108,109,110,111,112,113,114,115,125,126,133,138,139,142,159,160,166,168,169,177,207,],[-87,-88,-89,-90,-91,150,150,-53,-54,-55,-56,-57,-58,-9,-11,150,-10,-12,150,-114,-113,-59,150,150,150,150,]),'LESS_EQUALS_THAN':([69,70,71,72,93,108,109,110,111,112,113,114,115,125,126,133,138,139,142,159,160,166,168,169,177,207,],[-87,-88,-89,-90,-91,151,151,-53,-54,-55,-56,-57,-58,-9,-11,151,-10,-12,151,-114,-113,-59,151,151,151,151,]),'EQUALITY':([69,70,71,72,93,108,109,110,111,112,113,114,115,125,126,133,138,139,142,159,160,166,168,169,177,207,],[-87,-88,-89,-90,-91,152,152,-53,-54,-55,-56,-57,-58,-9,-11,152,-10,-12,152,-114,-113,-59,152,152,152,152,]),'RSQBRACKET':([69,70,71,72,93,98,100,127,128,200,],[-87,-88,-89,-90,-91,137,140,159,160,206,]),'ELSE':([74,167,211,],[-13,182,182,]),'TRUE':([78,96,107,144,145,146,147,148,149,150,151,152,153,163,201,],[110,110,110,110,-60,-61,-62,-63,-64,-65,-66,-67,110,110,110,]),'FALSE':([78,96,107,144,145,146,147,148,149,150,151,152,153,163,201,],[111,111,111,111,-60,-61,-62,-63,-64,-65,-66,-67,111,111,111,]),'COMMA':([172,183,],[185,-95,]),}
=======
_lr_signature = 'AND ARROW BOOL BYTE CHAR CHARACTER CLASS CLASSOBJECT COMMA DECIMAL DECIMAL_TYPE DIVIDE DIVIDE_EQUAL DO DOT DOUBLE DOUBLE_TYPE ELSE EQUALITY EQUALS FALSE FILE FLOAT FLOAT_TYPE FOR GREATER_EQUALS_THAN GREATER_THAN ID IF IN INT INTEGER_TYPE INTERNAL LBRACKET LESS_EQUALS_THAN LESS_THAN LIST LONG LPAREN LSQBRACKET MINUS MINUS_EQUAL MODULE MODULE_EQUAL NAMESPACE NEW NINT NOT NUINT OR PLUS PLUSONE PLUS_EQUAL PRIVATE PROTECTED PUBLIC RBRACKET RETURN RPAREN RSQBRACKET SBYTE SEMICOLON SHORT STATIC STRING THEN TIMES TIMES_EQUAL TRUE UINT ULONG USHORT USING VAR VOID WHILEprogram : usings namespace class\n    | namespace classusings : using usings\n    | usingusing : USING CLASSOBJECT SEMICOLONnamespace : NAMESPACE CLASSOBJECT SEMICOLONclass : modifier CLASS CLASSOBJECT block\n    | modifier STATIC CLASS CLASSOBJECT blockobject_access : ID DOT ID\n    | CLASSOBJECT DOT CLASSOBJECT\n    | ID DOT CLASSOBJECT\n    | CLASSOBJECT DOT IDblock : LBRACKET body RBRACKETbody : lines SEMICOLON\n            | lines SEMICOLON body\n            | if\n            | loop\n            | functionlines : assignment \n    | expression \n    | declaration\n    | returnnames : ID\n            | CLASSOBJECTfunction : modifier data_type names LPAREN declarations RPAREN block\n                | modifier VOID names LPAREN declarations RPAREN block\n                | modifier STATIC data_type names LPAREN declarations RPAREN block\n                | modifier STATIC VOID names LPAREN declarations RPAREN block\n                | function bodyreturn : RETURN ID\n               | RETURN type\n               | RETURN expressionfunction_call : names LPAREN RPAREN\n                     | names LPAREN arguments RPARENarguments : expression\n                 | expression COMMA arguments\n                 | names\n                 | names COMMA argumentslambda_function : LPAREN ID RPAREN ARROW expression\n                       | LPAREN ID RPAREN ARROW blockexpression : object_access LPAREN expression RPARENexpression : object_access LPAREN RPARENif : IF LPAREN logical_expression RPAREN block\n    | IF LPAREN logical_expression RPAREN block body\n    | IF LPAREN logical_expression RPAREN block elseif\n    | IF LPAREN logical_expression RPAREN block elseelseif : ELSE IF LPAREN logical_expression RPAREN block\n    | ELSE IF LPAREN logical_expression RPAREN block elseif\n    | ELSE IF LPAREN logical_expression RPAREN block elseelse : ELSE block\n    | ELSE block bodyloop : while_loop\n            | loop_forloop_for : FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block\n    | FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block bodywhile_loop : WHILE LPAREN logical_expression RPAREN block\n    | WHILE LPAREN logical_expression RPAREN block bodylogical_expression : logical_expression logical_operator logical_factor\n    | logical_factorlogical_factor : TRUE\n    | FALSE\n    | ID\n    | indexing\n    | type\n    | object_access\n    | LPAREN logical_expression RPARENlogical_operator : OR\n    | AND\n    | NOT\n    | GREATER_THAN\n    | LESS_THAN\n    | GREATER_EQUALS_THAN\n    | LESS_EQUALS_THAN\n    | EQUALITYdata_structure : data_structure_list\n                      | data_structure_arraydata_structure_list : LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKETdata_structure_array : primitive LSQBRACKET RSQBRACKET\n    | CLASSOBJECT LSQBRACKET RSQBRACKETassignment : data_type ID EQUALS expressionassignment : ID EQUALS expression\n                | indexing EQUALS expressionassignment : ID PLUSONEassignment_class : CLASSOBJECT IDexpression : expression PLUS term\n    | expression MINUS term\n    | termterm : term TIMES factor\n    | term DIVIDE factor\n    | factorfactor : type\n    | LPAREN expression RPAREN\n    | object_access\n    | ID\n    | indexing\n    | function_calltype : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | DECIMAL_TYPE\n    | INTEGER_TYPE\n    | MINUS typedeclarations : declaration\n    | declaration COMMA\n    | declaration COMMA declarationsdeclaration : data_type IDmodifier : PUBLIC \n    | PRIVATE \n    | PROTECTED \n    | INTERNAL data_type : primitive\n    | data_structureprimitive : INT \n    | FLOAT \n    | BOOL \n    | BYTE \n    | CHAR \n    | SBYTE \n    | DECIMAL \n    | DOUBLE \n    | LONG \n    | SHORT \n    | UINTindexing : ID LSQBRACKET INTEGER_TYPE RSQBRACKET\n    | ID LSQBRACKET ID RSQBRACKET\n    | ID LSQBRACKET expression RSQBRACKET'
    
_lr_action_items = {'NAMESPACE':([0,2,4,14,21,],[5,5,-4,-3,-5,]),'USING':([0,4,21,],[6,6,-5,]),'$end':([1,8,17,24,75,76,],[0,-2,-1,-7,-8,-13,]),'PUBLIC':([3,7,20,25,29,30,31,38,39,76,77,78,110,188,198,201,202,203,211,215,216,218,224,225,226,230,232,233,234,235,],[10,10,-6,10,-16,-17,10,-52,-53,-13,10,-29,-15,10,10,-44,-45,-46,-57,10,-25,-26,-51,-27,-28,10,-55,-47,-48,-49,]),'PRIVATE':([3,7,20,25,29,30,31,38,39,76,77,78,110,188,198,201,202,203,211,215,216,218,224,225,226,230,232,233,234,235,],[11,11,-6,11,-16,-17,11,-52,-53,-13,11,-29,-15,11,11,-44,-45,-46,-57,11,-25,-26,-51,-27,-28,11,-55,-47,-48,-49,]),'PROTECTED':([3,7,20,25,29,30,31,38,39,76,77,78,110,188,198,201,202,203,211,215,216,218,224,225,226,230,232,233,234,235,],[12,12,-6,12,-16,-17,12,-52,-53,-13,12,-29,-15,12,12,-44,-45,-46,-57,12,-25,-26,-51,-27,-28,12,-55,-47,-48,-49,]),'INTERNAL':([3,7,20,25,29,30,31,38,39,76,77,78,110,188,198,201,202,203,211,215,216,218,224,225,226,230,232,233,234,235,],[13,13,-6,13,-16,-17,13,-52,-53,-13,13,-29,-15,13,13,-44,-45,-46,-57,13,-25,-26,-51,-27,-28,13,-55,-47,-48,-49,]),'CLASSOBJECT':([5,6,10,11,12,13,18,23,25,29,30,31,37,38,39,40,48,52,53,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,78,79,80,81,86,87,88,91,92,94,95,96,97,98,99,104,105,107,109,110,115,130,131,132,155,158,162,163,164,165,166,167,168,169,170,171,172,176,178,184,188,194,195,198,201,202,203,207,211,212,215,216,218,223,224,225,226,228,230,232,233,234,235,],[15,16,-106,-107,-108,-109,22,26,55,-16,-17,55,84,-52,-53,89,84,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-75,-76,-13,55,-29,84,84,124,128,128,89,138,84,84,144,84,84,84,84,124,89,156,89,-15,124,128,128,84,-78,-79,124,-67,-68,-69,-70,-71,-72,-73,-74,89,89,138,138,124,55,89,89,55,-44,-45,-46,89,-57,89,55,-25,-26,124,-51,-27,-28,-77,55,-55,-47,-48,-49,]),'CLASS':([9,10,11,12,13,19,],[18,-106,-107,-108,-109,23,]),'STATIC':([9,10,11,12,13,40,],[19,-106,-107,-108,-109,88,]),'VOID':([10,11,12,13,40,88,],[-106,-107,-108,-109,87,131,]),'INT':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,57,-16,-17,57,-52,-53,57,-13,57,-29,57,57,57,-15,57,57,57,57,57,57,-44,-45,-46,57,-57,57,57,-25,-26,-51,-27,-28,57,-55,-47,-48,-49,]),'FLOAT':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,58,-16,-17,58,-52,-53,58,-13,58,-29,58,58,58,-15,58,58,58,58,58,58,-44,-45,-46,58,-57,58,58,-25,-26,-51,-27,-28,58,-55,-47,-48,-49,]),'BOOL':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,59,-16,-17,59,-52,-53,59,-13,59,-29,59,59,59,-15,59,59,59,59,59,59,-44,-45,-46,59,-57,59,59,-25,-26,-51,-27,-28,59,-55,-47,-48,-49,]),'BYTE':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,60,-16,-17,60,-52,-53,60,-13,60,-29,60,60,60,-15,60,60,60,60,60,60,-44,-45,-46,60,-57,60,60,-25,-26,-51,-27,-28,60,-55,-47,-48,-49,]),'CHAR':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,61,-16,-17,61,-52,-53,61,-13,61,-29,61,61,61,-15,61,61,61,61,61,61,-44,-45,-46,61,-57,61,61,-25,-26,-51,-27,-28,61,-55,-47,-48,-49,]),'SBYTE':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,62,-16,-17,62,-52,-53,62,-13,62,-29,62,62,62,-15,62,62,62,62,62,62,-44,-45,-46,62,-57,62,62,-25,-26,-51,-27,-28,62,-55,-47,-48,-49,]),'DECIMAL':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,63,-16,-17,63,-52,-53,63,-13,63,-29,63,63,63,-15,63,63,63,63,63,63,-44,-45,-46,63,-57,63,63,-25,-26,-51,-27,-28,63,-55,-47,-48,-49,]),'DOUBLE':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,64,-16,-17,64,-52,-53,64,-13,64,-29,64,64,64,-15,64,64,64,64,64,64,-44,-45,-46,64,-57,64,64,-25,-26,-51,-27,-28,64,-55,-47,-48,-49,]),'LONG':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,65,-16,-17,65,-52,-53,65,-13,65,-29,65,65,65,-15,65,65,65,65,65,65,-44,-45,-46,65,-57,65,65,-25,-26,-51,-27,-28,65,-55,-47,-48,-49,]),'SHORT':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,66,-16,-17,66,-52,-53,66,-13,66,-29,66,66,66,-15,66,66,66,66,66,66,-44,-45,-46,66,-57,66,66,-25,-26,-51,-27,-28,66,-55,-47,-48,-49,]),'UINT':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,67,-16,-17,67,-52,-53,67,-13,67,-29,67,67,67,-15,67,67,67,67,67,67,-44,-45,-46,67,-57,67,67,-25,-26,-51,-27,-28,67,-55,-47,-48,-49,]),'LIST':([10,11,12,13,25,29,30,31,38,39,40,76,77,78,88,105,109,110,171,172,188,194,195,198,201,202,203,207,211,212,215,216,218,224,225,226,230,232,233,234,235,],[-106,-107,-108,-109,71,-16,-17,71,-52,-53,71,-13,71,-29,71,71,71,-15,71,71,71,71,71,71,-44,-45,-46,71,-57,71,71,-25,-26,-51,-27,-28,71,-55,-47,-48,-49,]),'SEMICOLON':([15,16,28,32,33,34,35,43,44,45,46,49,54,56,70,72,73,74,83,85,90,93,100,101,102,103,111,112,113,114,117,118,119,120,121,122,123,125,134,139,143,144,145,147,148,149,151,156,157,175,177,179,180,181,182,187,189,199,],[20,21,77,-19,-20,-21,-22,-94,-95,-93,-87,-91,-100,-90,-96,-97,-98,-99,-94,-95,-105,-83,-101,-30,-31,-32,-85,-93,-94,-86,-59,-60,-61,-62,-63,-64,-65,-92,-33,-81,-9,-11,-82,-42,-88,-89,184,-10,-12,-80,-34,-124,-123,-125,-41,-66,-58,212,]),'LBRACKET':([22,26,161,183,204,206,208,219,220,227,231,],[25,25,25,25,25,25,25,25,25,25,25,]),'IF':([25,29,30,31,38,39,76,77,78,110,188,198,201,202,203,204,211,215,216,218,224,225,226,230,232,233,234,235,],[36,-16,-17,36,-52,-53,-13,36,-29,-15,36,36,-44,-45,-46,214,-57,36,-25,-26,-51,-27,-28,36,-55,-47,-48,-49,]),'ID':([25,29,30,31,37,38,39,41,48,52,53,57,58,59,60,61,62,63,64,65,66,67,68,69,76,77,78,79,80,81,86,87,91,92,94,95,96,97,98,99,104,105,107,110,115,130,131,132,152,155,158,162,163,164,165,166,167,168,169,170,176,178,184,186,188,190,198,201,202,203,211,212,215,216,218,223,224,225,226,228,230,232,233,234,235,],[43,-16,-17,43,83,-52,-53,90,101,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-75,-76,-13,43,-29,113,113,120,127,127,137,83,140,143,83,83,113,113,120,153,157,-15,120,127,127,83,185,-78,-79,120,-67,-68,-69,-70,-71,-72,-73,-74,137,137,120,200,43,205,43,-44,-45,-46,-57,153,43,-25,-26,120,-51,-27,-28,-77,43,-55,-47,-48,-49,]),'RETURN':([25,29,30,31,38,39,76,77,78,110,188,198,201,202,203,211,215,216,218,224,225,226,230,232,233,234,235,],[48,-16,-17,48,-52,-53,-13,48,-29,-15,48,48,-44,-45,-46,-57,48,-25,-26,-51,-27,-28,48,-55,-47,-48,-49,]),'WHILE':([25,29,30,31,38,39,76,77,78,110,188,198,201,202,203,211,215,216,218,224,225,226,230,232,233,234,235,],[50,-16,-17,50,-52,-53,-13,50,-29,-15,50,50,-44,-45,-46,-57,50,-25,-26,-51,-27,-28,50,-55,-47,-48,-49,]),'FOR':([25,29,30,31,38,39,76,77,78,110,188,198,201,202,203,211,215,216,218,224,225,226,230,232,233,234,235,],[51,-16,-17,51,-52,-53,-13,51,-29,-15,51,51,-44,-45,-46,-57,51,-25,-26,-51,-27,-28,51,-55,-47,-48,-49,]),'LPAREN':([25,29,30,31,36,37,38,39,42,43,45,48,50,51,55,76,77,78,79,80,81,83,84,91,92,94,96,97,98,99,101,104,110,113,115,126,127,128,129,132,133,137,138,140,143,144,156,157,162,163,164,165,166,167,168,169,170,173,174,176,178,184,188,198,201,202,203,211,214,215,216,218,223,224,225,226,230,232,233,234,235,],[37,-16,-17,37,81,37,-52,-53,91,-23,97,37,104,105,-24,-13,37,-29,37,37,115,-23,-24,37,37,37,37,37,37,37,-23,115,-15,-23,115,171,-23,-24,172,37,91,-23,-24,-23,-9,-11,-10,-12,115,-67,-68,-69,-70,-71,-72,-73,-74,194,195,37,37,115,37,37,-44,-45,-46,-57,223,37,-25,-26,115,-51,-27,-28,37,-55,-47,-48,-49,]),'FLOAT_TYPE':([25,29,30,31,37,38,39,47,48,76,77,78,79,80,81,91,92,94,96,97,98,99,104,110,115,132,162,163,164,165,166,167,168,169,170,176,178,184,188,198,201,202,203,211,213,215,216,218,223,224,225,226,230,232,233,234,235,],[72,-16,-17,72,72,-52,-53,72,72,-13,72,-29,72,72,72,72,72,72,72,72,72,72,72,-15,72,72,72,-67,-68,-69,-70,-71,-72,-73,-74,72,72,72,72,72,-44,-45,-46,-57,72,72,-25,-26,72,-51,-27,-28,72,-55,-47,-48,-49,]),'DOUBLE_TYPE':([25,29,30,31,37,38,39,47,48,76,77,78,79,80,81,91,92,94,96,97,98,99,104,110,115,132,162,163,164,165,166,167,168,169,170,176,178,184,188,198,201,202,203,211,213,215,216,218,223,224,225,226,230,232,233,234,235,],[73,-16,-17,73,73,-52,-53,73,73,-13,73,-29,73,73,73,73,73,73,73,73,73,73,73,-15,73,73,73,-67,-68,-69,-70,-71,-72,-73,-74,73,73,73,73,73,-44,-45,-46,-57,73,73,-25,-26,73,-51,-27,-28,73,-55,-47,-48,-49,]),'DECIMAL_TYPE':([25,29,30,31,37,38,39,47,48,76,77,78,79,80,81,91,92,94,96,97,98,99,104,110,115,132,162,163,164,165,166,167,168,169,170,176,178,184,188,198,201,202,203,211,213,215,216,218,223,224,225,226,230,232,233,234,235,],[74,-16,-17,74,74,-52,-53,74,74,-13,74,-29,74,74,74,74,74,74,74,74,74,74,74,-15,74,74,74,-67,-68,-69,-70,-71,-72,-73,-74,74,74,74,74,74,-44,-45,-46,-57,74,74,-25,-26,74,-51,-27,-28,74,-55,-47,-48,-49,]),'INTEGER_TYPE':([25,29,30,31,37,38,39,47,48,76,77,78,79,80,81,91,92,94,96,97,98,99,104,110,115,132,162,163,164,165,166,167,168,169,170,176,178,184,188,198,201,202,203,211,213,215,216,218,223,224,225,226,230,232,233,234,235,],[54,-16,-17,54,54,-52,-53,54,54,-13,54,-29,54,54,54,54,54,141,54,54,54,54,54,-15,54,54,54,-67,-68,-69,-70,-71,-72,-73,-74,54,54,54,54,54,-44,-45,-46,-57,54,54,-25,-26,54,-51,-27,-28,54,-55,-47,-48,-49,]),'MINUS':([25,29,30,31,33,37,38,39,43,44,45,46,47,48,49,54,56,70,72,73,74,76,77,78,79,80,81,82,83,85,91,92,94,96,97,98,99,100,101,102,103,104,110,111,112,113,114,115,125,132,134,136,137,139,140,141,142,143,144,145,146,147,148,149,156,157,162,163,164,165,166,167,168,169,170,175,176,177,178,179,180,181,182,184,188,198,201,202,203,211,213,215,216,218,223,224,225,226,230,232,233,234,235,],[47,-16,-17,47,80,47,-52,-53,-94,-95,-93,-87,47,47,-91,-100,-90,-96,-97,-98,-99,-13,47,-29,47,47,47,80,-94,-95,47,47,47,47,47,47,47,-101,-94,-91,80,47,-15,-85,-93,-94,-86,47,-92,47,-33,80,-94,80,-94,-100,80,-9,-11,80,80,-42,-88,-89,-10,-12,47,-67,-68,-69,-70,-71,-72,-73,-74,80,47,-34,47,-124,-123,-125,-41,47,47,47,-44,-45,-46,-57,47,47,-25,-26,47,-51,-27,-28,47,-55,-47,-48,-49,]),'RBRACKET':([27,29,30,31,38,39,76,77,78,110,188,198,201,202,203,211,215,216,218,224,225,226,230,232,233,234,235,],[76,-16,-17,-18,-52,-53,-13,-14,-29,-15,-43,-56,-44,-45,-46,-57,-50,-25,-26,-51,-27,-28,-54,-55,-47,-48,-49,]),'PLUS':([33,43,44,45,46,49,54,56,70,72,73,74,82,83,85,100,101,102,103,111,112,113,114,125,134,136,137,139,140,141,142,143,144,145,146,147,148,149,156,157,175,177,179,180,181,182,],[79,-94,-95,-93,-87,-91,-100,-90,-96,-97,-98,-99,79,-94,-95,-101,-94,-91,79,-85,-93,-94,-86,-92,-33,79,-94,79,-94,-100,79,-9,-11,79,79,-42,-88,-89,-10,-12,79,-34,-124,-123,-125,-41,]),'EQUALS':([43,44,90,153,154,179,180,181,185,],[92,96,132,92,96,-124,-123,-125,132,]),'PLUSONE':([43,153,],[93,93,]),'LSQBRACKET':([43,52,55,57,58,59,60,61,62,63,64,65,66,67,83,89,101,113,120,137,140,153,200,],[94,106,108,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,94,108,94,94,94,94,94,94,213,]),'DOT':([43,55,83,84,101,113,120,124,137,138,140,],[95,107,95,107,95,95,95,107,95,107,95,]),'TIMES':([43,44,45,46,49,54,56,70,72,73,74,83,85,100,101,102,111,112,113,114,125,134,137,140,141,143,144,148,149,156,157,177,179,180,181,],[-94,-95,-93,98,-91,-100,-90,-96,-97,-98,-99,-94,-95,-101,-94,-91,98,-93,-94,98,-92,-33,-94,-94,-100,-9,-11,-88,-89,-10,-12,-34,-124,-123,-125,]),'DIVIDE':([43,44,45,46,49,54,56,70,72,73,74,83,85,100,101,102,111,112,113,114,125,134,137,140,141,143,144,148,149,156,157,177,179,180,181,],[-94,-95,-93,99,-91,-100,-90,-96,-97,-98,-99,-94,-95,-101,-94,-91,99,-93,-94,99,-92,-33,-94,-94,-100,-9,-11,-88,-89,-10,-12,-34,-124,-123,-125,]),'RPAREN':([45,46,49,54,56,70,72,73,74,82,83,85,91,93,97,100,111,112,113,114,116,117,118,119,120,121,122,123,125,133,134,135,136,137,138,139,143,144,145,146,147,148,149,150,156,157,160,175,177,179,180,181,182,187,189,191,192,193,196,197,205,207,209,210,217,221,229,],[-93,-87,-91,-100,-90,-96,-97,-98,-99,125,-94,-95,134,-83,147,-101,-85,-93,-94,-86,161,-59,-60,-61,-62,-63,-64,-65,-92,-37,-33,177,-35,-23,-24,-81,-9,-11,-82,182,-42,-88,-89,183,-10,-12,187,-80,-34,-124,-123,-125,-41,-66,-58,206,-102,208,-38,-36,-105,-103,219,220,-104,227,231,]),'COMMA':([45,46,49,54,56,70,72,73,74,85,100,111,112,113,114,125,133,134,136,137,138,143,144,147,148,149,156,157,177,179,180,181,182,192,205,],[-93,-87,-91,-100,-90,-96,-97,-98,-99,-95,-101,-85,-93,-94,-86,-92,176,-33,178,-23,-24,-9,-11,-42,-88,-89,-10,-12,-34,-124,-123,-125,-41,207,-105,]),'RSQBRACKET':([45,46,49,54,56,70,72,73,74,85,100,106,108,111,112,113,114,125,134,140,141,142,143,144,147,148,149,156,157,177,179,180,181,182,222,],[-93,-87,-91,-100,-90,-96,-97,-98,-99,-95,-101,155,158,-85,-93,-94,-86,-92,-33,179,180,181,-9,-11,-42,-88,-89,-10,-12,-34,-124,-123,-125,-41,228,]),'GREATER_THAN':([52,53,54,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,155,156,157,158,159,160,179,180,181,187,189,199,228,229,],[-110,-111,-100,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-75,-76,-97,-98,-99,-101,166,-59,-60,-61,-62,-63,-64,-65,-9,-11,166,-78,-10,-12,-79,186,166,-124,-123,-125,-66,-58,166,-77,166,]),'OR':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,179,180,181,187,189,199,229,],[-100,-97,-98,-99,-101,163,-59,-60,-61,-62,-63,-64,-65,-9,-11,163,-10,-12,163,-124,-123,-125,-66,-58,163,163,]),'AND':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,179,180,181,187,189,199,229,],[-100,-97,-98,-99,-101,164,-59,-60,-61,-62,-63,-64,-65,-9,-11,164,-10,-12,164,-124,-123,-125,-66,-58,164,164,]),'NOT':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,179,180,181,187,189,199,229,],[-100,-97,-98,-99,-101,165,-59,-60,-61,-62,-63,-64,-65,-9,-11,165,-10,-12,165,-124,-123,-125,-66,-58,165,165,]),'LESS_THAN':([54,71,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,179,180,181,187,189,199,229,],[-100,109,-97,-98,-99,-101,167,-59,-60,-61,-62,-63,-64,-65,-9,-11,167,-10,-12,167,-124,-123,-125,-66,-58,167,167,]),'GREATER_EQUALS_THAN':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,179,180,181,187,189,199,229,],[-100,-97,-98,-99,-101,168,-59,-60,-61,-62,-63,-64,-65,-9,-11,168,-10,-12,168,-124,-123,-125,-66,-58,168,168,]),'LESS_EQUALS_THAN':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,179,180,181,187,189,199,229,],[-100,-97,-98,-99,-101,169,-59,-60,-61,-62,-63,-64,-65,-9,-11,169,-10,-12,169,-124,-123,-125,-66,-58,169,169,]),'EQUALITY':([54,72,73,74,100,116,117,118,119,120,121,122,123,143,144,150,156,157,160,179,180,181,187,189,199,229,],[-100,-97,-98,-99,-101,170,-59,-60,-61,-62,-63,-64,-65,-9,-11,170,-10,-12,170,-124,-123,-125,-66,-58,170,170,]),'ELSE':([76,188,233,],[-13,204,204,]),'TRUE':([81,104,115,162,163,164,165,166,167,168,169,170,184,223,],[118,118,118,118,-67,-68,-69,-70,-71,-72,-73,-74,118,118,]),'FALSE':([81,104,115,162,163,164,165,166,167,168,169,170,184,223,],[119,119,119,119,-67,-68,-69,-70,-71,-72,-73,-74,119,119,]),}
>>>>>>> rLevin

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

<<<<<<< HEAD
_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,75,167,176,193,208,],[9,9,40,40,40,40,40,40,]),'block':([22,26,143,162,182,184,186,197,198,205,209,],[24,73,167,176,193,194,196,203,204,208,211,]),'body':([25,75,167,176,193,208,],[27,102,179,189,202,210,]),'lines':([25,75,167,176,193,208,],[28,28,28,28,28,28,]),'if':([25,75,167,176,193,208,],[29,29,29,29,29,29,]),'loop':([25,75,167,176,193,208,],[30,30,30,30,30,30,]),'function':([25,75,167,176,193,208,],[31,31,31,31,31,31,]),'assignment':([25,75,97,167,176,190,193,208,],[32,32,134,32,32,199,32,32,]),'expression':([25,37,75,87,90,123,167,176,193,208,],[33,79,33,124,129,158,33,33,33,33,]),'declaration':([25,75,154,155,167,174,175,176,185,193,208,],[34,34,172,172,34,172,172,34,172,34,34,]),'return':([25,75,167,176,193,208,],[35,35,35,35,35,35,]),'while_loop':([25,75,167,176,193,208,],[38,38,38,38,38,38,]),'loop_for':([25,75,167,176,193,208,],[39,39,39,39,39,39,]),'data_type':([25,40,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[41,82,41,121,135,141,170,170,41,170,170,41,170,135,41,41,]),'object_access':([25,37,75,76,77,78,87,90,91,92,96,107,123,144,153,163,167,176,193,201,208,],[43,43,43,104,104,115,43,43,104,104,115,115,43,115,115,115,43,43,43,115,43,]),'term':([25,37,75,76,77,87,90,123,167,176,193,208,],[44,44,44,103,106,44,44,44,44,44,44,44,]),'type':([25,37,45,46,75,76,77,78,87,90,91,92,96,107,123,144,153,163,167,176,191,193,201,208,],[47,47,93,95,47,47,47,114,47,47,47,47,114,114,47,114,114,114,47,47,200,47,114,47,]),'primitive':([25,40,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'data_structure':([25,40,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'factor':([25,37,75,76,77,87,90,91,92,123,167,176,193,208,],[53,53,53,53,53,53,53,131,132,53,53,53,53,53,]),'data_structure_list':([25,40,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'data_structure_array':([25,40,75,84,97,101,154,155,167,174,175,176,185,190,193,208,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'indexing':([25,37,75,76,77,78,87,90,91,92,96,107,123,144,153,163,167,176,193,201,208,],[67,67,67,67,67,113,67,67,67,67,113,113,67,113,113,113,67,67,67,113,67,]),'logical_expression':([78,96,107,144,153,163,201,],[108,133,142,168,169,177,207,]),'logical_factor':([78,96,107,144,153,163,201,],[109,109,109,109,109,109,109,]),'names':([82,83,121,122,],[117,120,156,157,]),'logical_operator':([108,109,133,142,168,169,177,207,],[144,153,144,144,144,144,144,144,]),'declarations':([154,155,174,175,185,],[171,173,187,188,195,]),'elseif':([167,211,],[180,212,]),'else':([167,211,],[181,213,]),}
=======
_lr_goto_items = {'program':([0,],[1,]),'usings':([0,4,],[2,14,]),'namespace':([0,2,],[3,7,]),'using':([0,4,],[4,4,]),'class':([3,7,],[8,17,]),'modifier':([3,7,25,31,77,188,198,215,230,],[9,9,40,40,40,40,40,40,40,]),'block':([22,26,161,183,204,206,208,219,220,227,231,],[24,75,188,198,215,216,218,225,226,230,233,]),'body':([25,31,77,188,198,215,230,],[27,78,110,201,211,224,232,]),'lines':([25,31,77,188,198,215,230,],[28,28,28,28,28,28,28,]),'if':([25,31,77,188,198,215,230,],[29,29,29,29,29,29,29,]),'loop':([25,31,77,188,198,215,230,],[30,30,30,30,30,30,30,]),'function':([25,31,77,188,198,215,230,],[31,31,31,31,31,31,31,]),'assignment':([25,31,77,105,188,198,212,215,230,],[32,32,32,151,32,32,221,32,32,]),'expression':([25,31,37,48,77,91,92,94,96,97,132,176,178,188,198,215,230,],[33,33,82,103,33,136,139,142,145,146,175,136,136,33,33,33,33,]),'declaration':([25,31,77,171,172,188,194,195,198,207,215,230,],[34,34,34,192,192,34,192,192,34,192,34,34,]),'return':([25,31,77,188,198,215,230,],[35,35,35,35,35,35,35,]),'while_loop':([25,31,77,188,198,215,230,],[38,38,38,38,38,38,38,]),'loop_for':([25,31,77,188,198,215,230,],[39,39,39,39,39,39,39,]),'data_type':([25,31,40,77,88,105,109,171,172,188,194,195,198,207,212,215,230,],[41,41,86,41,130,152,159,190,190,41,190,190,41,190,152,41,41,]),'names':([25,31,37,48,77,79,80,86,87,91,92,94,96,97,98,99,130,131,132,176,178,188,198,215,230,],[42,42,42,42,42,42,42,126,129,133,42,42,42,42,42,42,173,174,42,133,133,42,42,42,42,]),'indexing':([25,31,37,48,77,79,80,81,91,92,94,96,97,98,99,104,105,115,132,162,176,178,184,188,198,212,215,223,230,],[44,44,85,85,44,85,85,121,85,85,85,85,85,85,85,121,154,121,85,121,85,85,121,44,44,154,44,121,44,]),'object_access':([25,31,37,48,77,79,80,81,91,92,94,96,97,98,99,104,115,132,162,176,178,184,188,198,215,223,230,],[45,45,45,45,45,112,112,123,45,45,45,45,45,112,112,123,123,45,123,45,45,123,45,45,45,123,45,]),'term':([25,31,37,48,77,79,80,91,92,94,96,97,132,176,178,188,198,215,230,],[46,46,46,46,46,111,114,46,46,46,46,46,46,46,46,46,46,46,46,]),'type':([25,31,37,47,48,77,79,80,81,91,92,94,96,97,98,99,104,115,132,162,176,178,184,188,198,213,215,223,230,],[49,49,49,100,102,49,49,49,122,49,49,49,49,49,49,49,122,122,49,122,49,49,122,49,49,222,49,122,49,]),'primitive':([25,31,40,77,88,105,109,171,172,188,194,195,198,207,212,215,230,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'data_structure':([25,31,40,77,88,105,109,171,172,188,194,195,198,207,212,215,230,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'factor':([25,31,37,48,77,79,80,91,92,94,96,97,98,99,132,176,178,188,198,215,230,],[56,56,56,56,56,56,56,56,56,56,56,56,148,149,56,56,56,56,56,56,56,]),'data_structure_list':([25,31,40,77,88,105,109,171,172,188,194,195,198,207,212,215,230,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'data_structure_array':([25,31,40,77,88,105,109,171,172,188,194,195,198,207,212,215,230,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'function_call':([25,31,37,48,77,79,80,91,92,94,96,97,98,99,132,176,178,188,198,215,230,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'logical_expression':([81,104,115,184,223,],[116,150,160,199,229,]),'logical_factor':([81,104,115,162,184,223,],[117,117,117,189,117,117,]),'arguments':([91,176,178,],[135,196,197,]),'logical_operator':([116,150,160,199,229,],[162,162,162,162,162,]),'declarations':([171,172,194,195,207,],[191,193,209,210,217,]),'elseif':([188,233,],[202,234,]),'else':([188,233,],[203,235,]),}
>>>>>>> rLevin

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
<<<<<<< HEAD
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',43),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',44),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',48),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',49),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',53),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',57),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',60),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',61),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',65),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',66),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',67),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',68),
=======
  ('program -> usings namespace class','program',3,'p_program','PLY_yacc.py',42),
  ('program -> namespace class','program',2,'p_program','PLY_yacc.py',43),
  ('usings -> using usings','usings',2,'p_usings','PLY_yacc.py',47),
  ('usings -> using','usings',1,'p_usings','PLY_yacc.py',48),
  ('using -> USING CLASSOBJECT SEMICOLON','using',3,'p_using','PLY_yacc.py',52),
  ('namespace -> NAMESPACE CLASSOBJECT SEMICOLON','namespace',3,'p_namespace','PLY_yacc.py',56),
  ('class -> modifier CLASS CLASSOBJECT block','class',4,'p_class','PLY_yacc.py',59),
  ('class -> modifier STATIC CLASS CLASSOBJECT block','class',5,'p_class','PLY_yacc.py',60),
  ('object_access -> ID DOT ID','object_access',3,'p_object_access','PLY_yacc.py',64),
  ('object_access -> CLASSOBJECT DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',65),
  ('object_access -> ID DOT CLASSOBJECT','object_access',3,'p_object_access','PLY_yacc.py',66),
  ('object_access -> CLASSOBJECT DOT ID','object_access',3,'p_object_access','PLY_yacc.py',67),
>>>>>>> rLevin
  ('block -> LBRACKET body RBRACKET','block',3,'p_block','PLY_yacc.py',90),
  ('body -> lines SEMICOLON','body',2,'p_body','PLY_yacc.py',95),
  ('body -> lines SEMICOLON body','body',3,'p_body','PLY_yacc.py',96),
  ('body -> if','body',1,'p_body','PLY_yacc.py',97),
  ('body -> loop','body',1,'p_body','PLY_yacc.py',98),
  ('body -> function','body',1,'p_body','PLY_yacc.py',99),
  ('lines -> assignment','lines',1,'p_lines','PLY_yacc.py',103),
  ('lines -> expression','lines',1,'p_lines','PLY_yacc.py',104),
  ('lines -> declaration','lines',1,'p_lines','PLY_yacc.py',105),
  ('lines -> return','lines',1,'p_lines','PLY_yacc.py',106),
  ('names -> ID','names',1,'p_names','PLY_yacc.py',110),
  ('names -> CLASSOBJECT','names',1,'p_names','PLY_yacc.py',111),
  ('function -> modifier data_type names LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',115),
  ('function -> modifier VOID names LPAREN declarations RPAREN block','function',7,'p_funtion','PLY_yacc.py',116),
  ('function -> modifier STATIC data_type names LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',117),
  ('function -> modifier STATIC VOID names LPAREN declarations RPAREN block','function',8,'p_funtion','PLY_yacc.py',118),
<<<<<<< HEAD
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',139),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',140),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',144),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',145),
  ('expression -> object_access LPAREN expression RPAREN','expression',4,'p_console_writeline','PLY_yacc.py',148),
  ('expression -> object_access LPAREN RPAREN','expression',3,'p_console_readline','PLY_yacc.py',155),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',164),
  ('if -> IF LPAREN logical_expression RPAREN block body','if',6,'p_if','PLY_yacc.py',165),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',166),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',167),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',175),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',176),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',177),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',185),
  ('else -> ELSE block body','else',3,'p_else','PLY_yacc.py',186),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',190),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',191),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',196),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body','loop_for',10,'p_loop_for','PLY_yacc.py',197),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',202),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block body','while_loop',6,'p_while_loop','PLY_yacc.py',203),
  ('logical_expression -> logical_factor logical_operator logical_expression','logical_expression',3,'p_logical_expression','PLY_yacc.py',212),
  ('logical_expression -> logical_expression logical_operator logical_expression','logical_expression',3,'p_logical_expression','PLY_yacc.py',213),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',214),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',256),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',257),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',258),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',259),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',260),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',261),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',262),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',283),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',284),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',285),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',286),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',287),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',288),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',289),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',290),
  ('data_structure -> data_structure_list','data_structure',1,'p_data_structure','PLY_yacc.py',296),
  ('data_structure -> data_structure_array','data_structure',1,'p_data_structure','PLY_yacc.py',297),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET','data_structure_list',8,'p_data_structure_list','PLY_yacc.py',301),
  ('data_structure_array -> primitive LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',307),
  ('data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',308),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',312),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',325),
  ('assignment_class -> CLASSOBJECT ID','assignment_class',2,'p_assignment_class','PLY_yacc.py',328),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',331),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',332),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',333),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',349),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',350),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',351),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',366),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',367),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',368),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',369),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',370),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',387),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',388),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',389),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',390),
  ('type -> MINUS type','type',2,'p_type','PLY_yacc.py',391),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',409),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',410),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',411),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',422),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',434),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',435),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',436),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',437),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',441),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',442),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',447),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',448),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',449),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',450),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',451),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',452),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',453),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',454),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',455),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',456),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',457),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',464),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',465),
=======
  ('function -> function body','function',2,'p_funtion','PLY_yacc.py',119),
  ('return -> RETURN ID','return',2,'p_return','PLY_yacc.py',142),
  ('return -> RETURN type','return',2,'p_return','PLY_yacc.py',143),
  ('return -> RETURN expression','return',2,'p_return','PLY_yacc.py',144),
  ('function_call -> names LPAREN RPAREN','function_call',3,'p_function_call','PLY_yacc.py',147),
  ('function_call -> names LPAREN arguments RPAREN','function_call',4,'p_function_call','PLY_yacc.py',148),
  ('arguments -> expression','arguments',1,'p_arguments','PLY_yacc.py',151),
  ('arguments -> expression COMMA arguments','arguments',3,'p_arguments','PLY_yacc.py',152),
  ('arguments -> names','arguments',1,'p_arguments','PLY_yacc.py',153),
  ('arguments -> names COMMA arguments','arguments',3,'p_arguments','PLY_yacc.py',154),
  ('lambda_function -> LPAREN ID RPAREN ARROW expression','lambda_function',5,'p_lambda_function','PLY_yacc.py',160),
  ('lambda_function -> LPAREN ID RPAREN ARROW block','lambda_function',5,'p_lambda_function','PLY_yacc.py',161),
  ('expression -> object_access LPAREN expression RPAREN','expression',4,'p_console_writeline','PLY_yacc.py',164),
  ('expression -> object_access LPAREN RPAREN','expression',3,'p_console_readline','PLY_yacc.py',171),
  ('if -> IF LPAREN logical_expression RPAREN block','if',5,'p_if','PLY_yacc.py',180),
  ('if -> IF LPAREN logical_expression RPAREN block body','if',6,'p_if','PLY_yacc.py',181),
  ('if -> IF LPAREN logical_expression RPAREN block elseif','if',6,'p_if','PLY_yacc.py',182),
  ('if -> IF LPAREN logical_expression RPAREN block else','if',6,'p_if','PLY_yacc.py',183),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block','elseif',6,'p_elseif','PLY_yacc.py',186),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block elseif','elseif',7,'p_elseif','PLY_yacc.py',187),
  ('elseif -> ELSE IF LPAREN logical_expression RPAREN block else','elseif',7,'p_elseif','PLY_yacc.py',188),
  ('else -> ELSE block','else',2,'p_else','PLY_yacc.py',192),
  ('else -> ELSE block body','else',3,'p_else','PLY_yacc.py',193),
  ('loop -> while_loop','loop',1,'p_loop','PLY_yacc.py',197),
  ('loop -> loop_for','loop',1,'p_loop','PLY_yacc.py',198),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block','loop_for',9,'p_loop_for','PLY_yacc.py',203),
  ('loop_for -> FOR LPAREN assignment SEMICOLON logical_expression SEMICOLON assignment RPAREN block body','loop_for',10,'p_loop_for','PLY_yacc.py',204),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block','while_loop',5,'p_while_loop','PLY_yacc.py',209),
  ('while_loop -> WHILE LPAREN logical_expression RPAREN block body','while_loop',6,'p_while_loop','PLY_yacc.py',210),
  ('logical_expression -> logical_expression logical_operator logical_factor','logical_expression',3,'p_logical_expression','PLY_yacc.py',213),
  ('logical_expression -> logical_factor','logical_expression',1,'p_logical_expression','PLY_yacc.py',214),
  ('logical_factor -> TRUE','logical_factor',1,'p_logical_factor','PLY_yacc.py',217),
  ('logical_factor -> FALSE','logical_factor',1,'p_logical_factor','PLY_yacc.py',218),
  ('logical_factor -> ID','logical_factor',1,'p_logical_factor','PLY_yacc.py',219),
  ('logical_factor -> indexing','logical_factor',1,'p_logical_factor','PLY_yacc.py',220),
  ('logical_factor -> type','logical_factor',1,'p_logical_factor','PLY_yacc.py',221),
  ('logical_factor -> object_access','logical_factor',1,'p_logical_factor','PLY_yacc.py',222),
  ('logical_factor -> LPAREN logical_expression RPAREN','logical_factor',3,'p_logical_factor','PLY_yacc.py',223),
  ('logical_operator -> OR','logical_operator',1,'p_logical_operator','PLY_yacc.py',226),
  ('logical_operator -> AND','logical_operator',1,'p_logical_operator','PLY_yacc.py',227),
  ('logical_operator -> NOT','logical_operator',1,'p_logical_operator','PLY_yacc.py',228),
  ('logical_operator -> GREATER_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',229),
  ('logical_operator -> LESS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',230),
  ('logical_operator -> GREATER_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',231),
  ('logical_operator -> LESS_EQUALS_THAN','logical_operator',1,'p_logical_operator','PLY_yacc.py',232),
  ('logical_operator -> EQUALITY','logical_operator',1,'p_logical_operator','PLY_yacc.py',233),
  ('data_structure -> data_structure_list','data_structure',1,'p_data_structure','PLY_yacc.py',238),
  ('data_structure -> data_structure_array','data_structure',1,'p_data_structure','PLY_yacc.py',239),
  ('data_structure_list -> LIST LESS_THAN data_type GREATER_THAN ID LSQBRACKET type RSQBRACKET','data_structure_list',8,'p_data_structure_list','PLY_yacc.py',242),
  ('data_structure_array -> primitive LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',247),
  ('data_structure_array -> CLASSOBJECT LSQBRACKET RSQBRACKET','data_structure_array',3,'p_data_structure_array','PLY_yacc.py',248),
  ('assignment -> data_type ID EQUALS expression','assignment',4,'p_assignment','PLY_yacc.py',251),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',264),
  ('assignment -> indexing EQUALS expression','assignment',3,'p_assignment_untyped','PLY_yacc.py',265),
  ('assignment -> ID PLUSONE','assignment',2,'p_assignment_plus_one','PLY_yacc.py',281),
  ('assignment_class -> CLASSOBJECT ID','assignment_class',2,'p_assignment_class','PLY_yacc.py',295),
  ('expression -> expression PLUS term','expression',3,'p_expression','PLY_yacc.py',305),
  ('expression -> expression MINUS term','expression',3,'p_expression','PLY_yacc.py',306),
  ('expression -> term','expression',1,'p_expression','PLY_yacc.py',307),
  ('term -> term TIMES factor','term',3,'p_term','PLY_yacc.py',323),
  ('term -> term DIVIDE factor','term',3,'p_term','PLY_yacc.py',324),
  ('term -> factor','term',1,'p_term','PLY_yacc.py',325),
  ('factor -> type','factor',1,'p_factor','PLY_yacc.py',340),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','PLY_yacc.py',341),
  ('factor -> object_access','factor',1,'p_factor','PLY_yacc.py',342),
  ('factor -> ID','factor',1,'p_factor','PLY_yacc.py',343),
  ('factor -> indexing','factor',1,'p_factor','PLY_yacc.py',344),
  ('factor -> function_call','factor',1,'p_factor','PLY_yacc.py',345),
  ('type -> FLOAT_TYPE','type',1,'p_type','PLY_yacc.py',362),
  ('type -> DOUBLE_TYPE','type',1,'p_type','PLY_yacc.py',363),
  ('type -> DECIMAL_TYPE','type',1,'p_type','PLY_yacc.py',364),
  ('type -> INTEGER_TYPE','type',1,'p_type','PLY_yacc.py',365),
  ('type -> MINUS type','type',2,'p_type','PLY_yacc.py',366),
  ('declarations -> declaration','declarations',1,'p_declarations','PLY_yacc.py',384),
  ('declarations -> declaration COMMA','declarations',2,'p_declarations','PLY_yacc.py',385),
  ('declarations -> declaration COMMA declarations','declarations',3,'p_declarations','PLY_yacc.py',386),
  ('declaration -> data_type ID','declaration',2,'p_declaration','PLY_yacc.py',397),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','PLY_yacc.py',409),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','PLY_yacc.py',410),
  ('modifier -> PROTECTED','modifier',1,'p_modifier','PLY_yacc.py',411),
  ('modifier -> INTERNAL','modifier',1,'p_modifier','PLY_yacc.py',412),
  ('data_type -> primitive','data_type',1,'p_data_type','PLY_yacc.py',415),
  ('data_type -> data_structure','data_type',1,'p_data_type','PLY_yacc.py',416),
  ('primitive -> INT','primitive',1,'p_primitive','PLY_yacc.py',422),
  ('primitive -> FLOAT','primitive',1,'p_primitive','PLY_yacc.py',423),
  ('primitive -> BOOL','primitive',1,'p_primitive','PLY_yacc.py',424),
  ('primitive -> BYTE','primitive',1,'p_primitive','PLY_yacc.py',425),
  ('primitive -> CHAR','primitive',1,'p_primitive','PLY_yacc.py',426),
  ('primitive -> SBYTE','primitive',1,'p_primitive','PLY_yacc.py',427),
  ('primitive -> DECIMAL','primitive',1,'p_primitive','PLY_yacc.py',428),
  ('primitive -> DOUBLE','primitive',1,'p_primitive','PLY_yacc.py',429),
  ('primitive -> LONG','primitive',1,'p_primitive','PLY_yacc.py',430),
  ('primitive -> SHORT','primitive',1,'p_primitive','PLY_yacc.py',431),
  ('primitive -> UINT','primitive',1,'p_primitive','PLY_yacc.py',432),
  ('indexing -> ID LSQBRACKET INTEGER_TYPE RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',439),
  ('indexing -> ID LSQBRACKET ID RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',440),
  ('indexing -> ID LSQBRACKET expression RSQBRACKET','indexing',4,'p_indexing','PLY_yacc.py',441),
>>>>>>> rLevin
]
